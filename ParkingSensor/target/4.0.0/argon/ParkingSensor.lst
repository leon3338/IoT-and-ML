
/Users/andrewleonard/Desktop/LabAndProjects/ParkingSensor/target/4.0.0/argon/ParkingSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001cd4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5cf0  000b5cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5d14  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e620  000b5d18  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  2003e694  2003e694  0002e694  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5d8c  000b5d8c  00025d8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5db4  000b5db4  00025db4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012b8be  00000000  00000000  00025db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001495b  00000000  00000000  00151676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039a7d  00000000  00000000  00165fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b58  00000000  00000000  0019fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a300  00000000  00000000  001a25a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d73f  00000000  00000000  001ac8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044db4  00000000  00000000  001e9fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001375a3  00000000  00000000  0022ed99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000791c  00000000  00000000  0036633c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fc45 	bl	b58bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fc4d 	bl	b58d8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e620 	.word	0x2003e620
   b4048:	000b5d18 	.word	0x000b5d18
   b404c:	2003e694 	.word	0x2003e694
   b4050:	2003e694 	.word	0x2003e694
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fb01 	bl	b5664 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5cbc 	.word	0x000b5cbc
   b407c:	000b5ce4 	.word	0x000b5ce4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f829 	bl	b40dc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 baa1 	b.w	b55d4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bb87 	b.w	b47a4 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bb85 	b.w	b47a4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bb8b 	b.w	b47b4 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:


String body = "Stop! Your Car is Parked!"; //message to be sent


void setup() {
   b40b0:	b508      	push	{r3, lr}
  pinMode(BuzzerPin, OUTPUT);// Put initialization like pinMode and begin functions here.
   b40b2:	4b08      	ldr	r3, [pc, #32]	; (b40d4 <setup+0x24>)
   b40b4:	2101      	movs	r1, #1
   b40b6:	8818      	ldrh	r0, [r3, #0]
   b40b8:	f001 fb44 	bl	b5744 <pinMode>
  Serial.begin(9600);             // Begin serial communications
   b40bc:	f001 fa04 	bl	b54c8 <_Z16_fetch_usbserialv>
   b40c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40c4:	f001 f9f4 	bl	b54b0 <_ZN9USBSerial5beginEl>
  leds.init();    //leds initialized 


}
   b40c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  leds.init();    //leds initialized 
   b40cc:	4802      	ldr	r0, [pc, #8]	; (b40d8 <setup+0x28>)
   b40ce:	f000 b96c 	b.w	b43aa <_ZN12ChainableLED4initEv>
   b40d2:	bf00      	nop
   b40d4:	2003e620 	.word	0x2003e620
   b40d8:	2003e6a8 	.word	0x2003e6a8

000b40dc <loop>:


void loop() {
   b40dc:	b530      	push	{r4, r5, lr}
 
long RangeININCHES; //dist variable

RangeININCHES = ultrasonic.MeasureInInches();
   b40de:	4833      	ldr	r0, [pc, #204]	; (b41ac <loop+0xd0>)
void loop() {
   b40e0:	b085      	sub	sp, #20
RangeININCHES = ultrasonic.MeasureInInches();
   b40e2:	f000 f893 	bl	b420c <_ZN10Ultrasonic15MeasureInInchesEv>
   b40e6:	4604      	mov	r4, r0
Serial.print(RangeININCHES);
   b40e8:	f001 f9ee 	bl	b54c8 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ec:	2c00      	cmp	r4, #0
   b40ee:	4605      	mov	r5, r0
   b40f0:	da29      	bge.n	b4146 <loop+0x6a>
            t = print('-');
   b40f2:	212d      	movs	r1, #45	; 0x2d
   b40f4:	f001 f852 	bl	b519c <_ZN5Print5printEc>
            val = -n;
   b40f8:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40fa:	220a      	movs	r2, #10
   b40fc:	4628      	mov	r0, r5
   b40fe:	f001 f866 	bl	b51ce <_ZN5Print11printNumberEmh>
Serial.println(" IN");
   b4102:	f001 f9e1 	bl	b54c8 <_Z16_fetch_usbserialv>
   b4106:	492a      	ldr	r1, [pc, #168]	; (b41b0 <loop+0xd4>)
   b4108:	f001 f857 	bl	b51ba <_ZN5Print7printlnEPKc>

if (RangeININCHES > distance1 ){
   b410c:	ee07 4a90 	vmov	s15, r4
   b4110:	4b28      	ldr	r3, [pc, #160]	; (b41b4 <loop+0xd8>)
   b4112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4116:	ed93 7a00 	vldr	s14, [r3]
   b411a:	eef4 7ac7 	vcmpe.f32	s15, s14
   b411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4122:	dd12      	ble.n	b414a <loop+0x6e>
  leds.setColorRGB(0, 0, 255, 0);//not pulled in far enough
   b4124:	2200      	movs	r2, #0
   b4126:	4824      	ldr	r0, [pc, #144]	; (b41b8 <loop+0xdc>)
   b4128:	9200      	str	r2, [sp, #0]
   b412a:	23ff      	movs	r3, #255	; 0xff
   b412c:	4611      	mov	r1, r2
   b412e:	f000 f8f4 	bl	b431a <_ZN12ChainableLED11setColorRGBEhhhh>
  noTone(BuzzerPin); 
   b4132:	4b22      	ldr	r3, [pc, #136]	; (b41bc <loop+0xe0>)
   b4134:	7818      	ldrb	r0, [r3, #0]
   b4136:	f001 f904 	bl	b5342 <noTone>
  tone(BuzzerPin, 1000); // Send 1KHz sound through the grove buzzer
  Particle.publish("twilio_sms", body, PRIVATE);
 
}

 delay(100); 
   b413a:	2064      	movs	r0, #100	; 0x64
   b413c:	b005      	add	sp, #20
   b413e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 delay(100); 
   b4142:	f000 bb67 	b.w	b4814 <delay>
            val = n;
   b4146:	4621      	mov	r1, r4
   b4148:	e7d7      	b.n	b40fa <loop+0x1e>
else if (RangeININCHES <= distance1)
   b414a:	d8f6      	bhi.n	b413a <loop+0x5e>
  leds.setColorRGB(0, 255, 0, 0);//parked 
   b414c:	2400      	movs	r4, #0
   b414e:	4623      	mov	r3, r4
   b4150:	4621      	mov	r1, r4
   b4152:	4819      	ldr	r0, [pc, #100]	; (b41b8 <loop+0xdc>)
   b4154:	9400      	str	r4, [sp, #0]
   b4156:	22ff      	movs	r2, #255	; 0xff
   b4158:	f000 f8df 	bl	b431a <_ZN12ChainableLED11setColorRGBEhhhh>
  tone(BuzzerPin, 1000); // Send 1KHz sound through the grove buzzer
   b415c:	4b17      	ldr	r3, [pc, #92]	; (b41bc <loop+0xe0>)
   b415e:	4622      	mov	r2, r4
   b4160:	7818      	ldrb	r0, [r3, #0]
   b4162:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4166:	f001 f8d5 	bl	b5314 <tone>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b416a:	4b15      	ldr	r3, [pc, #84]	; (b41c0 <loop+0xe4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b416c:	4a15      	ldr	r2, [pc, #84]	; (b41c4 <loop+0xe8>)
   b416e:	781b      	ldrb	r3, [r3, #0]
   b4170:	f88d 3000 	strb.w	r3, [sp]
   b4174:	6812      	ldr	r2, [r2, #0]
   b4176:	4914      	ldr	r1, [pc, #80]	; (b41c8 <loop+0xec>)
   b4178:	233c      	movs	r3, #60	; 0x3c
   b417a:	a802      	add	r0, sp, #8
   b417c:	f000 fccc 	bl	b4b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4180:	9c03      	ldr	r4, [sp, #12]
   b4182:	2c00      	cmp	r4, #0
   b4184:	d0d9      	beq.n	b413a <loop+0x5e>
      if (--_M_use_count == 0)
   b4186:	6863      	ldr	r3, [r4, #4]
   b4188:	3b01      	subs	r3, #1
   b418a:	6063      	str	r3, [r4, #4]
   b418c:	2b00      	cmp	r3, #0
   b418e:	d1d4      	bne.n	b413a <loop+0x5e>
          _M_dispose();
   b4190:	6823      	ldr	r3, [r4, #0]
   b4192:	4620      	mov	r0, r4
   b4194:	689b      	ldr	r3, [r3, #8]
   b4196:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4198:	68a3      	ldr	r3, [r4, #8]
   b419a:	3b01      	subs	r3, #1
   b419c:	60a3      	str	r3, [r4, #8]
   b419e:	2b00      	cmp	r3, #0
   b41a0:	d1cb      	bne.n	b413a <loop+0x5e>
            _M_destroy();
   b41a2:	6823      	ldr	r3, [r4, #0]
   b41a4:	4620      	mov	r0, r4
   b41a6:	68db      	ldr	r3, [r3, #12]
   b41a8:	4798      	blx	r3
    }
   b41aa:	e7c6      	b.n	b413a <loop+0x5e>
   b41ac:	2003e6b0 	.word	0x2003e6b0
   b41b0:	000b5a90 	.word	0x000b5a90
   b41b4:	2003e624 	.word	0x2003e624
   b41b8:	2003e6a8 	.word	0x2003e6a8
   b41bc:	2003e620 	.word	0x2003e620
   b41c0:	2003e694 	.word	0x2003e694
   b41c4:	2003e698 	.word	0x2003e698
   b41c8:	000b5a94 	.word	0x000b5a94

000b41cc <_GLOBAL__sub_I_ultrasonic>:
   b41cc:	b510      	push	{r4, lr}
        val_(val) {
   b41ce:	4b09      	ldr	r3, [pc, #36]	; (b41f4 <_GLOBAL__sub_I_ultrasonic+0x28>)
Ultrasonic ultrasonic(D4);  
   b41d0:	4809      	ldr	r0, [pc, #36]	; (b41f8 <_GLOBAL__sub_I_ultrasonic+0x2c>)
   b41d2:	2401      	movs	r4, #1
   b41d4:	701c      	strb	r4, [r3, #0]
   b41d6:	2104      	movs	r1, #4
   b41d8:	f000 f816 	bl	b4208 <_ZN10UltrasonicC1Ei>
ChainableLED leds(D2, D3, 1);  
   b41dc:	4623      	mov	r3, r4
   b41de:	2102      	movs	r1, #2
   b41e0:	4806      	ldr	r0, [pc, #24]	; (b41fc <_GLOBAL__sub_I_ultrasonic+0x30>)
   b41e2:	2203      	movs	r2, #3
   b41e4:	f000 f836 	bl	b4254 <_ZN12ChainableLEDC1Ehhh>
   b41e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
String body = "Stop! Your Car is Parked!"; //message to be sent
   b41ec:	4904      	ldr	r1, [pc, #16]	; (b4200 <_GLOBAL__sub_I_ultrasonic+0x34>)
   b41ee:	4805      	ldr	r0, [pc, #20]	; (b4204 <_GLOBAL__sub_I_ultrasonic+0x38>)
   b41f0:	f001 b860 	b.w	b52b4 <_ZN6StringC1EPK19__FlashStringHelper>
   b41f4:	2003e694 	.word	0x2003e694
   b41f8:	2003e6b0 	.word	0x2003e6b0
   b41fc:	2003e6a8 	.word	0x2003e6a8
   b4200:	000b5a9f 	.word	0x000b5a9f
   b4204:	2003e698 	.word	0x2003e698

000b4208 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b4208:	6001      	str	r1, [r0, #0]
}
   b420a:	4770      	bx	lr

000b420c <_ZN10Ultrasonic15MeasureInInchesEv>:
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
/*The measured distance from the range 0 to 157 Inches*/
long Ultrasonic::MeasureInInches(void)
{
   b420c:	b510      	push	{r4, lr}
   b420e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b4210:	2101      	movs	r1, #1
   b4212:	8800      	ldrh	r0, [r0, #0]
   b4214:	f001 fa96 	bl	b5744 <pinMode>
	digitalWrite(_pin, LOW);
   b4218:	8820      	ldrh	r0, [r4, #0]
   b421a:	2100      	movs	r1, #0
   b421c:	f001 faa3 	bl	b5766 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4220:	2002      	movs	r0, #2
   b4222:	f000 f8f3 	bl	b440c <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b4226:	8820      	ldrh	r0, [r4, #0]
   b4228:	2101      	movs	r1, #1
   b422a:	f001 fa9c 	bl	b5766 <digitalWrite>
   b422e:	2005      	movs	r0, #5
   b4230:	f000 f8ec 	bl	b440c <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b4234:	8820      	ldrh	r0, [r4, #0]
   b4236:	2100      	movs	r1, #0
   b4238:	f001 fa95 	bl	b5766 <digitalWrite>
	pinMode(_pin,INPUT);
   b423c:	8820      	ldrh	r0, [r4, #0]
   b423e:	2100      	movs	r1, #0
   b4240:	f001 fa80 	bl	b5744 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b4244:	8820      	ldrh	r0, [r4, #0]
   b4246:	2101      	movs	r1, #1
   b4248:	f001 faa6 	bl	b5798 <pulseIn>
	long RangeInInches;
	RangeInInches = duration/74/2;
	return RangeInInches;
   b424c:	2394      	movs	r3, #148	; 0x94
   b424e:	fb90 f0f3 	sdiv	r0, r0, r3
   b4252:	bd10      	pop	{r4, pc}

000b4254 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b4254:	b510      	push	{r4, lr}
   b4256:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b4258:	7001      	strb	r1, [r0, #0]
   b425a:	7042      	strb	r2, [r0, #1]
   b425c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b425e:	2101      	movs	r1, #1
   b4260:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b4264:	f001 fb22 	bl	b58ac <calloc>
   b4268:	6060      	str	r0, [r4, #4]
}
   b426a:	4620      	mov	r0, r4
   b426c:	bd10      	pop	{r4, pc}

000b426e <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b426e:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b4270:	2100      	movs	r1, #0
{
   b4272:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b4274:	7800      	ldrb	r0, [r0, #0]
   b4276:	f001 fa76 	bl	b5766 <digitalWrite>
   b427a:	2014      	movs	r0, #20
   b427c:	f000 f8c6 	bl	b440c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b4280:	7820      	ldrb	r0, [r4, #0]
   b4282:	2101      	movs	r1, #1
   b4284:	f001 fa6f 	bl	b5766 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b4288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b428c:	2014      	movs	r0, #20
   b428e:	f000 b8bd 	b.w	b440c <HAL_Delay_Microseconds>

000b4292 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b4292:	b570      	push	{r4, r5, r6, lr}
   b4294:	4606      	mov	r6, r0
   b4296:	460c      	mov	r4, r1
   b4298:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b429a:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b429c:	bf4c      	ite	mi
   b429e:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b42a0:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b42a2:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b42a4:	f001 fa5f 	bl	b5766 <digitalWrite>
    for (byte i=0; i<8; i++)
   b42a8:	3d01      	subs	r5, #1
        clk();
   b42aa:	4630      	mov	r0, r6
   b42ac:	f7ff ffdf 	bl	b426e <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b42b0:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b42b2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b42b6:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b42b8:	d1ef      	bne.n	b429a <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b42ba:	bd70      	pop	{r4, r5, r6, pc}

000b42bc <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b42bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b42be:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b42c2:	461e      	mov	r6, r3
   b42c4:	460c      	mov	r4, r1
   b42c6:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b42c8:	bf14      	ite	ne
   b42ca:	21c0      	movne	r1, #192	; 0xc0
   b42cc:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b42ce:	0673      	lsls	r3, r6, #25
   b42d0:	bf58      	it	pl
   b42d2:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b42d6:	062a      	lsls	r2, r5, #24
   b42d8:	bf58      	it	pl
   b42da:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b42de:	066b      	lsls	r3, r5, #25
   b42e0:	bf58      	it	pl
   b42e2:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b42e6:	0622      	lsls	r2, r4, #24
   b42e8:	bf58      	it	pl
   b42ea:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b42ee:	0663      	lsls	r3, r4, #25
   b42f0:	bf58      	it	pl
   b42f2:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b42f6:	9001      	str	r0, [sp, #4]
   b42f8:	f7ff ffcb 	bl	b4292 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b42fc:	9801      	ldr	r0, [sp, #4]
   b42fe:	4631      	mov	r1, r6
   b4300:	f7ff ffc7 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b4304:	9801      	ldr	r0, [sp, #4]
   b4306:	4629      	mov	r1, r5
   b4308:	f7ff ffc3 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b430c:	9801      	ldr	r0, [sp, #4]
   b430e:	4621      	mov	r1, r4
}
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b4316:	f7ff bfbc 	b.w	b4292 <_ZN12ChainableLED8sendByteEh>

000b431a <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b431a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b431e:	4604      	mov	r4, r0
   b4320:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b4322:	2100      	movs	r1, #0
{
   b4324:	4690      	mov	r8, r2
   b4326:	4699      	mov	r9, r3
   b4328:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b432c:	f7ff ffb1 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b4330:	2100      	movs	r1, #0
   b4332:	4620      	mov	r0, r4
   b4334:	f7ff ffad 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b4338:	2100      	movs	r1, #0
   b433a:	4620      	mov	r0, r4
   b433c:	f7ff ffa9 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b4340:	2100      	movs	r1, #0
   b4342:	4620      	mov	r0, r4
   b4344:	f7ff ffa5 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
   b4348:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b434a:	78a3      	ldrb	r3, [r4, #2]
   b434c:	b2f5      	uxtb	r5, r6
   b434e:	42ab      	cmp	r3, r5
   b4350:	d919      	bls.n	b4386 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b4352:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b4356:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b4358:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b435c:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b4360:	d108      	bne.n	b4374 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b4362:	6861      	ldr	r1, [r4, #4]
   b4364:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b4368:	6861      	ldr	r1, [r4, #4]
   b436a:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b436e:	6861      	ldr	r1, [r4, #4]
   b4370:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b4374:	6861      	ldr	r1, [r4, #4]
   b4376:	5ccb      	ldrb	r3, [r1, r3]
   b4378:	5c8a      	ldrb	r2, [r1, r2]
   b437a:	5c09      	ldrb	r1, [r1, r0]
   b437c:	4620      	mov	r0, r4
   b437e:	f7ff ff9d 	bl	b42bc <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b4382:	3601      	adds	r6, #1
   b4384:	e7e1      	b.n	b434a <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b4386:	4620      	mov	r0, r4
   b4388:	2100      	movs	r1, #0
   b438a:	f7ff ff82 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b438e:	4620      	mov	r0, r4
   b4390:	2100      	movs	r1, #0
   b4392:	f7ff ff7e 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b4396:	4620      	mov	r0, r4
   b4398:	2100      	movs	r1, #0
   b439a:	f7ff ff7a 	bl	b4292 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b439e:	4620      	mov	r0, r4
   b43a0:	2100      	movs	r1, #0
}
   b43a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b43a6:	f7ff bf74 	b.w	b4292 <_ZN12ChainableLED8sendByteEh>

000b43aa <_ZN12ChainableLED4initEv>:
{
   b43aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b43ac:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b43ae:	2101      	movs	r1, #1
   b43b0:	7800      	ldrb	r0, [r0, #0]
   b43b2:	f001 f9c7 	bl	b5744 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b43b6:	7860      	ldrb	r0, [r4, #1]
   b43b8:	2101      	movs	r1, #1
   b43ba:	f001 f9c3 	bl	b5744 <pinMode>
   b43be:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b43c0:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b43c2:	78a3      	ldrb	r3, [r4, #2]
   b43c4:	b2e9      	uxtb	r1, r5
   b43c6:	428b      	cmp	r3, r1
   b43c8:	d907      	bls.n	b43da <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b43ca:	2300      	movs	r3, #0
   b43cc:	9600      	str	r6, [sp, #0]
   b43ce:	461a      	mov	r2, r3
   b43d0:	4620      	mov	r0, r4
   b43d2:	f7ff ffa2 	bl	b431a <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b43d6:	3501      	adds	r5, #1
   b43d8:	e7f3      	b.n	b43c2 <_ZN12ChainableLED4initEv+0x18>
}
   b43da:	b002      	add	sp, #8
   b43dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b43e0 <_GLOBAL__sub_I__ZN6TwilioC2Ev>:
   b43e0:	4b01      	ldr	r3, [pc, #4]	; (b43e8 <_GLOBAL__sub_I__ZN6TwilioC2Ev+0x8>)
   b43e2:	2201      	movs	r2, #1
   b43e4:	701a      	strb	r2, [r3, #0]
    // make sure you're not calling this more than once per second,
    // and checkout Twilio pricing here: 
    //  https://www.twilio.com/user/account/usage/primary
    //
    Spark.publish("Twilio/message", json.c_str(), 60, PRIVATE);
}
   b43e6:	4770      	bx	lr
   b43e8:	2003e6b4 	.word	0x2003e6b4

000b43ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <os_mutex_recursive_create+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030248 	.word	0x00030248

000b43fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <HAL_RNG_GetRandomNumber+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	685b      	ldr	r3, [r3, #4]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030218 	.word	0x00030218

000b440c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <HAL_Delay_Microseconds+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	68db      	ldr	r3, [r3, #12]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030218 	.word	0x00030218

000b441c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	695b      	ldr	r3, [r3, #20]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030218 	.word	0x00030218

000b442c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <HAL_Validate_Pin_Function+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	685b      	ldr	r3, [r3, #4]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003022c 	.word	0x0003022c

000b443c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <HAL_Pin_Mode+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	689b      	ldr	r3, [r3, #8]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003022c 	.word	0x0003022c

000b444c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <HAL_Get_Pin_Mode+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	68db      	ldr	r3, [r3, #12]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	0003022c 	.word	0x0003022c

000b445c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <HAL_GPIO_Write+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	691b      	ldr	r3, [r3, #16]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	0003022c 	.word	0x0003022c

000b446c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <HAL_Pulse_In+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003022c 	.word	0x0003022c

000b447c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <hal_i2c_write+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6a1b      	ldr	r3, [r3, #32]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030228 	.word	0x00030228

000b448c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <hal_i2c_available+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030228 	.word	0x00030228

000b449c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <hal_i2c_read+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030228 	.word	0x00030228

000b44ac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <hal_i2c_peek+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030228 	.word	0x00030228

000b44bc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <hal_i2c_flush+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030228 	.word	0x00030228

000b44cc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <hal_i2c_is_enabled+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030228 	.word	0x00030228

000b44dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <hal_i2c_init+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030228 	.word	0x00030228

000b44ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <inet_inet_ntop+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	695b      	ldr	r3, [r3, #20]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030264 	.word	0x00030264

000b44fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <netdb_freeaddrinfo+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	689b      	ldr	r3, [r3, #8]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030268 	.word	0x00030268

000b450c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <netdb_getaddrinfo+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	68db      	ldr	r3, [r3, #12]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	00030268 	.word	0x00030268

000b451c <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <HAL_Tone_Start+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	681b      	ldr	r3, [r3, #0]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	00030224 	.word	0x00030224

000b452c <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <HAL_Tone_Stop+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	685b      	ldr	r3, [r3, #4]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030224 	.word	0x00030224

000b453c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_spi_init+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	69db      	ldr	r3, [r3, #28]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030230 	.word	0x00030230

000b454c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <hal_spi_is_enabled+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	6a1b      	ldr	r3, [r3, #32]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	00030230 	.word	0x00030230

000b455c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <hal_usart_write+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	68db      	ldr	r3, [r3, #12]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003023c 	.word	0x0003023c

000b456c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <hal_usart_available+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	691b      	ldr	r3, [r3, #16]
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003023c 	.word	0x0003023c

000b457c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <hal_usart_read+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	695b      	ldr	r3, [r3, #20]
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003023c 	.word	0x0003023c

000b458c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <hal_usart_peek+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	699b      	ldr	r3, [r3, #24]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003023c 	.word	0x0003023c

000b459c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <hal_usart_flush+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	69db      	ldr	r3, [r3, #28]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003023c 	.word	0x0003023c

000b45ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <hal_usart_is_enabled+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	6a1b      	ldr	r3, [r3, #32]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	0003023c 	.word	0x0003023c

000b45bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <hal_usart_available_data_for_write+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	0003023c 	.word	0x0003023c

000b45cc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <hal_usart_init_ex+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	0003023c 	.word	0x0003023c

000b45dc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <HAL_USB_USART_Init+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	681b      	ldr	r3, [r3, #0]
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	0003024c 	.word	0x0003024c

000b45ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <HAL_USB_USART_Begin+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	685b      	ldr	r3, [r3, #4]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	0003024c 	.word	0x0003024c

000b45fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <HAL_USB_USART_Available_Data+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	691b      	ldr	r3, [r3, #16]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	0003024c 	.word	0x0003024c

000b460c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	695b      	ldr	r3, [r3, #20]
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	0003024c 	.word	0x0003024c

000b461c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <HAL_USB_USART_Receive_Data+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	699b      	ldr	r3, [r3, #24]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	0003024c 	.word	0x0003024c

000b462c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <HAL_USB_USART_Send_Data+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	69db      	ldr	r3, [r3, #28]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	0003024c 	.word	0x0003024c

000b463c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <HAL_USB_USART_Flush_Data+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	6a1b      	ldr	r3, [r3, #32]
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	0003024c 	.word	0x0003024c

000b464c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <set_system_mode+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	685b      	ldr	r3, [r3, #4]
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030220 	.word	0x00030220

000b465c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <system_delay_ms+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	695b      	ldr	r3, [r3, #20]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030220 	.word	0x00030220

000b466c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <application_thread_current+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030220 	.word	0x00030220

000b467c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <application_thread_invoke+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	00030220 	.word	0x00030220

000b468c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b03      	ldr	r3, [pc, #12]	; (b469c <system_ctrl_set_app_request_handler+0x10>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4696:	9301      	str	r3, [sp, #4]
   b4698:	bd08      	pop	{r3, pc}
   b469a:	0000      	.short	0x0000
   b469c:	00030220 	.word	0x00030220

000b46a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b03      	ldr	r3, [pc, #12]	; (b46b0 <system_ctrl_set_result+0x10>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b46aa:	9301      	str	r3, [sp, #4]
   b46ac:	bd08      	pop	{r3, pc}
   b46ae:	0000      	.short	0x0000
   b46b0:	00030220 	.word	0x00030220

000b46b4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <spark_cloud_flag_connected+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	695b      	ldr	r3, [r3, #20]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030244 	.word	0x00030244

000b46c4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <spark_send_event+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6a1b      	ldr	r3, [r3, #32]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030244 	.word	0x00030244

000b46d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030244 	.word	0x00030244

000b46e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <network_connect+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	685b      	ldr	r3, [r3, #4]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030240 	.word	0x00030240

000b46f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <network_connecting+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	689b      	ldr	r3, [r3, #8]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030240 	.word	0x00030240

000b4704 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <network_disconnect+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	68db      	ldr	r3, [r3, #12]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030240 	.word	0x00030240

000b4714 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <network_ready+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	691b      	ldr	r3, [r3, #16]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030240 	.word	0x00030240

000b4724 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <network_on+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	695b      	ldr	r3, [r3, #20]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030240 	.word	0x00030240

000b4734 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <network_off+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	699b      	ldr	r3, [r3, #24]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030240 	.word	0x00030240

000b4744 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <network_listen+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	69db      	ldr	r3, [r3, #28]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030240 	.word	0x00030240

000b4754 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <network_listening+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	6a1b      	ldr	r3, [r3, #32]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030240 	.word	0x00030240

000b4764 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <network_set_listen_timeout+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030240 	.word	0x00030240

000b4774 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <network_get_listen_timeout+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	00030240 	.word	0x00030240

000b4784 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <network_is_on+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	00030240 	.word	0x00030240

000b4794 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <network_is_off+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	00030240 	.word	0x00030240

000b47a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <malloc+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	681b      	ldr	r3, [r3, #0]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003021c 	.word	0x0003021c

000b47b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <free+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	685b      	ldr	r3, [r3, #4]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003021c 	.word	0x0003021c

000b47c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <realloc+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	689b      	ldr	r3, [r3, #8]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003021c 	.word	0x0003021c

000b47d4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <abort+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003021c 	.word	0x0003021c

000b47e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <_malloc_r+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003021c 	.word	0x0003021c

000b47f4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <__assert_func+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	0003021c 	.word	0x0003021c

000b4804 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <newlib_impure_ptr_callback+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	0003021c 	.word	0x0003021c

000b4814 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4814:	2100      	movs	r1, #0
   b4816:	f7ff bf21 	b.w	b465c <system_delay_ms>

000b481a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b481a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b481c:	6883      	ldr	r3, [r0, #8]
   b481e:	4604      	mov	r4, r0
   b4820:	b90b      	cbnz	r3, b4826 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4822:	f001 f839 	bl	b5898 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4826:	68c3      	ldr	r3, [r0, #12]
   b4828:	4798      	blx	r3
      if (_M_manager)
   b482a:	68a3      	ldr	r3, [r4, #8]
   b482c:	b11b      	cbz	r3, b4836 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b482e:	2203      	movs	r2, #3
   b4830:	4621      	mov	r1, r4
   b4832:	4620      	mov	r0, r4
   b4834:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4836:	4620      	mov	r0, r4
   b4838:	2110      	movs	r1, #16
}
   b483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b483e:	f7ff bc2c 	b.w	b409a <_ZdlPvj>

000b4842 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4842:	b510      	push	{r4, lr}
      if (_M_manager)
   b4844:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4846:	4604      	mov	r4, r0
      if (_M_manager)
   b4848:	b113      	cbz	r3, b4850 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b484a:	2203      	movs	r2, #3
   b484c:	4601      	mov	r1, r0
   b484e:	4798      	blx	r3
    }
   b4850:	4620      	mov	r0, r4
   b4852:	bd10      	pop	{r4, pc}

000b4854 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4854:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4856:	6843      	ldr	r3, [r0, #4]
   b4858:	3b01      	subs	r3, #1
    {
   b485a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b485c:	6043      	str	r3, [r0, #4]
   b485e:	b963      	cbnz	r3, b487a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4860:	6803      	ldr	r3, [r0, #0]
   b4862:	689b      	ldr	r3, [r3, #8]
   b4864:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4866:	68a3      	ldr	r3, [r4, #8]
   b4868:	3b01      	subs	r3, #1
   b486a:	60a3      	str	r3, [r4, #8]
   b486c:	b92b      	cbnz	r3, b487a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b486e:	6823      	ldr	r3, [r4, #0]
   b4870:	4620      	mov	r0, r4
   b4872:	68db      	ldr	r3, [r3, #12]
    }
   b4874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4878:	4718      	bx	r3
    }
   b487a:	bd10      	pop	{r4, pc}

000b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b487c:	b510      	push	{r4, lr}
   b487e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4880:	6800      	ldr	r0, [r0, #0]
   b4882:	b108      	cbz	r0, b4888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4884:	f7ff ffe6 	bl	b4854 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4888:	4620      	mov	r0, r4
   b488a:	bd10      	pop	{r4, pc}

000b488c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b488c:	b513      	push	{r0, r1, r4, lr}
   b488e:	460b      	mov	r3, r1
   b4890:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4892:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4896:	466c      	mov	r4, sp
   b4898:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b489c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b48a0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b48a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b48a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b48ac:	b002      	add	sp, #8
   b48ae:	bd10      	pop	{r4, pc}

000b48b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b48b0:	4802      	ldr	r0, [pc, #8]	; (b48bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b48b2:	2300      	movs	r3, #0
   b48b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b48b6:	f7ff bd99 	b.w	b43ec <os_mutex_recursive_create>
   b48ba:	bf00      	nop
   b48bc:	2003e6b8 	.word	0x2003e6b8

000b48c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b48c0:	4770      	bx	lr

000b48c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b48c2:	2000      	movs	r0, #0
   b48c4:	4770      	bx	lr

000b48c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b48c6:	b510      	push	{r4, lr}
   b48c8:	2110      	movs	r1, #16
   b48ca:	4604      	mov	r4, r0
   b48cc:	f7ff fbe5 	bl	b409a <_ZdlPvj>
   b48d0:	4620      	mov	r0, r4
   b48d2:	bd10      	pop	{r4, pc}

000b48d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b48d4:	b508      	push	{r3, lr}
      { delete this; }
   b48d6:	f7ff fff6 	bl	b48c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b48da:	bd08      	pop	{r3, pc}

000b48dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b48dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b48de:	2200      	movs	r2, #0
   b48e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b48e4:	6002      	str	r2, [r0, #0]
   b48e6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b48e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b48ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b48ec:	680c      	ldr	r4, [r1, #0]
   b48ee:	8085      	strh	r5, [r0, #4]
   b48f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b48f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b48f4:	bd30      	pop	{r4, r5, pc}

000b48f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b48f6:	b510      	push	{r4, lr}
   b48f8:	4604      	mov	r4, r0
    free((void*)msg_);
   b48fa:	6800      	ldr	r0, [r0, #0]
   b48fc:	f7ff ff5a 	bl	b47b4 <free>
}
   b4900:	4620      	mov	r0, r4
   b4902:	bd10      	pop	{r4, pc}

000b4904 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4904:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4906:	68c4      	ldr	r4, [r0, #12]
   b4908:	b1f4      	cbz	r4, b4948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b490a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b490c:	2b02      	cmp	r3, #2
   b490e:	d103      	bne.n	b4918 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4910:	f104 000c 	add.w	r0, r4, #12
   b4914:	f7ff ffef 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4918:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b491a:	b135      	cbz	r5, b492a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b491c:	4628      	mov	r0, r5
   b491e:	f7ff ff90 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
   b4922:	2110      	movs	r1, #16
   b4924:	4628      	mov	r0, r5
   b4926:	f7ff fbb8 	bl	b409a <_ZdlPvj>
   b492a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b492c:	b135      	cbz	r5, b493c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b492e:	4628      	mov	r0, r5
   b4930:	f7ff ff87 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
   b4934:	2110      	movs	r1, #16
   b4936:	4628      	mov	r0, r5
   b4938:	f7ff fbaf 	bl	b409a <_ZdlPvj>
   b493c:	4620      	mov	r0, r4
   b493e:	2114      	movs	r1, #20
   b4940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4944:	f7ff bba9 	b.w	b409a <_ZdlPvj>
   b4948:	bd38      	pop	{r3, r4, r5, pc}

000b494a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b494a:	680b      	ldr	r3, [r1, #0]
   b494c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b494e:	684b      	ldr	r3, [r1, #4]
   b4950:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4952:	b113      	cbz	r3, b495a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4954:	685a      	ldr	r2, [r3, #4]
   b4956:	3201      	adds	r2, #1
   b4958:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b495a:	4770      	bx	lr

000b495c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b495e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4960:	4668      	mov	r0, sp
   b4962:	460d      	mov	r5, r1
   b4964:	f7ff fff1 	bl	b494a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4968:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b496a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b496c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b496e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4970:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4972:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4974:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4976:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4978:	f7ff ff80 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b497c:	b135      	cbz	r5, b498c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b497e:	1d28      	adds	r0, r5, #4
   b4980:	f7ff ff7c 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4984:	2108      	movs	r1, #8
   b4986:	4628      	mov	r0, r5
   b4988:	f7ff fb87 	bl	b409a <_ZdlPvj>
        return p;
    }
   b498c:	4620      	mov	r0, r4
   b498e:	b003      	add	sp, #12
   b4990:	bd30      	pop	{r4, r5, pc}

000b4992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4992:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4994:	b510      	push	{r4, lr}
      if (_M_empty())
   b4996:	b90a      	cbnz	r2, b499c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4998:	f000 ff7e 	bl	b5898 <_ZSt25__throw_bad_function_callv>
    }
   b499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b49a0:	68c3      	ldr	r3, [r0, #12]
   b49a2:	4718      	bx	r3

000b49a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b49a4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b49a6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b49a8:	f100 0110 	add.w	r1, r0, #16
   b49ac:	f7ff fff1 	bl	b4992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b49b0:	bd08      	pop	{r3, pc}

000b49b2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b49b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b49b4:	b510      	push	{r4, lr}
      if (_M_empty())
   b49b6:	b90a      	cbnz	r2, b49bc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b49b8:	f000 ff6e 	bl	b5898 <_ZSt25__throw_bad_function_callv>
    }
   b49bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b49c0:	68c3      	ldr	r3, [r0, #12]
   b49c2:	4718      	bx	r3

000b49c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b49c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b49c6:	6800      	ldr	r0, [r0, #0]
   b49c8:	f100 0110 	add.w	r1, r0, #16
   b49cc:	f7ff fff1 	bl	b49b2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b49d0:	bd08      	pop	{r3, pc}
	...

000b49d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b49d4:	b538      	push	{r3, r4, r5, lr}
   b49d6:	2300      	movs	r3, #0
   b49d8:	4604      	mov	r4, r0
   b49da:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b49dc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b49de:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b49e0:	f7ff fb57 	bl	b4092 <_Znwj>
   b49e4:	b128      	cbz	r0, b49f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b49e6:	2301      	movs	r3, #1
   b49e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b49ec:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b49ee:	6003      	str	r3, [r0, #0]
   b49f0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b49f2:	6020      	str	r0, [r4, #0]
	}
   b49f4:	4620      	mov	r0, r4
   b49f6:	bd38      	pop	{r3, r4, r5, pc}
   b49f8:	000b5ac4 	.word	0x000b5ac4

000b49fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b49fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b49fe:	2300      	movs	r3, #0
   b4a00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a04:	4604      	mov	r4, r0
   b4a06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a08:	b12b      	cbz	r3, b4a16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a0a:	2202      	movs	r2, #2
   b4a0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a0e:	68eb      	ldr	r3, [r5, #12]
   b4a10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a12:	68ab      	ldr	r3, [r5, #8]
   b4a14:	60a3      	str	r3, [r4, #8]
    }
   b4a16:	4620      	mov	r0, r4
   b4a18:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a1e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4a20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4a22:	4668      	mov	r0, sp
   b4a24:	f7ff ff5a 	bl	b48dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4a28:	f04f 0302 	mov.w	r3, #2
   b4a2c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4a30:	2a00      	cmp	r2, #0
   b4a32:	d103      	bne.n	b4a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4a34:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4a38:	2900      	cmp	r1, #0
   b4a3a:	d1f7      	bne.n	b4a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4a3c:	d125      	bne.n	b4a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4a3e:	f104 050c 	add.w	r5, r4, #12
   b4a42:	4669      	mov	r1, sp
   b4a44:	4628      	mov	r0, r5
   b4a46:	f7ff ff49 	bl	b48dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4a4a:	f3bf 8f5b 	dmb	ish
   b4a4e:	2301      	movs	r3, #1
   b4a50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4a52:	2000      	movs	r0, #0
   b4a54:	f104 0308 	add.w	r3, r4, #8
   b4a58:	f3bf 8f5b 	dmb	ish
   b4a5c:	e853 6f00 	ldrex	r6, [r3]
   b4a60:	e843 0200 	strex	r2, r0, [r3]
   b4a64:	2a00      	cmp	r2, #0
   b4a66:	d1f9      	bne.n	b4a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4a68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4a6c:	b16e      	cbz	r6, b4a8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4a6e:	f7ff fdfd 	bl	b466c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4a72:	b178      	cbz	r0, b4a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4a74:	4629      	mov	r1, r5
   b4a76:	4630      	mov	r0, r6
   b4a78:	f7ff ff8b 	bl	b4992 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4a7c:	4630      	mov	r0, r6
   b4a7e:	f7ff fee0 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4a82:	2110      	movs	r1, #16
   b4a84:	4630      	mov	r0, r6
   b4a86:	f7ff fb08 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4a8a:	4668      	mov	r0, sp
   b4a8c:	f7ff ff33 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
    }
   b4a90:	b009      	add	sp, #36	; 0x24
   b4a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4a94:	4631      	mov	r1, r6
   b4a96:	a802      	add	r0, sp, #8
   b4a98:	f7ff ffb0 	bl	b49fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4a9c:	68e0      	ldr	r0, [r4, #12]
   b4a9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4aa2:	b108      	cbz	r0, b4aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4aa4:	f000 ff5e 	bl	b5964 <strdup>
        type_(type) {
   b4aa8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4aaa:	2010      	movs	r0, #16
   b4aac:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4ab0:	f7ff faef 	bl	b4092 <_Znwj>
   b4ab4:	4605      	mov	r5, r0
   b4ab6:	b1e8      	cbz	r0, b4af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4ab8:	2700      	movs	r7, #0
   b4aba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4abc:	2018      	movs	r0, #24
   b4abe:	f7ff fae8 	bl	b4092 <_Znwj>
   b4ac2:	4604      	mov	r4, r0
   b4ac4:	b188      	cbz	r0, b4aea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4ac6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4ac8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4aca:	a802      	add	r0, sp, #8
   b4acc:	f7ff fede 	bl	b488c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ad0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4ad2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ad4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ad6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4ad8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4ada:	a906      	add	r1, sp, #24
   b4adc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ade:	60e3      	str	r3, [r4, #12]
   b4ae0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4ae4:	9205      	str	r2, [sp, #20]
   b4ae6:	f7ff fef9 	bl	b48dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4aea:	4b08      	ldr	r3, [pc, #32]	; (b4b0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4aec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4aee:	4b08      	ldr	r3, [pc, #32]	; (b4b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4af0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4af2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4af4:	a806      	add	r0, sp, #24
   b4af6:	f7ff fefe 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4afa:	a802      	add	r0, sp, #8
   b4afc:	f7ff fea1 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4b00:	2200      	movs	r2, #0
   b4b02:	4629      	mov	r1, r5
   b4b04:	4803      	ldr	r0, [pc, #12]	; (b4b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4b06:	f7ff fdb9 	bl	b467c <application_thread_invoke>
   b4b0a:	e7b7      	b.n	b4a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4b0c:	000b49a5 	.word	0x000b49a5
   b4b10:	000b4c29 	.word	0x000b4c29
   b4b14:	000b481b 	.word	0x000b481b

000b4b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b1c:	b08b      	sub	sp, #44	; 0x2c
   b4b1e:	4605      	mov	r5, r0
   b4b20:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4b24:	460f      	mov	r7, r1
   b4b26:	4690      	mov	r8, r2
   b4b28:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b2a:	f7ff fdc3 	bl	b46b4 <spark_cloud_flag_connected>
   b4b2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4b30:	4683      	mov	fp, r0
   b4b32:	bb38      	cbnz	r0, b4b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4b34:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4b38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4b3a:	a905      	add	r1, sp, #20
   b4b3c:	4630      	mov	r0, r6
   b4b3e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4b42:	f7ff fecb 	bl	b48dc <_ZN8particle5ErrorC1EOS0_>
   b4b46:	2014      	movs	r0, #20
   b4b48:	f7ff faa3 	bl	b4092 <_Znwj>
   b4b4c:	4604      	mov	r4, r0
   b4b4e:	b148      	cbz	r0, b4b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4b50:	2302      	movs	r3, #2
   b4b52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4b54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4b56:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4b5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4b5c:	4631      	mov	r1, r6
   b4b5e:	300c      	adds	r0, #12
   b4b60:	f7ff febc 	bl	b48dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4b64:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4b66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4b68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4b6c:	f7ff ff32 	bl	b49d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4b70:	4630      	mov	r0, r6
   b4b72:	f7ff fec0 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4b76:	a805      	add	r0, sp, #20
   b4b78:	f7ff febd 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4b7c:	4628      	mov	r0, r5
   b4b7e:	b00b      	add	sp, #44	; 0x2c
   b4b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4b84:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4b86:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4b88:	2014      	movs	r0, #20
   b4b8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4b8e:	9307      	str	r3, [sp, #28]
   b4b90:	f7ff fa7f 	bl	b4092 <_Znwj>
   b4b94:	4601      	mov	r1, r0
   b4b96:	b118      	cbz	r0, b4ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4b9c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4b9e:	7044      	strb	r4, [r0, #1]
   b4ba0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4ba2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4ba4:	f7ff ff16 	bl	b49d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4ba8:	4b1e      	ldr	r3, [pc, #120]	; (b4c24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4baa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4bac:	2008      	movs	r0, #8
   b4bae:	f7ff fa70 	bl	b4092 <_Znwj>
   b4bb2:	4604      	mov	r4, r0
   b4bb4:	b110      	cbz	r0, b4bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4bb6:	a903      	add	r1, sp, #12
   b4bb8:	f7ff fec7 	bl	b494a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4bbc:	9600      	str	r6, [sp, #0]
   b4bbe:	fa5f f38a 	uxtb.w	r3, sl
   b4bc2:	464a      	mov	r2, r9
   b4bc4:	4641      	mov	r1, r8
   b4bc6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4bc8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4bca:	f7ff fd7b 	bl	b46c4 <spark_send_event>
   b4bce:	b9b8      	cbnz	r0, b4c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4bd0:	9b03      	ldr	r3, [sp, #12]
   b4bd2:	785b      	ldrb	r3, [r3, #1]
   b4bd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4bd8:	b993      	cbnz	r3, b4c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4bda:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4bde:	a905      	add	r1, sp, #20
   b4be0:	a803      	add	r0, sp, #12
   b4be2:	9205      	str	r2, [sp, #20]
   b4be4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4be8:	f7ff ff18 	bl	b4a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4bec:	a805      	add	r0, sp, #20
   b4bee:	f7ff fe82 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4bf2:	a805      	add	r0, sp, #20
   b4bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4bf6:	f7ff feb1 	bl	b495c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4bfa:	a806      	add	r0, sp, #24
   b4bfc:	f7ff fe3e 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c00:	a903      	add	r1, sp, #12
   b4c02:	a805      	add	r0, sp, #20
   b4c04:	f7ff fea1 	bl	b494a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c08:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4c0a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c0c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4c0e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4c10:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4c12:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4c14:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4c16:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4c18:	f7ff fe30 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c1c:	a804      	add	r0, sp, #16
   b4c1e:	f7ff fe2d 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4c22:	e7ab      	b.n	b4b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4c24:	000b4ca5 	.word	0x000b4ca5

000b4c28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4c28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c2c:	4605      	mov	r5, r0
	switch (__op)
   b4c2e:	d103      	bne.n	b4c38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4c30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4c32:	6003      	str	r3, [r0, #0]
      }
   b4c34:	2000      	movs	r0, #0
   b4c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4c38:	2a02      	cmp	r2, #2
   b4c3a:	d010      	beq.n	b4c5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4c3c:	2a03      	cmp	r2, #3
   b4c3e:	d1f9      	bne.n	b4c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4c40:	6804      	ldr	r4, [r0, #0]
   b4c42:	2c00      	cmp	r4, #0
   b4c44:	d0f6      	beq.n	b4c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4c46:	f104 0010 	add.w	r0, r4, #16
   b4c4a:	f7ff fe54 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4c4e:	4620      	mov	r0, r4
   b4c50:	f7ff fdf7 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4c54:	2118      	movs	r1, #24
   b4c56:	4620      	mov	r0, r4
   b4c58:	f7ff fa1f 	bl	b409a <_ZdlPvj>
   b4c5c:	e7ea      	b.n	b4c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c5e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4c60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c62:	f7ff fa16 	bl	b4092 <_Znwj>
   b4c66:	4604      	mov	r4, r0
   b4c68:	b150      	cbz	r0, b4c80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4c6a:	4631      	mov	r1, r6
   b4c6c:	f7ff fec6 	bl	b49fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4c70:	6930      	ldr	r0, [r6, #16]
   b4c72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4c76:	b108      	cbz	r0, b4c7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4c78:	f000 fe74 	bl	b5964 <strdup>
        type_(type) {
   b4c7c:	6120      	str	r0, [r4, #16]
   b4c7e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4c80:	602c      	str	r4, [r5, #0]
	}
   b4c82:	e7d7      	b.n	b4c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4c84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4c86:	2300      	movs	r3, #0
   b4c88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4c8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4c8c:	4604      	mov	r4, r0
   b4c8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4c90:	b12b      	cbz	r3, b4c9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4c92:	2202      	movs	r2, #2
   b4c94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4c96:	68eb      	ldr	r3, [r5, #12]
   b4c98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4c9a:	68ab      	ldr	r3, [r5, #8]
   b4c9c:	60a3      	str	r3, [r4, #8]
    }
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ca6:	b089      	sub	sp, #36	; 0x24
   b4ca8:	4604      	mov	r4, r0
   b4caa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4cac:	a801      	add	r0, sp, #4
   b4cae:	4611      	mov	r1, r2
   b4cb0:	f7ff fe54 	bl	b495c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4cb4:	b1a4      	cbz	r4, b4ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4cb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4cb8:	b11d      	cbz	r5, b4cc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4cba:	4628      	mov	r0, r5
   b4cbc:	f000 fe52 	bl	b5964 <strdup>
   b4cc0:	4605      	mov	r5, r0
   b4cc2:	a801      	add	r0, sp, #4
   b4cc4:	a903      	add	r1, sp, #12
        type_(type) {
   b4cc6:	9503      	str	r5, [sp, #12]
   b4cc8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4ccc:	f7ff fea6 	bl	b4a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4cd0:	a803      	add	r0, sp, #12
   b4cd2:	f7ff fe10 	bl	b48f6 <_ZN8particle5ErrorD1Ev>
   b4cd6:	a802      	add	r0, sp, #8
   b4cd8:	f7ff fdd0 	bl	b487c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4cdc:	b009      	add	sp, #36	; 0x24
   b4cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4ce0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4ce2:	2301      	movs	r3, #1
   b4ce4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4ce8:	2a00      	cmp	r2, #0
   b4cea:	d103      	bne.n	b4cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4cec:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4cf0:	2900      	cmp	r1, #0
   b4cf2:	d1f7      	bne.n	b4ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4cf4:	d1ef      	bne.n	b4cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4cf6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4cf8:	f3bf 8f5b 	dmb	ish
   b4cfc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4cfe:	1d2b      	adds	r3, r5, #4
   b4d00:	f3bf 8f5b 	dmb	ish
   b4d04:	e853 6f00 	ldrex	r6, [r3]
   b4d08:	e843 4200 	strex	r2, r4, [r3]
   b4d0c:	2a00      	cmp	r2, #0
   b4d0e:	d1f9      	bne.n	b4d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4d10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4d14:	2e00      	cmp	r6, #0
   b4d16:	d0de      	beq.n	b4cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4d18:	4620      	mov	r0, r4
   b4d1a:	f7ff fca7 	bl	b466c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4d1e:	4607      	mov	r7, r0
   b4d20:	b160      	cbz	r0, b4d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4d22:	f105 010c 	add.w	r1, r5, #12
   b4d26:	4630      	mov	r0, r6
   b4d28:	f7ff fe43 	bl	b49b2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4d2c:	4630      	mov	r0, r6
   b4d2e:	f7ff fd88 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4d32:	2110      	movs	r1, #16
   b4d34:	4630      	mov	r0, r6
   b4d36:	f7ff f9b0 	bl	b409a <_ZdlPvj>
   b4d3a:	e7cc      	b.n	b4cd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4d3c:	4631      	mov	r1, r6
   b4d3e:	a803      	add	r0, sp, #12
   b4d40:	f7ff ffa0 	bl	b4c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d44:	7b2b      	ldrb	r3, [r5, #12]
   b4d46:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4d4a:	2010      	movs	r0, #16
   b4d4c:	f7ff f9a1 	bl	b4092 <_Znwj>
   b4d50:	4605      	mov	r5, r0
   b4d52:	b1d0      	cbz	r0, b4d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4d54:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d56:	2014      	movs	r0, #20
   b4d58:	f7ff f99b 	bl	b4092 <_Znwj>
   b4d5c:	4604      	mov	r4, r0
   b4d5e:	b178      	cbz	r0, b4d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4d60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4d62:	4601      	mov	r1, r0
   b4d64:	a803      	add	r0, sp, #12
   b4d66:	f7ff fd91 	bl	b488c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4d6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d6e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d70:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4d72:	9205      	str	r2, [sp, #20]
   b4d74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d76:	60e3      	str	r3, [r4, #12]
   b4d78:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4d7c:	9206      	str	r2, [sp, #24]
   b4d7e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4d80:	4b06      	ldr	r3, [pc, #24]	; (b4d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4d82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4d84:	4b06      	ldr	r3, [pc, #24]	; (b4da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d86:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4d88:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4d8a:	a803      	add	r0, sp, #12
   b4d8c:	f7ff fd59 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4d90:	2200      	movs	r2, #0
   b4d92:	4629      	mov	r1, r5
   b4d94:	4803      	ldr	r0, [pc, #12]	; (b4da4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4d96:	f7ff fc71 	bl	b467c <application_thread_invoke>
   b4d9a:	e7c7      	b.n	b4d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4d9c:	000b49c5 	.word	0x000b49c5
   b4da0:	000b4da9 	.word	0x000b4da9
   b4da4:	000b481b 	.word	0x000b481b

000b4da8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4da8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4daa:	b570      	push	{r4, r5, r6, lr}
   b4dac:	4604      	mov	r4, r0
	switch (__op)
   b4dae:	d103      	bne.n	b4db8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4db0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4db2:	6003      	str	r3, [r0, #0]
      }
   b4db4:	2000      	movs	r0, #0
   b4db6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4db8:	2a02      	cmp	r2, #2
   b4dba:	d00c      	beq.n	b4dd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4dbc:	2a03      	cmp	r2, #3
   b4dbe:	d1f9      	bne.n	b4db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4dc0:	6804      	ldr	r4, [r0, #0]
   b4dc2:	2c00      	cmp	r4, #0
   b4dc4:	d0f6      	beq.n	b4db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4dc6:	4620      	mov	r0, r4
   b4dc8:	f7ff fd3b 	bl	b4842 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4dcc:	2114      	movs	r1, #20
   b4dce:	4620      	mov	r0, r4
   b4dd0:	f7ff f963 	bl	b409a <_ZdlPvj>
   b4dd4:	e7ee      	b.n	b4db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dd6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4dd8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dda:	f7ff f95a 	bl	b4092 <_Znwj>
   b4dde:	4605      	mov	r5, r0
   b4de0:	b120      	cbz	r0, b4dec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b4de2:	4631      	mov	r1, r6
   b4de4:	f7ff ff4e 	bl	b4c84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4de8:	7c33      	ldrb	r3, [r6, #16]
   b4dea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4dec:	6025      	str	r5, [r4, #0]
	}
   b4dee:	e7e1      	b.n	b4db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b4df0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4df0:	2200      	movs	r2, #0
   b4df2:	6840      	ldr	r0, [r0, #4]
   b4df4:	4611      	mov	r1, r2
   b4df6:	f7ff bcad 	b.w	b4754 <network_listening>

000b4dfa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4dfa:	2200      	movs	r2, #0
   b4dfc:	6840      	ldr	r0, [r0, #4]
   b4dfe:	4611      	mov	r1, r2
   b4e00:	f7ff bcb8 	b.w	b4774 <network_get_listen_timeout>

000b4e04 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e04:	6840      	ldr	r0, [r0, #4]
   b4e06:	2200      	movs	r2, #0
   b4e08:	f7ff bcac 	b.w	b4764 <network_set_listen_timeout>

000b4e0c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e0c:	6840      	ldr	r0, [r0, #4]
   b4e0e:	2200      	movs	r2, #0
   b4e10:	f081 0101 	eor.w	r1, r1, #1
   b4e14:	f7ff bc96 	b.w	b4744 <network_listen>

000b4e18 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e18:	2300      	movs	r3, #0
   b4e1a:	6840      	ldr	r0, [r0, #4]
   b4e1c:	461a      	mov	r2, r3
   b4e1e:	4619      	mov	r1, r3
   b4e20:	f7ff bc88 	b.w	b4734 <network_off>

000b4e24 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e24:	2300      	movs	r3, #0
   b4e26:	6840      	ldr	r0, [r0, #4]
   b4e28:	461a      	mov	r2, r3
   b4e2a:	4619      	mov	r1, r3
   b4e2c:	f7ff bc7a 	b.w	b4724 <network_on>

000b4e30 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e30:	2200      	movs	r2, #0
   b4e32:	6840      	ldr	r0, [r0, #4]
   b4e34:	4611      	mov	r1, r2
   b4e36:	f7ff bc6d 	b.w	b4714 <network_ready>

000b4e3a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e3a:	2200      	movs	r2, #0
   b4e3c:	6840      	ldr	r0, [r0, #4]
   b4e3e:	4611      	mov	r1, r2
   b4e40:	f7ff bc58 	b.w	b46f4 <network_connecting>

000b4e44 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e44:	6840      	ldr	r0, [r0, #4]
   b4e46:	2200      	movs	r2, #0
   b4e48:	2102      	movs	r1, #2
   b4e4a:	f7ff bc5b 	b.w	b4704 <network_disconnect>

000b4e4e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e4e:	2300      	movs	r3, #0
   b4e50:	6840      	ldr	r0, [r0, #4]
   b4e52:	461a      	mov	r2, r3
   b4e54:	f7ff bc46 	b.w	b46e4 <network_connect>

000b4e58 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e58:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e5a:	2203      	movs	r2, #3
   b4e5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e5e:	4a02      	ldr	r2, [pc, #8]	; (b4e68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e60:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e62:	4770      	bx	lr
   b4e64:	2003e6bc 	.word	0x2003e6bc
   b4e68:	000b5ae0 	.word	0x000b5ae0

000b4e6c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4e6c:	4770      	bx	lr

000b4e6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e70:	4606      	mov	r6, r0
   b4e72:	4615      	mov	r5, r2
   b4e74:	460c      	mov	r4, r1
   b4e76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4e78:	42bc      	cmp	r4, r7
   b4e7a:	d006      	beq.n	b4e8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4e7c:	6833      	ldr	r3, [r6, #0]
   b4e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4e82:	689b      	ldr	r3, [r3, #8]
   b4e84:	4630      	mov	r0, r6
   b4e86:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4e88:	e7f6      	b.n	b4e78 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4e8a:	4628      	mov	r0, r5
   b4e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e8e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4e8e:	7c00      	ldrb	r0, [r0, #16]
   b4e90:	2200      	movs	r2, #0
   b4e92:	f7ff baf3 	b.w	b447c <hal_i2c_write>

000b4e96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e96:	7c00      	ldrb	r0, [r0, #16]
   b4e98:	2100      	movs	r1, #0
   b4e9a:	f7ff baf7 	b.w	b448c <hal_i2c_available>

000b4e9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4e9e:	7c00      	ldrb	r0, [r0, #16]
   b4ea0:	2100      	movs	r1, #0
   b4ea2:	f7ff bafb 	b.w	b449c <hal_i2c_read>

000b4ea6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4ea6:	7c00      	ldrb	r0, [r0, #16]
   b4ea8:	2100      	movs	r1, #0
   b4eaa:	f7ff baff 	b.w	b44ac <hal_i2c_peek>

000b4eae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4eae:	7c00      	ldrb	r0, [r0, #16]
   b4eb0:	2100      	movs	r1, #0
   b4eb2:	f7ff bb03 	b.w	b44bc <hal_i2c_flush>

000b4eb6 <_ZN7TwoWireD0Ev>:
   b4eb6:	b510      	push	{r4, lr}
   b4eb8:	2114      	movs	r1, #20
   b4eba:	4604      	mov	r4, r0
   b4ebc:	f7ff f8ed 	bl	b409a <_ZdlPvj>
   b4ec0:	4620      	mov	r0, r4
   b4ec2:	bd10      	pop	{r4, pc}

000b4ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ec4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4eca:	4604      	mov	r4, r0
   b4ecc:	4608      	mov	r0, r1
   b4ece:	2100      	movs	r1, #0
   b4ed0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4ed4:	4b03      	ldr	r3, [pc, #12]	; (b4ee4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4ed6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4ed8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4eda:	4611      	mov	r1, r2
   b4edc:	f7ff fafe 	bl	b44dc <hal_i2c_init>
}
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	bd10      	pop	{r4, pc}
   b4ee4:	000b5b1c 	.word	0x000b5b1c

000b4ee8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4ee8:	4770      	bx	lr

000b4eea <_ZN9IPAddressD0Ev>:
   b4eea:	b510      	push	{r4, lr}
   b4eec:	2118      	movs	r1, #24
   b4eee:	4604      	mov	r4, r0
   b4ef0:	f7ff f8d3 	bl	b409a <_ZdlPvj>
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	bd10      	pop	{r4, pc}

000b4ef8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4efa:	7d03      	ldrb	r3, [r0, #20]
   b4efc:	2b06      	cmp	r3, #6
{
   b4efe:	b08d      	sub	sp, #52	; 0x34
   b4f00:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f02:	f100 0704 	add.w	r7, r0, #4
   b4f06:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f0a:	d012      	beq.n	b4f32 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f0c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f14:	220a      	movs	r2, #10
   b4f16:	4630      	mov	r0, r6
   b4f18:	f000 f959 	bl	b51ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4f1c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4f1e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4f20:	d019      	beq.n	b4f56 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4f22:	2c00      	cmp	r4, #0
   b4f24:	d0f4      	beq.n	b4f10 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4f26:	212e      	movs	r1, #46	; 0x2e
   b4f28:	4630      	mov	r0, r6
   b4f2a:	f000 f937 	bl	b519c <_ZN5Print5printEc>
   b4f2e:	4404      	add	r4, r0
   b4f30:	e7ee      	b.n	b4f10 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f32:	232f      	movs	r3, #47	; 0x2f
   b4f34:	466a      	mov	r2, sp
   b4f36:	4639      	mov	r1, r7
   b4f38:	200a      	movs	r0, #10
		buf[0] = 0;
   b4f3a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f3e:	f7ff fad5 	bl	b44ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4f42:	4668      	mov	r0, sp
   b4f44:	f000 fd2b 	bl	b599e <strlen>
   b4f48:	6833      	ldr	r3, [r6, #0]
   b4f4a:	4602      	mov	r2, r0
   b4f4c:	68db      	ldr	r3, [r3, #12]
   b4f4e:	4669      	mov	r1, sp
   b4f50:	4630      	mov	r0, r6
   b4f52:	4798      	blx	r3
   b4f54:	4604      	mov	r4, r0
    }
    return n;
}
   b4f56:	4620      	mov	r0, r4
   b4f58:	b00d      	add	sp, #52	; 0x34
   b4f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4f5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4f5c:	b510      	push	{r4, lr}
   b4f5e:	4b05      	ldr	r3, [pc, #20]	; (b4f74 <_ZN9IPAddressC1Ev+0x18>)
   b4f60:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f62:	2211      	movs	r2, #17
   b4f64:	f840 3b04 	str.w	r3, [r0], #4
   b4f68:	2100      	movs	r1, #0
   b4f6a:	f000 fcb5 	bl	b58d8 <memset>
}
   b4f6e:	4620      	mov	r0, r4
   b4f70:	bd10      	pop	{r4, pc}
   b4f72:	bf00      	nop
   b4f74:	000b5b44 	.word	0x000b5b44

000b4f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f78:	4603      	mov	r3, r0
   b4f7a:	4a07      	ldr	r2, [pc, #28]	; (b4f98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f7c:	b510      	push	{r4, lr}
   b4f7e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f82:	f101 0210 	add.w	r2, r1, #16
   b4f86:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f8a:	f843 4b04 	str.w	r4, [r3], #4
   b4f8e:	4291      	cmp	r1, r2
   b4f90:	d1f9      	bne.n	b4f86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f92:	780a      	ldrb	r2, [r1, #0]
   b4f94:	701a      	strb	r2, [r3, #0]
}
   b4f96:	bd10      	pop	{r4, pc}
   b4f98:	000b5b44 	.word	0x000b5b44

000b4f9c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4fa2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4fa6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4faa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4fae:	2304      	movs	r3, #4
   b4fb0:	6041      	str	r1, [r0, #4]
   b4fb2:	7503      	strb	r3, [r0, #20]
}
   b4fb4:	bd10      	pop	{r4, pc}
	...

000b4fb8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4fb8:	b507      	push	{r0, r1, r2, lr}
   b4fba:	4b06      	ldr	r3, [pc, #24]	; (b4fd4 <_ZN9IPAddressC1EPKh+0x1c>)
   b4fbc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4fbe:	78cb      	ldrb	r3, [r1, #3]
   b4fc0:	9300      	str	r3, [sp, #0]
   b4fc2:	788b      	ldrb	r3, [r1, #2]
   b4fc4:	784a      	ldrb	r2, [r1, #1]
   b4fc6:	7809      	ldrb	r1, [r1, #0]
   b4fc8:	f7ff ffe8 	bl	b4f9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4fcc:	b003      	add	sp, #12
   b4fce:	f85d fb04 	ldr.w	pc, [sp], #4
   b4fd2:	bf00      	nop
   b4fd4:	000b5b44 	.word	0x000b5b44

000b4fd8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4fd8:	4b01      	ldr	r3, [pc, #4]	; (b4fe0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4fda:	4a02      	ldr	r2, [pc, #8]	; (b4fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4fdc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4fde:	4770      	bx	lr
   b4fe0:	2003e6c4 	.word	0x2003e6c4
   b4fe4:	000b5b50 	.word	0x000b5b50

000b4fe8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4fe8:	2300      	movs	r3, #0
   b4fea:	6840      	ldr	r0, [r0, #4]
   b4fec:	461a      	mov	r2, r3
   b4fee:	f7ff bb79 	b.w	b46e4 <network_connect>

000b4ff2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4ff2:	6840      	ldr	r0, [r0, #4]
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	2102      	movs	r1, #2
   b4ff8:	f7ff bb84 	b.w	b4704 <network_disconnect>

000b4ffc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4ffc:	2200      	movs	r2, #0
   b4ffe:	6840      	ldr	r0, [r0, #4]
   b5000:	4611      	mov	r1, r2
   b5002:	f7ff bb77 	b.w	b46f4 <network_connecting>

000b5006 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5006:	2200      	movs	r2, #0
   b5008:	6840      	ldr	r0, [r0, #4]
   b500a:	4611      	mov	r1, r2
   b500c:	f7ff bb82 	b.w	b4714 <network_ready>

000b5010 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5010:	2300      	movs	r3, #0
   b5012:	6840      	ldr	r0, [r0, #4]
   b5014:	461a      	mov	r2, r3
   b5016:	4619      	mov	r1, r3
   b5018:	f7ff bb84 	b.w	b4724 <network_on>

000b501c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b501c:	2300      	movs	r3, #0
   b501e:	6840      	ldr	r0, [r0, #4]
   b5020:	461a      	mov	r2, r3
   b5022:	4619      	mov	r1, r3
   b5024:	f7ff bb86 	b.w	b4734 <network_off>

000b5028 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5028:	6840      	ldr	r0, [r0, #4]
   b502a:	2100      	movs	r1, #0
   b502c:	f7ff bbaa 	b.w	b4784 <network_is_on>

000b5030 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5030:	6840      	ldr	r0, [r0, #4]
   b5032:	2100      	movs	r1, #0
   b5034:	f7ff bbae 	b.w	b4794 <network_is_off>

000b5038 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5038:	6840      	ldr	r0, [r0, #4]
   b503a:	2200      	movs	r2, #0
   b503c:	f081 0101 	eor.w	r1, r1, #1
   b5040:	f7ff bb80 	b.w	b4744 <network_listen>

000b5044 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5044:	6840      	ldr	r0, [r0, #4]
   b5046:	2200      	movs	r2, #0
   b5048:	f7ff bb8c 	b.w	b4764 <network_set_listen_timeout>

000b504c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b504c:	2200      	movs	r2, #0
   b504e:	6840      	ldr	r0, [r0, #4]
   b5050:	4611      	mov	r1, r2
   b5052:	f7ff bb8f 	b.w	b4774 <network_get_listen_timeout>

000b5056 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5056:	2200      	movs	r2, #0
   b5058:	6840      	ldr	r0, [r0, #4]
   b505a:	4611      	mov	r1, r2
   b505c:	f7ff bb7a 	b.w	b4754 <network_listening>

000b5060 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5064:	b095      	sub	sp, #84	; 0x54
   b5066:	4614      	mov	r4, r2
   b5068:	460d      	mov	r5, r1
   b506a:	4607      	mov	r7, r0
    IPAddress addr;
   b506c:	f7ff ff76 	bl	b4f5c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5070:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5072:	221c      	movs	r2, #28
   b5074:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5076:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5078:	f000 fc2e 	bl	b58d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b507c:	2340      	movs	r3, #64	; 0x40
   b507e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5080:	4620      	mov	r0, r4
   b5082:	466b      	mov	r3, sp
   b5084:	aa0c      	add	r2, sp, #48	; 0x30
   b5086:	2100      	movs	r1, #0
   b5088:	f7ff fa40 	bl	b450c <netdb_getaddrinfo>
    if (!r) {
   b508c:	4604      	mov	r4, r0
   b508e:	2800      	cmp	r0, #0
   b5090:	d14b      	bne.n	b512a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5092:	4602      	mov	r2, r0
   b5094:	2101      	movs	r1, #1
   b5096:	6868      	ldr	r0, [r5, #4]
   b5098:	f7ff fb3c 	bl	b4714 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b509c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b509e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50a0:	4622      	mov	r2, r4
   b50a2:	6868      	ldr	r0, [r5, #4]
   b50a4:	f7ff fb36 	bl	b4714 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50aa:	4681      	mov	r9, r0
        bool ok = false;
   b50ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50ae:	2e00      	cmp	r6, #0
   b50b0:	d03b      	beq.n	b512a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b50b2:	2900      	cmp	r1, #0
   b50b4:	d139      	bne.n	b512a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b50b6:	6873      	ldr	r3, [r6, #4]
   b50b8:	2b02      	cmp	r3, #2
   b50ba:	d003      	beq.n	b50c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b50bc:	2b0a      	cmp	r3, #10
   b50be:	d011      	beq.n	b50e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50c0:	69f6      	ldr	r6, [r6, #28]
   b50c2:	e7f4      	b.n	b50ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b50c4:	f1b8 0f00 	cmp.w	r8, #0
   b50c8:	d0fa      	beq.n	b50c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b50ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b50cc:	a806      	add	r0, sp, #24
   b50ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b50d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b50d2:	f7ff ff71 	bl	b4fb8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b50d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50d8:	1d3c      	adds	r4, r7, #4
   b50da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50dc:	682b      	ldr	r3, [r5, #0]
   b50de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b50e2:	e7ed      	b.n	b50c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b50e4:	f1b9 0f00 	cmp.w	r9, #0
   b50e8:	d0ea      	beq.n	b50c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b50ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b50ec:	2210      	movs	r2, #16
   b50ee:	a801      	add	r0, sp, #4
   b50f0:	f000 fbf2 	bl	b58d8 <memset>
                    a.v = 6;
   b50f4:	2306      	movs	r3, #6
   b50f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b50fa:	ad01      	add	r5, sp, #4
   b50fc:	f104 0308 	add.w	r3, r4, #8
   b5100:	3418      	adds	r4, #24
   b5102:	6818      	ldr	r0, [r3, #0]
   b5104:	6859      	ldr	r1, [r3, #4]
   b5106:	462a      	mov	r2, r5
   b5108:	c203      	stmia	r2!, {r0, r1}
   b510a:	3308      	adds	r3, #8
   b510c:	42a3      	cmp	r3, r4
   b510e:	4615      	mov	r5, r2
   b5110:	d1f7      	bne.n	b5102 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5112:	a901      	add	r1, sp, #4
   b5114:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5116:	ad07      	add	r5, sp, #28
   b5118:	f7ff ff2e 	bl	b4f78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b511c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b511e:	1d3c      	adds	r4, r7, #4
   b5120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5122:	682b      	ldr	r3, [r5, #0]
   b5124:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5126:	4649      	mov	r1, r9
   b5128:	e7ca      	b.n	b50c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b512a:	9800      	ldr	r0, [sp, #0]
   b512c:	f7ff f9e6 	bl	b44fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5130:	4638      	mov	r0, r7
   b5132:	b015      	add	sp, #84	; 0x54
   b5134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5138 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5138:	4b02      	ldr	r3, [pc, #8]	; (b5144 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b513a:	4a03      	ldr	r2, [pc, #12]	; (b5148 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b513c:	601a      	str	r2, [r3, #0]
   b513e:	2200      	movs	r2, #0
   b5140:	605a      	str	r2, [r3, #4]

} // spark
   b5142:	4770      	bx	lr
   b5144:	2003e6c8 	.word	0x2003e6c8
   b5148:	000b5b5c 	.word	0x000b5b5c

000b514c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b514e:	4606      	mov	r6, r0
   b5150:	460d      	mov	r5, r1
  size_t n = 0;
   b5152:	188f      	adds	r7, r1, r2
   b5154:	2400      	movs	r4, #0
  while (size--) {
   b5156:	42bd      	cmp	r5, r7
   b5158:	d00c      	beq.n	b5174 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b515a:	6833      	ldr	r3, [r6, #0]
   b515c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5160:	689b      	ldr	r3, [r3, #8]
   b5162:	4630      	mov	r0, r6
   b5164:	4798      	blx	r3
     if (chunk>=0)
   b5166:	1e03      	subs	r3, r0, #0
   b5168:	db01      	blt.n	b516e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b516a:	441c      	add	r4, r3
  while (size--) {
   b516c:	e7f3      	b.n	b5156 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b516e:	2c00      	cmp	r4, #0
   b5170:	bf08      	it	eq
   b5172:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5174:	4620      	mov	r0, r4
   b5176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5178 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5178:	b513      	push	{r0, r1, r4, lr}
   b517a:	4604      	mov	r4, r0
    }
   b517c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b517e:	b159      	cbz	r1, b5198 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5180:	9101      	str	r1, [sp, #4]
   b5182:	f000 fc0c 	bl	b599e <strlen>
   b5186:	6823      	ldr	r3, [r4, #0]
   b5188:	9901      	ldr	r1, [sp, #4]
   b518a:	68db      	ldr	r3, [r3, #12]
   b518c:	4602      	mov	r2, r0
   b518e:	4620      	mov	r0, r4
    }
   b5190:	b002      	add	sp, #8
   b5192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5196:	4718      	bx	r3
    }
   b5198:	b002      	add	sp, #8
   b519a:	bd10      	pop	{r4, pc}

000b519c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b519c:	6803      	ldr	r3, [r0, #0]
   b519e:	689b      	ldr	r3, [r3, #8]
   b51a0:	4718      	bx	r3

000b51a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b51a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b51a4:	210d      	movs	r1, #13
{
   b51a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b51a8:	f7ff fff8 	bl	b519c <_ZN5Print5printEc>
  n += print('\n');
   b51ac:	210a      	movs	r1, #10
  size_t n = print('\r');
   b51ae:	4604      	mov	r4, r0
  n += print('\n');
   b51b0:	4628      	mov	r0, r5
   b51b2:	f7ff fff3 	bl	b519c <_ZN5Print5printEc>
  return n;
}
   b51b6:	4420      	add	r0, r4
   b51b8:	bd38      	pop	{r3, r4, r5, pc}

000b51ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b51ba:	b538      	push	{r3, r4, r5, lr}
   b51bc:	4605      	mov	r5, r0
  return write(str);
   b51be:	f7ff ffdb 	bl	b5178 <_ZN5Print5writeEPKc>
   b51c2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b51c4:	4628      	mov	r0, r5
   b51c6:	f7ff ffec 	bl	b51a2 <_ZN5Print7printlnEv>
  return n;
}
   b51ca:	4420      	add	r0, r4
   b51cc:	bd38      	pop	{r3, r4, r5, pc}

000b51ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51ce:	b530      	push	{r4, r5, lr}
   b51d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51d4:	2a01      	cmp	r2, #1
  *str = '\0';
   b51d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51da:	bf98      	it	ls
   b51dc:	220a      	movls	r2, #10
   b51de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51e0:	460d      	mov	r5, r1
   b51e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51e6:	fb01 5312 	mls	r3, r1, r2, r5
   b51ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51ee:	2b09      	cmp	r3, #9
   b51f0:	bf94      	ite	ls
   b51f2:	3330      	addls	r3, #48	; 0x30
   b51f4:	3337      	addhi	r3, #55	; 0x37
   b51f6:	b2db      	uxtb	r3, r3
  } while(n);
   b51f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51fe:	d9ef      	bls.n	b51e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5200:	4621      	mov	r1, r4
   b5202:	f7ff ffb9 	bl	b5178 <_ZN5Print5writeEPKc>
}
   b5206:	b00b      	add	sp, #44	; 0x2c
   b5208:	bd30      	pop	{r4, r5, pc}
	...

000b520c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b520c:	4b01      	ldr	r3, [pc, #4]	; (b5214 <_GLOBAL__sub_I_RGB+0x8>)
   b520e:	2200      	movs	r2, #0
   b5210:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5212:	4770      	bx	lr
   b5214:	2003e6d0 	.word	0x2003e6d0

000b5218 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5218:	b510      	push	{r4, lr}
   b521a:	4604      	mov	r4, r0
   b521c:	4608      	mov	r0, r1
{
    _spi = spi;
   b521e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5220:	f7ff f98c 	bl	b453c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5224:	2300      	movs	r3, #0
   b5226:	6063      	str	r3, [r4, #4]
}
   b5228:	4620      	mov	r0, r4
   b522a:	bd10      	pop	{r4, pc}

000b522c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b522c:	b510      	push	{r4, lr}
   b522e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5230:	6800      	ldr	r0, [r0, #0]
   b5232:	b108      	cbz	r0, b5238 <_ZN6String10invalidateEv+0xc>
   b5234:	f7ff fabe 	bl	b47b4 <free>
	buffer = NULL;
   b5238:	2300      	movs	r3, #0
	capacity = len = 0;
   b523a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b523e:	6023      	str	r3, [r4, #0]
}
   b5240:	bd10      	pop	{r4, pc}

000b5242 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5242:	b538      	push	{r3, r4, r5, lr}
   b5244:	4604      	mov	r4, r0
   b5246:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5248:	6800      	ldr	r0, [r0, #0]
   b524a:	3101      	adds	r1, #1
   b524c:	f7ff faba 	bl	b47c4 <realloc>
	if (newbuffer) {
   b5250:	b110      	cbz	r0, b5258 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5252:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5256:	2001      	movs	r0, #1
	}
	return 0;
}
   b5258:	bd38      	pop	{r3, r4, r5, pc}

000b525a <_ZN6String7reserveEj>:
{
   b525a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b525c:	6803      	ldr	r3, [r0, #0]
{
   b525e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5260:	b123      	cbz	r3, b526c <_ZN6String7reserveEj+0x12>
   b5262:	6843      	ldr	r3, [r0, #4]
   b5264:	428b      	cmp	r3, r1
   b5266:	d301      	bcc.n	b526c <_ZN6String7reserveEj+0x12>
   b5268:	2001      	movs	r0, #1
}
   b526a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b526c:	4620      	mov	r0, r4
   b526e:	f7ff ffe8 	bl	b5242 <_ZN6String12changeBufferEj>
   b5272:	2800      	cmp	r0, #0
   b5274:	d0f9      	beq.n	b526a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5276:	68a3      	ldr	r3, [r4, #8]
   b5278:	2b00      	cmp	r3, #0
   b527a:	d1f5      	bne.n	b5268 <_ZN6String7reserveEj+0xe>
   b527c:	6822      	ldr	r2, [r4, #0]
   b527e:	7013      	strb	r3, [r2, #0]
   b5280:	e7f2      	b.n	b5268 <_ZN6String7reserveEj+0xe>

000b5282 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5282:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5284:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5286:	4611      	mov	r1, r2
   b5288:	9201      	str	r2, [sp, #4]
{
   b528a:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b528c:	f7ff ffe5 	bl	b525a <_ZN6String7reserveEj>
   b5290:	9a01      	ldr	r2, [sp, #4]
   b5292:	b928      	cbnz	r0, b52a0 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5294:	4620      	mov	r0, r4
   b5296:	f7ff ffc9 	bl	b522c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b529a:	4620      	mov	r0, r4
   b529c:	b003      	add	sp, #12
   b529e:	bd30      	pop	{r4, r5, pc}
	len = length;
   b52a0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b52a2:	4629      	mov	r1, r5
   b52a4:	6820      	ldr	r0, [r4, #0]
   b52a6:	f000 fb09 	bl	b58bc <memcpy>
	buffer[len] = 0;
   b52aa:	6822      	ldr	r2, [r4, #0]
   b52ac:	68a3      	ldr	r3, [r4, #8]
   b52ae:	2100      	movs	r1, #0
   b52b0:	54d1      	strb	r1, [r2, r3]
	return *this;
   b52b2:	e7f2      	b.n	b529a <_ZN6String4copyEPKcj+0x18>

000b52b4 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b52b4:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b52b6:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b52b8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b52bc:	4604      	mov	r4, r0
	len = 0;
   b52be:	6083      	str	r3, [r0, #8]
	flags = 0;
   b52c0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b52c2:	b141      	cbz	r1, b52d6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b52c4:	4608      	mov	r0, r1
   b52c6:	9101      	str	r1, [sp, #4]
   b52c8:	f000 fb69 	bl	b599e <strlen>
   b52cc:	9901      	ldr	r1, [sp, #4]
   b52ce:	4602      	mov	r2, r0
   b52d0:	4620      	mov	r0, r4
   b52d2:	f7ff ffd6 	bl	b5282 <_ZN6String4copyEPKcj>
}
   b52d6:	4620      	mov	r0, r4
   b52d8:	b002      	add	sp, #8
   b52da:	bd10      	pop	{r4, pc}

000b52dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b52dc:	4b05      	ldr	r3, [pc, #20]	; (b52f4 <_GLOBAL__sub_I_System+0x18>)
   b52de:	2202      	movs	r2, #2
   b52e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b52e2:	4b05      	ldr	r3, [pc, #20]	; (b52f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b52e4:	4a05      	ldr	r2, [pc, #20]	; (b52fc <_GLOBAL__sub_I_System+0x20>)
   b52e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b52e8:	2000      	movs	r0, #0
   b52ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b52ee:	f7ff b9ad 	b.w	b464c <set_system_mode>
   b52f2:	bf00      	nop
   b52f4:	2003e6ec 	.word	0x2003e6ec
   b52f8:	2003e6e0 	.word	0x2003e6e0
   b52fc:	ffff0000 	.word	0xffff0000

000b5300 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5300:	4b02      	ldr	r3, [pc, #8]	; (b530c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5302:	681a      	ldr	r2, [r3, #0]
   b5304:	4b02      	ldr	r3, [pc, #8]	; (b5310 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5306:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5308:	4770      	bx	lr
   b530a:	bf00      	nop
   b530c:	2003e628 	.word	0x2003e628
   b5310:	2003e6f0 	.word	0x2003e6f0

000b5314 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b5314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b5316:	b287      	uxth	r7, r0
{
   b5318:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b531a:	4638      	mov	r0, r7
{
   b531c:	460d      	mov	r5, r1
   b531e:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b5320:	f000 f9d2 	bl	b56c8 <pinAvailable>
   b5324:	b160      	cbz	r0, b5340 <tone+0x2c>
   b5326:	2102      	movs	r1, #2
   b5328:	4638      	mov	r0, r7
   b532a:	f7ff f87f 	bl	b442c <HAL_Validate_Pin_Function>
   b532e:	2802      	cmp	r0, #2
   b5330:	d106      	bne.n	b5340 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b5332:	4632      	mov	r2, r6
   b5334:	4629      	mov	r1, r5
   b5336:	4620      	mov	r0, r4
    }
}
   b5338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b533c:	f7ff b8ee 	b.w	b451c <HAL_Tone_Start>
}
   b5340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5342 <noTone>:

void noTone(uint8_t pin)
{
   b5342:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b5344:	b285      	uxth	r5, r0
{
   b5346:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b5348:	4628      	mov	r0, r5
   b534a:	f000 f9bd 	bl	b56c8 <pinAvailable>
   b534e:	b150      	cbz	r0, b5366 <noTone+0x24>
   b5350:	2102      	movs	r1, #2
   b5352:	4628      	mov	r0, r5
   b5354:	f7ff f86a 	bl	b442c <HAL_Validate_Pin_Function>
   b5358:	2802      	cmp	r0, #2
   b535a:	d104      	bne.n	b5366 <noTone+0x24>
        HAL_Tone_Stop(pin);
   b535c:	4620      	mov	r0, r4
    }
}
   b535e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   b5362:	f7ff b8e3 	b.w	b452c <HAL_Tone_Stop>
}
   b5366:	bd38      	pop	{r3, r4, r5, pc}

000b5368 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5368:	4770      	bx	lr

000b536a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b536a:	7441      	strb	r1, [r0, #17]
}
   b536c:	4770      	bx	lr

000b536e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b536e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5370:	7c00      	ldrb	r0, [r0, #16]
   b5372:	f7ff f923 	bl	b45bc <hal_usart_available_data_for_write>
}
   b5376:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b537a:	bd08      	pop	{r3, pc}

000b537c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b537c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b537e:	7c00      	ldrb	r0, [r0, #16]
   b5380:	f7ff f8f4 	bl	b456c <hal_usart_available>
}
   b5384:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5388:	bd08      	pop	{r3, pc}

000b538a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b538a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b538c:	7c00      	ldrb	r0, [r0, #16]
   b538e:	f7ff f8fd 	bl	b458c <hal_usart_peek>
}
   b5392:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5396:	bd08      	pop	{r3, pc}

000b5398 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5398:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b539a:	7c00      	ldrb	r0, [r0, #16]
   b539c:	f7ff f8ee 	bl	b457c <hal_usart_read>
}
   b53a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53a4:	bd08      	pop	{r3, pc}

000b53a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b53a6:	7c00      	ldrb	r0, [r0, #16]
   b53a8:	f7ff b8f8 	b.w	b459c <hal_usart_flush>

000b53ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b53ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53ae:	7c45      	ldrb	r5, [r0, #17]
{
   b53b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53b2:	b12d      	cbz	r5, b53c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b53b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b53b6:	b003      	add	sp, #12
   b53b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b53bc:	f7ff b8ce 	b.w	b455c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b53c0:	7c00      	ldrb	r0, [r0, #16]
   b53c2:	9101      	str	r1, [sp, #4]
   b53c4:	f7ff f8fa 	bl	b45bc <hal_usart_available_data_for_write>
   b53c8:	2800      	cmp	r0, #0
   b53ca:	9901      	ldr	r1, [sp, #4]
   b53cc:	dcf2      	bgt.n	b53b4 <_ZN11USARTSerial5writeEh+0x8>
}
   b53ce:	4628      	mov	r0, r5
   b53d0:	b003      	add	sp, #12
   b53d2:	bd30      	pop	{r4, r5, pc}

000b53d4 <_ZN11USARTSerialD0Ev>:
   b53d4:	b510      	push	{r4, lr}
   b53d6:	2114      	movs	r1, #20
   b53d8:	4604      	mov	r4, r0
   b53da:	f7fe fe5e 	bl	b409a <_ZdlPvj>
   b53de:	4620      	mov	r0, r4
   b53e0:	bd10      	pop	{r4, pc}
	...

000b53e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53e4:	b510      	push	{r4, lr}
   b53e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53ea:	4604      	mov	r4, r0
   b53ec:	4608      	mov	r0, r1
   b53ee:	4611      	mov	r1, r2
   b53f0:	2200      	movs	r2, #0
   b53f2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53f6:	4b04      	ldr	r3, [pc, #16]	; (b5408 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53f8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53fa:	2301      	movs	r3, #1
  _serial = serial;
   b53fc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53fe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5400:	f7ff f8e4 	bl	b45cc <hal_usart_init_ex>
}
   b5404:	4620      	mov	r0, r4
   b5406:	bd10      	pop	{r4, pc}
   b5408:	000b5bb4 	.word	0x000b5bb4

000b540c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b540c:	7441      	strb	r1, [r0, #17]
}
   b540e:	4770      	bx	lr

000b5410 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5410:	4770      	bx	lr

000b5412 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5412:	4770      	bx	lr

000b5414 <_ZN9USBSerial4readEv>:
{
   b5414:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5416:	2100      	movs	r1, #0
   b5418:	7c00      	ldrb	r0, [r0, #16]
   b541a:	f7ff f8ff 	bl	b461c <HAL_USB_USART_Receive_Data>
}
   b541e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZN9USBSerial4peekEv>:
{
   b5424:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5426:	2101      	movs	r1, #1
   b5428:	7c00      	ldrb	r0, [r0, #16]
   b542a:	f7ff f8f7 	bl	b461c <HAL_USB_USART_Receive_Data>
}
   b542e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5432:	bd08      	pop	{r3, pc}

000b5434 <_ZN9USBSerial17availableForWriteEv>:
{
   b5434:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5436:	7c00      	ldrb	r0, [r0, #16]
   b5438:	f7ff f8e8 	bl	b460c <HAL_USB_USART_Available_Data_For_Write>
}
   b543c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5440:	bd08      	pop	{r3, pc}

000b5442 <_ZN9USBSerial9availableEv>:
{
   b5442:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5444:	7c00      	ldrb	r0, [r0, #16]
   b5446:	f7ff f8d9 	bl	b45fc <HAL_USB_USART_Available_Data>
}
   b544a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b544e:	bd08      	pop	{r3, pc}

000b5450 <_ZN9USBSerial5writeEh>:
{
   b5450:	b513      	push	{r0, r1, r4, lr}
   b5452:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5454:	7c00      	ldrb	r0, [r0, #16]
{
   b5456:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5458:	f7ff f8d8 	bl	b460c <HAL_USB_USART_Available_Data_For_Write>
   b545c:	2800      	cmp	r0, #0
   b545e:	9901      	ldr	r1, [sp, #4]
   b5460:	dc01      	bgt.n	b5466 <_ZN9USBSerial5writeEh+0x16>
   b5462:	7c60      	ldrb	r0, [r4, #17]
   b5464:	b120      	cbz	r0, b5470 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5466:	7c20      	ldrb	r0, [r4, #16]
   b5468:	f7ff f8e0 	bl	b462c <HAL_USB_USART_Send_Data>
   b546c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5470:	b002      	add	sp, #8
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5474:	7c00      	ldrb	r0, [r0, #16]
   b5476:	f7ff b8e1 	b.w	b463c <HAL_USB_USART_Flush_Data>

000b547a <_ZN9USBSerialD0Ev>:
   b547a:	b510      	push	{r4, lr}
   b547c:	2114      	movs	r1, #20
   b547e:	4604      	mov	r4, r0
   b5480:	f7fe fe0b 	bl	b409a <_ZdlPvj>
   b5484:	4620      	mov	r0, r4
   b5486:	bd10      	pop	{r4, pc}

000b5488 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5488:	b510      	push	{r4, lr}
   b548a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b548e:	4604      	mov	r4, r0
   b5490:	4608      	mov	r0, r1
   b5492:	2100      	movs	r1, #0
   b5494:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5498:	4b04      	ldr	r3, [pc, #16]	; (b54ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b549a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b549c:	2301      	movs	r3, #1
  _serial = serial;
   b549e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b54a2:	4611      	mov	r1, r2
   b54a4:	f7ff f89a 	bl	b45dc <HAL_USB_USART_Init>
}
   b54a8:	4620      	mov	r0, r4
   b54aa:	bd10      	pop	{r4, pc}
   b54ac:	000b5be4 	.word	0x000b5be4

000b54b0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b54b0:	7c00      	ldrb	r0, [r0, #16]
   b54b2:	2200      	movs	r2, #0
   b54b4:	f7ff b89a 	b.w	b45ec <HAL_USB_USART_Begin>

000b54b8 <_Z19acquireSerialBufferv>:
{
   b54b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b54ba:	2214      	movs	r2, #20
{
   b54bc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b54be:	2100      	movs	r1, #0
   b54c0:	f000 fa0a 	bl	b58d8 <memset>
}
   b54c4:	4620      	mov	r0, r4
   b54c6:	bd10      	pop	{r4, pc}

000b54c8 <_Z16_fetch_usbserialv>:
{
   b54c8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54ca:	4c0f      	ldr	r4, [pc, #60]	; (b5508 <_Z16_fetch_usbserialv+0x40>)
{
   b54cc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b54ce:	a803      	add	r0, sp, #12
   b54d0:	f7ff fff2 	bl	b54b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54d4:	7821      	ldrb	r1, [r4, #0]
   b54d6:	f3bf 8f5b 	dmb	ish
   b54da:	f011 0101 	ands.w	r1, r1, #1
   b54de:	d10f      	bne.n	b5500 <_Z16_fetch_usbserialv+0x38>
   b54e0:	4620      	mov	r0, r4
   b54e2:	9101      	str	r1, [sp, #4]
   b54e4:	f7fe fddb 	bl	b409e <__cxa_guard_acquire>
   b54e8:	9901      	ldr	r1, [sp, #4]
   b54ea:	b148      	cbz	r0, b5500 <_Z16_fetch_usbserialv+0x38>
   b54ec:	aa03      	add	r2, sp, #12
   b54ee:	4807      	ldr	r0, [pc, #28]	; (b550c <_Z16_fetch_usbserialv+0x44>)
   b54f0:	f7ff ffca 	bl	b5488 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b54f4:	4620      	mov	r0, r4
   b54f6:	f7fe fdd7 	bl	b40a8 <__cxa_guard_release>
   b54fa:	4805      	ldr	r0, [pc, #20]	; (b5510 <_Z16_fetch_usbserialv+0x48>)
   b54fc:	f000 f9cf 	bl	b589e <atexit>
	return _usbserial;
}
   b5500:	4802      	ldr	r0, [pc, #8]	; (b550c <_Z16_fetch_usbserialv+0x44>)
   b5502:	b008      	add	sp, #32
   b5504:	bd10      	pop	{r4, pc}
   b5506:	bf00      	nop
   b5508:	2003e6f4 	.word	0x2003e6f4
   b550c:	2003e6f8 	.word	0x2003e6f8
   b5510:	000b5411 	.word	0x000b5411

000b5514 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5514:	2200      	movs	r2, #0
   b5516:	6840      	ldr	r0, [r0, #4]
   b5518:	4611      	mov	r1, r2
   b551a:	f7ff b8fb 	b.w	b4714 <network_ready>

000b551e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b551e:	2200      	movs	r2, #0
   b5520:	6840      	ldr	r0, [r0, #4]
   b5522:	4611      	mov	r1, r2
   b5524:	f7ff b916 	b.w	b4754 <network_listening>

000b5528 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5528:	2200      	movs	r2, #0
   b552a:	6840      	ldr	r0, [r0, #4]
   b552c:	4611      	mov	r1, r2
   b552e:	f7ff b921 	b.w	b4774 <network_get_listen_timeout>

000b5532 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5532:	6840      	ldr	r0, [r0, #4]
   b5534:	2200      	movs	r2, #0
   b5536:	f7ff b915 	b.w	b4764 <network_set_listen_timeout>

000b553a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b553a:	6840      	ldr	r0, [r0, #4]
   b553c:	2200      	movs	r2, #0
   b553e:	f081 0101 	eor.w	r1, r1, #1
   b5542:	f7ff b8ff 	b.w	b4744 <network_listen>

000b5546 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5546:	2300      	movs	r3, #0
   b5548:	6840      	ldr	r0, [r0, #4]
   b554a:	461a      	mov	r2, r3
   b554c:	4619      	mov	r1, r3
   b554e:	f7ff b8f1 	b.w	b4734 <network_off>

000b5552 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5552:	2300      	movs	r3, #0
   b5554:	6840      	ldr	r0, [r0, #4]
   b5556:	461a      	mov	r2, r3
   b5558:	4619      	mov	r1, r3
   b555a:	f7ff b8e3 	b.w	b4724 <network_on>

000b555e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b555e:	2200      	movs	r2, #0
   b5560:	6840      	ldr	r0, [r0, #4]
   b5562:	4611      	mov	r1, r2
   b5564:	f7ff b8c6 	b.w	b46f4 <network_connecting>

000b5568 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5568:	6840      	ldr	r0, [r0, #4]
   b556a:	2200      	movs	r2, #0
   b556c:	2102      	movs	r1, #2
   b556e:	f7ff b8c9 	b.w	b4704 <network_disconnect>

000b5572 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5572:	2300      	movs	r3, #0
   b5574:	6840      	ldr	r0, [r0, #4]
   b5576:	461a      	mov	r2, r3
   b5578:	f7ff b8b4 	b.w	b46e4 <network_connect>

000b557c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b557c:	4b02      	ldr	r3, [pc, #8]	; (b5588 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b557e:	2204      	movs	r2, #4
   b5580:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5582:	4a02      	ldr	r2, [pc, #8]	; (b558c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5584:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5586:	4770      	bx	lr
   b5588:	2003e70c 	.word	0x2003e70c
   b558c:	000b5c14 	.word	0x000b5c14

000b5590 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5590:	4b01      	ldr	r3, [pc, #4]	; (b5598 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5592:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5594:	4770      	bx	lr
   b5596:	bf00      	nop
   b5598:	2003e62c 	.word	0x2003e62c

000b559c <serialEventRun>:
{
   b559c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b559e:	4b0b      	ldr	r3, [pc, #44]	; (b55cc <serialEventRun+0x30>)
   b55a0:	b143      	cbz	r3, b55b4 <serialEventRun+0x18>
   b55a2:	f7ff ff91 	bl	b54c8 <_Z16_fetch_usbserialv>
   b55a6:	6803      	ldr	r3, [r0, #0]
   b55a8:	691b      	ldr	r3, [r3, #16]
   b55aa:	4798      	blx	r3
   b55ac:	2800      	cmp	r0, #0
   b55ae:	dd01      	ble.n	b55b4 <serialEventRun+0x18>
        serialEvent();
   b55b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b55b4:	4b06      	ldr	r3, [pc, #24]	; (b55d0 <serialEventRun+0x34>)
   b55b6:	b143      	cbz	r3, b55ca <serialEventRun+0x2e>
   b55b8:	f000 f948 	bl	b584c <_Z22__fetch_global_Serial1v>
   b55bc:	6803      	ldr	r3, [r0, #0]
   b55be:	691b      	ldr	r3, [r3, #16]
   b55c0:	4798      	blx	r3
   b55c2:	2800      	cmp	r0, #0
   b55c4:	dd01      	ble.n	b55ca <serialEventRun+0x2e>
        serialEvent1();
   b55c6:	f3af 8000 	nop.w
}
   b55ca:	bd08      	pop	{r3, pc}
	...

000b55d4 <_post_loop>:
{
   b55d4:	b508      	push	{r3, lr}
	serialEventRun();
   b55d6:	f7ff ffe1 	bl	b559c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55da:	f7fe ff1f 	bl	b441c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55de:	4b01      	ldr	r3, [pc, #4]	; (b55e4 <_post_loop+0x10>)
   b55e0:	6018      	str	r0, [r3, #0]
}
   b55e2:	bd08      	pop	{r3, pc}
   b55e4:	2003e728 	.word	0x2003e728

000b55e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55e8:	4805      	ldr	r0, [pc, #20]	; (b5600 <_Z33system_initialize_user_backup_ramv+0x18>)
   b55ea:	4a06      	ldr	r2, [pc, #24]	; (b5604 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b55ec:	4906      	ldr	r1, [pc, #24]	; (b5608 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b55ee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55f0:	1a12      	subs	r2, r2, r0
   b55f2:	f000 f963 	bl	b58bc <memcpy>
    __backup_sram_signature = signature;
   b55f6:	4b05      	ldr	r3, [pc, #20]	; (b560c <_Z33system_initialize_user_backup_ramv+0x24>)
   b55f8:	4a05      	ldr	r2, [pc, #20]	; (b5610 <_Z33system_initialize_user_backup_ramv+0x28>)
   b55fa:	601a      	str	r2, [r3, #0]
}
   b55fc:	bd08      	pop	{r3, pc}
   b55fe:	bf00      	nop
   b5600:	2003f400 	.word	0x2003f400
   b5604:	2003f404 	.word	0x2003f404
   b5608:	000b5d14 	.word	0x000b5d14
   b560c:	2003f400 	.word	0x2003f400
   b5610:	9a271c1e 	.word	0x9a271c1e

000b5614 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5614:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5616:	2300      	movs	r3, #0
   b5618:	9300      	str	r3, [sp, #0]
   b561a:	461a      	mov	r2, r3
   b561c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5620:	f7ff f83e 	bl	b46a0 <system_ctrl_set_result>
}
   b5624:	b003      	add	sp, #12
   b5626:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b562c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b562c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b562e:	8843      	ldrh	r3, [r0, #2]
   b5630:	2b0a      	cmp	r3, #10
   b5632:	d008      	beq.n	b5646 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5634:	2b50      	cmp	r3, #80	; 0x50
   b5636:	d10b      	bne.n	b5650 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5638:	4b09      	ldr	r3, [pc, #36]	; (b5660 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b563a:	681b      	ldr	r3, [r3, #0]
   b563c:	b14b      	cbz	r3, b5652 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b563e:	b003      	add	sp, #12
   b5640:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5644:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5646:	f7ff ffe5 	bl	b5614 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b564a:	b003      	add	sp, #12
   b564c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5650:	2300      	movs	r3, #0
   b5652:	9300      	str	r3, [sp, #0]
   b5654:	461a      	mov	r2, r3
   b5656:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b565a:	f7ff f821 	bl	b46a0 <system_ctrl_set_result>
}
   b565e:	e7f4      	b.n	b564a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5660:	2003e718 	.word	0x2003e718

000b5664 <module_user_init_hook>:
{
   b5664:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5666:	4812      	ldr	r0, [pc, #72]	; (b56b0 <module_user_init_hook+0x4c>)
   b5668:	2100      	movs	r1, #0
   b566a:	f7ff f8cb 	bl	b4804 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b566e:	4b11      	ldr	r3, [pc, #68]	; (b56b4 <module_user_init_hook+0x50>)
   b5670:	681a      	ldr	r2, [r3, #0]
   b5672:	4b11      	ldr	r3, [pc, #68]	; (b56b8 <module_user_init_hook+0x54>)
   b5674:	429a      	cmp	r2, r3
   b5676:	4b11      	ldr	r3, [pc, #68]	; (b56bc <module_user_init_hook+0x58>)
   b5678:	bf0c      	ite	eq
   b567a:	2201      	moveq	r2, #1
   b567c:	2200      	movne	r2, #0
   b567e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5680:	d001      	beq.n	b5686 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5682:	f7ff ffb1 	bl	b55e8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5686:	f7fe feb9 	bl	b43fc <HAL_RNG_GetRandomNumber>
   b568a:	4604      	mov	r4, r0
    srand(seed);
   b568c:	f000 f93c 	bl	b5908 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5690:	4b0b      	ldr	r3, [pc, #44]	; (b56c0 <module_user_init_hook+0x5c>)
   b5692:	b113      	cbz	r3, b569a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5694:	4620      	mov	r0, r4
   b5696:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b569a:	2100      	movs	r1, #0
   b569c:	4808      	ldr	r0, [pc, #32]	; (b56c0 <module_user_init_hook+0x5c>)
   b569e:	f7ff f819 	bl	b46d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b56a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b56a6:	4807      	ldr	r0, [pc, #28]	; (b56c4 <module_user_init_hook+0x60>)
   b56a8:	2100      	movs	r1, #0
   b56aa:	f7fe bfef 	b.w	b468c <system_ctrl_set_app_request_handler>
   b56ae:	bf00      	nop
   b56b0:	000b5591 	.word	0x000b5591
   b56b4:	2003f400 	.word	0x2003f400
   b56b8:	9a271c1e 	.word	0x9a271c1e
   b56bc:	2003e714 	.word	0x2003e714
   b56c0:	00000000 	.word	0x00000000
   b56c4:	000b562d 	.word	0x000b562d

000b56c8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b56c8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b56ca:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b56cc:	d902      	bls.n	b56d4 <pinAvailable+0xc>
    return false;
   b56ce:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b56d0:	b002      	add	sp, #8
   b56d2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b56d4:	f1a0 030b 	sub.w	r3, r0, #11
   b56d8:	2b02      	cmp	r3, #2
   b56da:	d81a      	bhi.n	b5712 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56dc:	4c17      	ldr	r4, [pc, #92]	; (b573c <pinAvailable+0x74>)
   b56de:	7821      	ldrb	r1, [r4, #0]
   b56e0:	f3bf 8f5b 	dmb	ish
   b56e4:	f011 0101 	ands.w	r1, r1, #1
   b56e8:	d10b      	bne.n	b5702 <pinAvailable+0x3a>
   b56ea:	4620      	mov	r0, r4
   b56ec:	9101      	str	r1, [sp, #4]
   b56ee:	f7fe fcd6 	bl	b409e <__cxa_guard_acquire>
   b56f2:	9901      	ldr	r1, [sp, #4]
   b56f4:	b128      	cbz	r0, b5702 <pinAvailable+0x3a>
   b56f6:	4812      	ldr	r0, [pc, #72]	; (b5740 <pinAvailable+0x78>)
   b56f8:	f7ff fd8e 	bl	b5218 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56fc:	4620      	mov	r0, r4
   b56fe:	f7fe fcd3 	bl	b40a8 <__cxa_guard_release>
   b5702:	4b0f      	ldr	r3, [pc, #60]	; (b5740 <pinAvailable+0x78>)
   b5704:	7818      	ldrb	r0, [r3, #0]
   b5706:	f7fe ff21 	bl	b454c <hal_spi_is_enabled>
   b570a:	2800      	cmp	r0, #0
   b570c:	d1df      	bne.n	b56ce <pinAvailable+0x6>
  return true; // 'pin' is available
   b570e:	2001      	movs	r0, #1
   b5710:	e7de      	b.n	b56d0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5712:	2801      	cmp	r0, #1
   b5714:	d809      	bhi.n	b572a <pinAvailable+0x62>
   b5716:	f000 f859 	bl	b57cc <_Z19__fetch_global_Wirev>
   b571a:	2100      	movs	r1, #0
   b571c:	7c00      	ldrb	r0, [r0, #16]
   b571e:	f7fe fed5 	bl	b44cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5722:	f080 0001 	eor.w	r0, r0, #1
   b5726:	b2c0      	uxtb	r0, r0
   b5728:	e7d2      	b.n	b56d0 <pinAvailable+0x8>
   b572a:	3809      	subs	r0, #9
   b572c:	2801      	cmp	r0, #1
   b572e:	d8ee      	bhi.n	b570e <pinAvailable+0x46>
   b5730:	f000 f88c 	bl	b584c <_Z22__fetch_global_Serial1v>
   b5734:	7c00      	ldrb	r0, [r0, #16]
   b5736:	f7fe ff39 	bl	b45ac <hal_usart_is_enabled>
   b573a:	e7f2      	b.n	b5722 <pinAvailable+0x5a>
   b573c:	2003e71c 	.word	0x2003e71c
   b5740:	2003e720 	.word	0x2003e720

000b5744 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5744:	2823      	cmp	r0, #35	; 0x23
{
   b5746:	b538      	push	{r3, r4, r5, lr}
   b5748:	4604      	mov	r4, r0
   b574a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b574c:	d80a      	bhi.n	b5764 <pinMode+0x20>
   b574e:	29ff      	cmp	r1, #255	; 0xff
   b5750:	d008      	beq.n	b5764 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5752:	f7ff ffb9 	bl	b56c8 <pinAvailable>
   b5756:	b128      	cbz	r0, b5764 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5758:	4629      	mov	r1, r5
   b575a:	4620      	mov	r0, r4
}
   b575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5760:	f7fe be6c 	b.w	b443c <HAL_Pin_Mode>
}
   b5764:	bd38      	pop	{r3, r4, r5, pc}

000b5766 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5766:	b538      	push	{r3, r4, r5, lr}
   b5768:	4604      	mov	r4, r0
   b576a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b576c:	f7fe fe6e 	bl	b444c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5770:	28ff      	cmp	r0, #255	; 0xff
   b5772:	d010      	beq.n	b5796 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5774:	2806      	cmp	r0, #6
   b5776:	d804      	bhi.n	b5782 <digitalWrite+0x1c>
   b5778:	234d      	movs	r3, #77	; 0x4d
   b577a:	fa23 f000 	lsr.w	r0, r3, r0
   b577e:	07c3      	lsls	r3, r0, #31
   b5780:	d409      	bmi.n	b5796 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5782:	4620      	mov	r0, r4
   b5784:	f7ff ffa0 	bl	b56c8 <pinAvailable>
   b5788:	b128      	cbz	r0, b5796 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b578a:	4629      	mov	r1, r5
   b578c:	4620      	mov	r0, r4
}
   b578e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5792:	f7fe be63 	b.w	b445c <HAL_GPIO_Write>
}
   b5796:	bd38      	pop	{r3, r4, r5, pc}

000b5798 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b5798:	f7fe be68 	b.w	b446c <HAL_Pulse_In>

000b579c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b579c:	4770      	bx	lr
	...

000b57a0 <_Z17acquireWireBufferv>:
{
   b57a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b57a2:	2520      	movs	r5, #32
   b57a4:	2314      	movs	r3, #20
{
   b57a6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b57a8:	6003      	str	r3, [r0, #0]
   b57aa:	6085      	str	r5, [r0, #8]
   b57ac:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b57ae:	4906      	ldr	r1, [pc, #24]	; (b57c8 <_Z17acquireWireBufferv+0x28>)
   b57b0:	4628      	mov	r0, r5
   b57b2:	f000 f86f 	bl	b5894 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b57b6:	4904      	ldr	r1, [pc, #16]	; (b57c8 <_Z17acquireWireBufferv+0x28>)
	};
   b57b8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b57ba:	4628      	mov	r0, r5
   b57bc:	f000 f86a 	bl	b5894 <_ZnajRKSt9nothrow_t>
	};
   b57c0:	60e0      	str	r0, [r4, #12]
}
   b57c2:	4620      	mov	r0, r4
   b57c4:	bd38      	pop	{r3, r4, r5, pc}
   b57c6:	bf00      	nop
   b57c8:	000b5c48 	.word	0x000b5c48

000b57cc <_Z19__fetch_global_Wirev>:
{
   b57cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57ce:	4d0e      	ldr	r5, [pc, #56]	; (b5808 <_Z19__fetch_global_Wirev+0x3c>)
   b57d0:	7829      	ldrb	r1, [r5, #0]
   b57d2:	f3bf 8f5b 	dmb	ish
   b57d6:	f011 0401 	ands.w	r4, r1, #1
{
   b57da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57dc:	d111      	bne.n	b5802 <_Z19__fetch_global_Wirev+0x36>
   b57de:	4628      	mov	r0, r5
   b57e0:	f7fe fc5d 	bl	b409e <__cxa_guard_acquire>
   b57e4:	b168      	cbz	r0, b5802 <_Z19__fetch_global_Wirev+0x36>
   b57e6:	a801      	add	r0, sp, #4
   b57e8:	f7ff ffda 	bl	b57a0 <_Z17acquireWireBufferv>
   b57ec:	aa01      	add	r2, sp, #4
   b57ee:	4621      	mov	r1, r4
   b57f0:	4806      	ldr	r0, [pc, #24]	; (b580c <_Z19__fetch_global_Wirev+0x40>)
   b57f2:	f7ff fb67 	bl	b4ec4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b57f6:	4628      	mov	r0, r5
   b57f8:	f7fe fc56 	bl	b40a8 <__cxa_guard_release>
   b57fc:	4804      	ldr	r0, [pc, #16]	; (b5810 <_Z19__fetch_global_Wirev+0x44>)
   b57fe:	f000 f84e 	bl	b589e <atexit>
	return wire;
}
   b5802:	4802      	ldr	r0, [pc, #8]	; (b580c <_Z19__fetch_global_Wirev+0x40>)
   b5804:	b007      	add	sp, #28
   b5806:	bd30      	pop	{r4, r5, pc}
   b5808:	2003e72c 	.word	0x2003e72c
   b580c:	2003e730 	.word	0x2003e730
   b5810:	000b579d 	.word	0x000b579d

000b5814 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5814:	4770      	bx	lr
	...

000b5818 <_Z20acquireSerial1Bufferv>:
{
   b5818:	b538      	push	{r3, r4, r5, lr}
   b581a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b581c:	2514      	movs	r5, #20
   b581e:	462a      	mov	r2, r5
   b5820:	2100      	movs	r1, #0
   b5822:	f000 f859 	bl	b58d8 <memset>
   b5826:	8025      	strh	r5, [r4, #0]
   b5828:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b582a:	4907      	ldr	r1, [pc, #28]	; (b5848 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b582c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b582e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5830:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5832:	f000 f82f 	bl	b5894 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5836:	4904      	ldr	r1, [pc, #16]	; (b5848 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5838:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b583a:	4628      	mov	r0, r5
   b583c:	f000 f82a 	bl	b5894 <_ZnajRKSt9nothrow_t>
    };
   b5840:	60e0      	str	r0, [r4, #12]
}
   b5842:	4620      	mov	r0, r4
   b5844:	bd38      	pop	{r3, r4, r5, pc}
   b5846:	bf00      	nop
   b5848:	000b5c48 	.word	0x000b5c48

000b584c <_Z22__fetch_global_Serial1v>:
{
   b584c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b584e:	4d0e      	ldr	r5, [pc, #56]	; (b5888 <_Z22__fetch_global_Serial1v+0x3c>)
   b5850:	7829      	ldrb	r1, [r5, #0]
   b5852:	f3bf 8f5b 	dmb	ish
   b5856:	f011 0401 	ands.w	r4, r1, #1
{
   b585a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b585c:	d111      	bne.n	b5882 <_Z22__fetch_global_Serial1v+0x36>
   b585e:	4628      	mov	r0, r5
   b5860:	f7fe fc1d 	bl	b409e <__cxa_guard_acquire>
   b5864:	b168      	cbz	r0, b5882 <_Z22__fetch_global_Serial1v+0x36>
   b5866:	a801      	add	r0, sp, #4
   b5868:	f7ff ffd6 	bl	b5818 <_Z20acquireSerial1Bufferv>
   b586c:	aa01      	add	r2, sp, #4
   b586e:	4621      	mov	r1, r4
   b5870:	4806      	ldr	r0, [pc, #24]	; (b588c <_Z22__fetch_global_Serial1v+0x40>)
   b5872:	f7ff fdb7 	bl	b53e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5876:	4628      	mov	r0, r5
   b5878:	f7fe fc16 	bl	b40a8 <__cxa_guard_release>
   b587c:	4804      	ldr	r0, [pc, #16]	; (b5890 <_Z22__fetch_global_Serial1v+0x44>)
   b587e:	f000 f80e 	bl	b589e <atexit>
    return serial1;
}
   b5882:	4802      	ldr	r0, [pc, #8]	; (b588c <_Z22__fetch_global_Serial1v+0x40>)
   b5884:	b007      	add	sp, #28
   b5886:	bd30      	pop	{r4, r5, pc}
   b5888:	2003e744 	.word	0x2003e744
   b588c:	2003e748 	.word	0x2003e748
   b5890:	000b5815 	.word	0x000b5815

000b5894 <_ZnajRKSt9nothrow_t>:
   b5894:	f7fe bbff 	b.w	b4096 <_Znaj>

000b5898 <_ZSt25__throw_bad_function_callv>:
   b5898:	b508      	push	{r3, lr}
   b589a:	f7fe ff9b 	bl	b47d4 <abort>

000b589e <atexit>:
   b589e:	2300      	movs	r3, #0
   b58a0:	4601      	mov	r1, r0
   b58a2:	461a      	mov	r2, r3
   b58a4:	4618      	mov	r0, r3
   b58a6:	f000 b883 	b.w	b59b0 <__register_exitproc>
	...

000b58ac <calloc>:
   b58ac:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <calloc+0xc>)
   b58ae:	460a      	mov	r2, r1
   b58b0:	4601      	mov	r1, r0
   b58b2:	6818      	ldr	r0, [r3, #0]
   b58b4:	f000 b818 	b.w	b58e8 <_calloc_r>
   b58b8:	2003e62c 	.word	0x2003e62c

000b58bc <memcpy>:
   b58bc:	440a      	add	r2, r1
   b58be:	4291      	cmp	r1, r2
   b58c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b58c4:	d100      	bne.n	b58c8 <memcpy+0xc>
   b58c6:	4770      	bx	lr
   b58c8:	b510      	push	{r4, lr}
   b58ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b58ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b58d2:	4291      	cmp	r1, r2
   b58d4:	d1f9      	bne.n	b58ca <memcpy+0xe>
   b58d6:	bd10      	pop	{r4, pc}

000b58d8 <memset>:
   b58d8:	4402      	add	r2, r0
   b58da:	4603      	mov	r3, r0
   b58dc:	4293      	cmp	r3, r2
   b58de:	d100      	bne.n	b58e2 <memset+0xa>
   b58e0:	4770      	bx	lr
   b58e2:	f803 1b01 	strb.w	r1, [r3], #1
   b58e6:	e7f9      	b.n	b58dc <memset+0x4>

000b58e8 <_calloc_r>:
   b58e8:	b513      	push	{r0, r1, r4, lr}
   b58ea:	434a      	muls	r2, r1
   b58ec:	4611      	mov	r1, r2
   b58ee:	9201      	str	r2, [sp, #4]
   b58f0:	f7fe ff78 	bl	b47e4 <_malloc_r>
   b58f4:	4604      	mov	r4, r0
   b58f6:	b118      	cbz	r0, b5900 <_calloc_r+0x18>
   b58f8:	9a01      	ldr	r2, [sp, #4]
   b58fa:	2100      	movs	r1, #0
   b58fc:	f7ff ffec 	bl	b58d8 <memset>
   b5900:	4620      	mov	r0, r4
   b5902:	b002      	add	sp, #8
   b5904:	bd10      	pop	{r4, pc}
	...

000b5908 <srand>:
   b5908:	b538      	push	{r3, r4, r5, lr}
   b590a:	4b10      	ldr	r3, [pc, #64]	; (b594c <srand+0x44>)
   b590c:	681d      	ldr	r5, [r3, #0]
   b590e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5910:	4604      	mov	r4, r0
   b5912:	b9b3      	cbnz	r3, b5942 <srand+0x3a>
   b5914:	2018      	movs	r0, #24
   b5916:	f7fe ff45 	bl	b47a4 <malloc>
   b591a:	4602      	mov	r2, r0
   b591c:	63a8      	str	r0, [r5, #56]	; 0x38
   b591e:	b920      	cbnz	r0, b592a <srand+0x22>
   b5920:	4b0b      	ldr	r3, [pc, #44]	; (b5950 <srand+0x48>)
   b5922:	480c      	ldr	r0, [pc, #48]	; (b5954 <srand+0x4c>)
   b5924:	2142      	movs	r1, #66	; 0x42
   b5926:	f7fe ff65 	bl	b47f4 <__assert_func>
   b592a:	490b      	ldr	r1, [pc, #44]	; (b5958 <srand+0x50>)
   b592c:	4b0b      	ldr	r3, [pc, #44]	; (b595c <srand+0x54>)
   b592e:	e9c0 1300 	strd	r1, r3, [r0]
   b5932:	4b0b      	ldr	r3, [pc, #44]	; (b5960 <srand+0x58>)
   b5934:	6083      	str	r3, [r0, #8]
   b5936:	230b      	movs	r3, #11
   b5938:	8183      	strh	r3, [r0, #12]
   b593a:	2100      	movs	r1, #0
   b593c:	2001      	movs	r0, #1
   b593e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5942:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5944:	2200      	movs	r2, #0
   b5946:	611c      	str	r4, [r3, #16]
   b5948:	615a      	str	r2, [r3, #20]
   b594a:	bd38      	pop	{r3, r4, r5, pc}
   b594c:	2003e62c 	.word	0x2003e62c
   b5950:	000b5c49 	.word	0x000b5c49
   b5954:	000b5c60 	.word	0x000b5c60
   b5958:	abcd330e 	.word	0xabcd330e
   b595c:	e66d1234 	.word	0xe66d1234
   b5960:	0005deec 	.word	0x0005deec

000b5964 <strdup>:
   b5964:	4b02      	ldr	r3, [pc, #8]	; (b5970 <strdup+0xc>)
   b5966:	4601      	mov	r1, r0
   b5968:	6818      	ldr	r0, [r3, #0]
   b596a:	f000 b803 	b.w	b5974 <_strdup_r>
   b596e:	bf00      	nop
   b5970:	2003e62c 	.word	0x2003e62c

000b5974 <_strdup_r>:
   b5974:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5976:	4604      	mov	r4, r0
   b5978:	4608      	mov	r0, r1
   b597a:	460d      	mov	r5, r1
   b597c:	f000 f80f 	bl	b599e <strlen>
   b5980:	1c42      	adds	r2, r0, #1
   b5982:	4611      	mov	r1, r2
   b5984:	4620      	mov	r0, r4
   b5986:	9201      	str	r2, [sp, #4]
   b5988:	f7fe ff2c 	bl	b47e4 <_malloc_r>
   b598c:	4604      	mov	r4, r0
   b598e:	b118      	cbz	r0, b5998 <_strdup_r+0x24>
   b5990:	9a01      	ldr	r2, [sp, #4]
   b5992:	4629      	mov	r1, r5
   b5994:	f7ff ff92 	bl	b58bc <memcpy>
   b5998:	4620      	mov	r0, r4
   b599a:	b003      	add	sp, #12
   b599c:	bd30      	pop	{r4, r5, pc}

000b599e <strlen>:
   b599e:	4603      	mov	r3, r0
   b59a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b59a4:	2a00      	cmp	r2, #0
   b59a6:	d1fb      	bne.n	b59a0 <strlen+0x2>
   b59a8:	1a18      	subs	r0, r3, r0
   b59aa:	3801      	subs	r0, #1
   b59ac:	4770      	bx	lr
	...

000b59b0 <__register_exitproc>:
   b59b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b59b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5a70 <__register_exitproc+0xc0>
   b59b8:	4606      	mov	r6, r0
   b59ba:	f8d8 0000 	ldr.w	r0, [r8]
   b59be:	461f      	mov	r7, r3
   b59c0:	460d      	mov	r5, r1
   b59c2:	4691      	mov	r9, r2
   b59c4:	f000 f856 	bl	b5a74 <__retarget_lock_acquire_recursive>
   b59c8:	4b25      	ldr	r3, [pc, #148]	; (b5a60 <__register_exitproc+0xb0>)
   b59ca:	681c      	ldr	r4, [r3, #0]
   b59cc:	b934      	cbnz	r4, b59dc <__register_exitproc+0x2c>
   b59ce:	4c25      	ldr	r4, [pc, #148]	; (b5a64 <__register_exitproc+0xb4>)
   b59d0:	601c      	str	r4, [r3, #0]
   b59d2:	4b25      	ldr	r3, [pc, #148]	; (b5a68 <__register_exitproc+0xb8>)
   b59d4:	b113      	cbz	r3, b59dc <__register_exitproc+0x2c>
   b59d6:	681b      	ldr	r3, [r3, #0]
   b59d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b59dc:	6863      	ldr	r3, [r4, #4]
   b59de:	2b1f      	cmp	r3, #31
   b59e0:	dd07      	ble.n	b59f2 <__register_exitproc+0x42>
   b59e2:	f8d8 0000 	ldr.w	r0, [r8]
   b59e6:	f000 f847 	bl	b5a78 <__retarget_lock_release_recursive>
   b59ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b59ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b59f2:	b34e      	cbz	r6, b5a48 <__register_exitproc+0x98>
   b59f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b59f8:	b988      	cbnz	r0, b5a1e <__register_exitproc+0x6e>
   b59fa:	4b1c      	ldr	r3, [pc, #112]	; (b5a6c <__register_exitproc+0xbc>)
   b59fc:	b923      	cbnz	r3, b5a08 <__register_exitproc+0x58>
   b59fe:	f8d8 0000 	ldr.w	r0, [r8]
   b5a02:	f000 f838 	bl	b5a76 <__retarget_lock_release>
   b5a06:	e7f0      	b.n	b59ea <__register_exitproc+0x3a>
   b5a08:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5a0c:	f7fe feca 	bl	b47a4 <malloc>
   b5a10:	2800      	cmp	r0, #0
   b5a12:	d0f4      	beq.n	b59fe <__register_exitproc+0x4e>
   b5a14:	2300      	movs	r3, #0
   b5a16:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5a1a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5a1e:	6863      	ldr	r3, [r4, #4]
   b5a20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5a24:	2201      	movs	r2, #1
   b5a26:	409a      	lsls	r2, r3
   b5a28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5a2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5a30:	4313      	orrs	r3, r2
   b5a32:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5a36:	2e02      	cmp	r6, #2
   b5a38:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5a3c:	bf02      	ittt	eq
   b5a3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5a42:	4313      	orreq	r3, r2
   b5a44:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5a48:	6863      	ldr	r3, [r4, #4]
   b5a4a:	f8d8 0000 	ldr.w	r0, [r8]
   b5a4e:	1c5a      	adds	r2, r3, #1
   b5a50:	3302      	adds	r3, #2
   b5a52:	6062      	str	r2, [r4, #4]
   b5a54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5a58:	f000 f80e 	bl	b5a78 <__retarget_lock_release_recursive>
   b5a5c:	2000      	movs	r0, #0
   b5a5e:	e7c6      	b.n	b59ee <__register_exitproc+0x3e>
   b5a60:	2003e7e8 	.word	0x2003e7e8
   b5a64:	2003e75c 	.word	0x2003e75c
   b5a68:	00000000 	.word	0x00000000
   b5a6c:	000b47a5 	.word	0x000b47a5
   b5a70:	2003e690 	.word	0x2003e690

000b5a74 <__retarget_lock_acquire_recursive>:
   b5a74:	4770      	bx	lr

000b5a76 <__retarget_lock_release>:
   b5a76:	4770      	bx	lr

000b5a78 <__retarget_lock_release_recursive>:
   b5a78:	4770      	bx	lr

000b5a7a <link_code_end>:
	...

000b5a7c <dynalib_user>:
   b5a7c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5a8c:	0000 0000 4920 004e 7774 6c69 6f69 735f     .... IN.twilio_s
   b5a9c:	736d 5300 6f74 2170 5920 756f 2072 6143     ms.Stop! Your Ca
   b5aac:	2072 7369 5020 7261 656b 2164 0000 0000     r is Parked!....

000b5abc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5ac4:	48c1 000b 48c7 000b 4905 000b 48d5 000b     .H...H...I...H..
   b5ad4:	48c3 000b                                   .H..

000b5ad8 <_ZTVN5spark13EthernetClassE>:
	...
   b5ae0:	4e4f 000b 4e45 000b 4e3b 000b 4e31 000b     ON..EN..;N..1N..
   b5af0:	4e25 000b 4e19 000b 5029 000b 5031 000b     %N...N..)P..1P..
   b5b00:	4e0d 000b 4e05 000b 4dfb 000b 4df1 000b     .N...N...M...M..
   b5b10:	5061 000b                                   aP..

000b5b14 <_ZTV7TwoWire>:
	...
   b5b1c:	4e6d 000b 4eb7 000b 4e8f 000b 4e6f 000b     mN...N...N..oN..
   b5b2c:	4e97 000b 4e9f 000b 4ea7 000b 4eaf 000b     .N...N...N...N..

000b5b3c <_ZTV9IPAddress>:
	...
   b5b44:	4ef9 000b 4ee9 000b 4eeb 000b 7061 0070     .N...N...N..app.

000b5b54 <_ZTVN5spark12NetworkClassE>:
	...
   b5b5c:	4fe9 000b 4ff3 000b 4ffd 000b 5007 000b     .O...O...O...P..
   b5b6c:	5011 000b 501d 000b 5029 000b 5031 000b     .P...P..)P..1P..
   b5b7c:	5039 000b 5045 000b 504d 000b 5057 000b     9P..EP..MP..WP..
   b5b8c:	5061 000b 5925 252d 2d6d 6425 2554 3a48     aP..%Y-%m-%dT%H:
   b5b9c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5bac <_ZTV11USARTSerial>:
	...
   b5bb4:	5369 000b 53d5 000b 53ad 000b 514d 000b     iS...S...S..MQ..
   b5bc4:	537d 000b 5399 000b 538b 000b 53a7 000b     }S...S...S...S..
   b5bd4:	536b 000b 536f 000b                         kS..oS..

000b5bdc <_ZTV9USBSerial>:
	...
   b5be4:	5413 000b 547b 000b 5451 000b 514d 000b     .T..{T..QT..MQ..
   b5bf4:	5443 000b 5415 000b 5425 000b 5475 000b     CT...T..%T..uT..
   b5c04:	5435 000b 540d 000b                         5T...T..

000b5c0c <_ZTVN5spark9WiFiClassE>:
	...
   b5c14:	5573 000b 5569 000b 555f 000b 5515 000b     sU..iU.._U...U..
   b5c24:	5553 000b 5547 000b 5029 000b 5031 000b     SU..GU..)P..1P..
   b5c34:	553b 000b 5533 000b 5529 000b 551f 000b     ;U..3U..)U...U..
   b5c44:	5061 000b                                   aP..

000b5c48 <_ZSt7nothrow>:
   b5c48:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5c58:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5c68:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5c78:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5c88:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5c98:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5ca8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5cb9 <link_const_variable_data_end>:
   b5cb9:	00          	.byte	0x00
	...

000b5cbc <link_constructors_location>:
   b5cbc:	000b41cd 	.word	0x000b41cd
   b5cc0:	000b43e1 	.word	0x000b43e1
   b5cc4:	000b48b1 	.word	0x000b48b1
   b5cc8:	000b4e59 	.word	0x000b4e59
   b5ccc:	000b4fd9 	.word	0x000b4fd9
   b5cd0:	000b5139 	.word	0x000b5139
   b5cd4:	000b520d 	.word	0x000b520d
   b5cd8:	000b52dd 	.word	0x000b52dd
   b5cdc:	000b5301 	.word	0x000b5301
   b5ce0:	000b557d 	.word	0x000b557d

000b5ce4 <link_constructors_end>:
	...
