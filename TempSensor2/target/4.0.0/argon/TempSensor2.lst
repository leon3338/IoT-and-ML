
/Users/andrewleonard/Desktop/LabAndProjects/TempSensor2/target/4.0.0/argon/TempSensor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001aa4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5ac0  000b5ac0  00005ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5ae4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e61c  000b5ae8  0001e61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000168  2003e688  2003e688  0002e688  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b5b54  000b5b54  00025b54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5b7c  000b5b7c  00025b7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f88b6  00000000  00000000  00025b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00010cf5  00000000  00000000  0011e436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00031583  00000000  00000000  0012f12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002828  00000000  00000000  001606ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000093c0  00000000  00000000  00162ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003825e  00000000  00000000  0016c296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038b67  00000000  00000000  001a44f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00130fc6  00000000  00000000  001dd05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006d80  00000000  00000000  0030e024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fb63 	bl	b56f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fb6b 	bl	b5714 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e61c 	.word	0x2003e61c
   b4048:	000b5ae8 	.word	0x000b5ae8
   b404c:	2003e688 	.word	0x2003e688
   b4050:	2003e688 	.word	0x2003e688
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f88b 	bl	b5178 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5a9c 	.word	0x000b5a9c
   b407c:	000b5ac0 	.word	0x000b5ac0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b822 	b.w	b40c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f841 	bl	b410c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b82b 	b.w	b50e8 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bc5b 	b.w	b494c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bc61 	b.w	b495c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40aa:	b40e      	push	{r1, r2, r3}
   b40ac:	b503      	push	{r0, r1, lr}
   b40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40b0:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40b8:	f000 fe83 	bl	b4dc2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40bc:	b002      	add	sp, #8
   b40be:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c2:	b003      	add	sp, #12
   b40c4:	4770      	bx	lr
	...

000b40c8 <setup>:
DHT dht(D2);

float temp, humidity;
double temp_dbl, humidity_dbl;
// setup() runs once, when the device is first turned on.
void setup() {
   b40c8:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
Serial.begin(9600);
   b40ca:	f000 ff87 	bl	b4fdc <_Z16_fetch_usbserialv>
   b40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d2:	f000 ff77 	bl	b4fc4 <_ZN9USBSerial5beginEl>

dht.begin();
   b40d6:	4808      	ldr	r0, [pc, #32]	; (b40f8 <setup+0x30>)
   b40d8:	f000 f894 	bl	b4204 <_ZN3DHT5beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b40dc:	4907      	ldr	r1, [pc, #28]	; (b40fc <setup+0x34>)
   b40de:	4808      	ldr	r0, [pc, #32]	; (b4100 <setup+0x38>)
   b40e0:	2300      	movs	r3, #0
   b40e2:	2209      	movs	r2, #9
   b40e4:	f000 fbc2 	bl	b486c <spark_variable>

Particle.variable("temp", temp_dbl);
Particle.variable("humidity", humidity_dbl);
}
   b40e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b40ec:	4905      	ldr	r1, [pc, #20]	; (b4104 <setup+0x3c>)
   b40ee:	4806      	ldr	r0, [pc, #24]	; (b4108 <setup+0x40>)
   b40f0:	2300      	movs	r3, #0
   b40f2:	2209      	movs	r2, #9
   b40f4:	f000 bbba 	b.w	b486c <spark_variable>
   b40f8:	2003e688 	.word	0x2003e688
   b40fc:	2003e6a8 	.word	0x2003e6a8
   b4100:	000b5870 	.word	0x000b5870
   b4104:	2003e6a0 	.word	0x2003e6a0
   b4108:	000b5875 	.word	0x000b5875

000b410c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // The core of your code will likely live here.
float temp, humidity;

temp = dht.getTempFarenheit();
   b410e:	4817      	ldr	r0, [pc, #92]	; (b416c <loop+0x60>)
   b4110:	f000 fa44 	bl	b459c <_ZN3DHT16getTempFarenheitEv>
humidity = dht.getHumidity();
   b4114:	4815      	ldr	r0, [pc, #84]	; (b416c <loop+0x60>)
temp = dht.getTempFarenheit();
   b4116:	ee10 5a10 	vmov	r5, s0
humidity = dht.getHumidity();
   b411a:	f000 fa61 	bl	b45e0 <_ZN3DHT11getHumidityEv>

temp_dbl = temp;
   b411e:	4628      	mov	r0, r5
humidity = dht.getHumidity();
   b4120:	ee10 4a10 	vmov	r4, s0
temp_dbl = temp;
   b4124:	f001 fa8a 	bl	b563c <__aeabi_f2d>
   b4128:	4b11      	ldr	r3, [pc, #68]	; (b4170 <loop+0x64>)
   b412a:	4606      	mov	r6, r0
   b412c:	460f      	mov	r7, r1
   b412e:	e9c3 6700 	strd	r6, r7, [r3]
humidity_dbl = humidity;
   b4132:	4620      	mov	r0, r4
   b4134:	f001 fa82 	bl	b563c <__aeabi_f2d>
   b4138:	4b0e      	ldr	r3, [pc, #56]	; (b4174 <loop+0x68>)
   b413a:	460d      	mov	r5, r1
   b413c:	4604      	mov	r4, r0
   b413e:	e9c3 4500 	strd	r4, r5, [r3]

Serial.printlnf("Temp: %f", temp);
   b4142:	f000 ff4b 	bl	b4fdc <_Z16_fetch_usbserialv>
   b4146:	4632      	mov	r2, r6
   b4148:	463b      	mov	r3, r7
   b414a:	490b      	ldr	r1, [pc, #44]	; (b4178 <loop+0x6c>)
   b414c:	f7ff ffad 	bl	b40aa <_ZN5Print8printlnfEPKcz>
Serial.printlnf("Humidity: %f", humidity);
   b4150:	f000 ff44 	bl	b4fdc <_Z16_fetch_usbserialv>
   b4154:	4622      	mov	r2, r4
   b4156:	462b      	mov	r3, r5
   b4158:	4908      	ldr	r1, [pc, #32]	; (b417c <loop+0x70>)
   b415a:	f7ff ffa6 	bl	b40aa <_ZN5Print8printlnfEPKcz>

delay(10000);
   b415e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
delay(10000);
   b4162:	f242 7010 	movw	r0, #10000	; 0x2710
   b4166:	f000 bc19 	b.w	b499c <delay>
   b416a:	bf00      	nop
   b416c:	2003e688 	.word	0x2003e688
   b4170:	2003e6a8 	.word	0x2003e6a8
   b4174:	2003e6a0 	.word	0x2003e6a0
   b4178:	000b587e 	.word	0x000b587e
   b417c:	000b5887 	.word	0x000b5887

000b4180 <_GLOBAL__sub_I_dht>:
DHT dht(D2);
   b4180:	4802      	ldr	r0, [pc, #8]	; (b418c <_GLOBAL__sub_I_dht+0xc>)
   b4182:	2206      	movs	r2, #6
   b4184:	2102      	movs	r1, #2
   b4186:	f000 b838 	b.w	b41fa <_ZN3DHTC1Ehh>
   b418a:	bf00      	nop
   b418c:	2003e688 	.word	0x2003e688

000b4190 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b4190:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4192:	6803      	ldr	r3, [r0, #0]
   b4194:	2b2f      	cmp	r3, #47	; 0x2f
{
   b4196:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b4198:	d904      	bls.n	b41a4 <nrf_gpio_pin_port_decode+0x14>
   b419a:	4a07      	ldr	r2, [pc, #28]	; (b41b8 <nrf_gpio_pin_port_decode+0x28>)
   b419c:	4907      	ldr	r1, [pc, #28]	; (b41bc <nrf_gpio_pin_port_decode+0x2c>)
   b419e:	200a      	movs	r0, #10
   b41a0:	f000 fb38 	bl	b4814 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b41a4:	6823      	ldr	r3, [r4, #0]
   b41a6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41a8:	bf83      	ittte	hi
   b41aa:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b41ae:	4804      	ldrhi	r0, [pc, #16]	; (b41c0 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41b0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b41b2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b41b6:	bd10      	pop	{r4, pc}
   b41b8:	000b4605 	.word	0x000b4605
   b41bc:	000b5894 	.word	0x000b5894
   b41c0:	50000300 	.word	0x50000300

000b41c4 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   b41c4:	b507      	push	{r0, r1, r2, lr}
   b41c6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b41c8:	a801      	add	r0, sp, #4
   b41ca:	f7ff ffe1 	bl	b4190 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b41ce:	9a01      	ldr	r2, [sp, #4]
   b41d0:	2301      	movs	r3, #1
   b41d2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b41d4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   b41d8:	b003      	add	sp, #12
   b41da:	f85d fb04 	ldr.w	pc, [sp], #4

000b41de <nrf_gpio_pin_read>:
{
   b41de:	b507      	push	{r0, r1, r2, lr}
   b41e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b41e2:	a801      	add	r0, sp, #4
   b41e4:	f7ff ffd4 	bl	b4190 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b41e8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b41ea:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b41ee:	40d8      	lsrs	r0, r3
}
   b41f0:	f000 0001 	and.w	r0, r0, #1
   b41f4:	b003      	add	sp, #12
   b41f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41fa <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   b41fa:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   b41fc:	2201      	movs	r2, #1
	_pin = pin;
   b41fe:	7181      	strb	r1, [r0, #6]
	firstreading = true;
   b4200:	7402      	strb	r2, [r0, #16]
}
   b4202:	4770      	bx	lr

000b4204 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   b4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4208:	4604      	mov	r4, r0
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b420a:	4f1c      	ldr	r7, [pc, #112]	; (b427c <_ZN3DHT5beginEv+0x78>)
// set up the pins!
	pinMode(_pin, INPUT);
   b420c:	7980      	ldrb	r0, [r0, #6]
   b420e:	4e1c      	ldr	r6, [pc, #112]	; (b4280 <_ZN3DHT5beginEv+0x7c>)
   b4210:	2100      	movs	r1, #0
   b4212:	f001 f821 	bl	b5258 <pinMode>
	pinSetFast(_pin);
   b4216:	79a5      	ldrb	r5, [r4, #6]
   b4218:	783b      	ldrb	r3, [r7, #0]
   b421a:	f3bf 8f5b 	dmb	ish
   b421e:	f013 0f01 	tst.w	r3, #1
   b4222:	d109      	bne.n	b4238 <_ZN3DHT5beginEv+0x34>
   b4224:	4638      	mov	r0, r7
   b4226:	f7ff ff38 	bl	b409a <__cxa_guard_acquire>
   b422a:	b128      	cbz	r0, b4238 <_ZN3DHT5beginEv+0x34>
   b422c:	f000 f9fa 	bl	b4624 <HAL_Pin_Map>
   b4230:	6030      	str	r0, [r6, #0]
   b4232:	4638      	mov	r0, r7
   b4234:	f7ff ff36 	bl	b40a4 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4238:	6833      	ldr	r3, [r6, #0]
   b423a:	012d      	lsls	r5, r5, #4
   b423c:	f813 8005 	ldrb.w	r8, [r3, r5]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4240:	783b      	ldrb	r3, [r7, #0]
   b4242:	f3bf 8f5b 	dmb	ish
   b4246:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4248:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b424c:	d409      	bmi.n	b4262 <_ZN3DHT5beginEv+0x5e>
   b424e:	480b      	ldr	r0, [pc, #44]	; (b427c <_ZN3DHT5beginEv+0x78>)
   b4250:	f7ff ff23 	bl	b409a <__cxa_guard_acquire>
   b4254:	b128      	cbz	r0, b4262 <_ZN3DHT5beginEv+0x5e>
   b4256:	f000 f9e5 	bl	b4624 <HAL_Pin_Map>
   b425a:	6030      	str	r0, [r6, #0]
   b425c:	4807      	ldr	r0, [pc, #28]	; (b427c <_ZN3DHT5beginEv+0x78>)
   b425e:	f7ff ff21 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4262:	6833      	ldr	r3, [r6, #0]
   b4264:	441d      	add	r5, r3
   b4266:	7868      	ldrb	r0, [r5, #1]
   b4268:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b426c:	ea40 0008 	orr.w	r0, r0, r8
   b4270:	f7ff ffa8 	bl	b41c4 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   b4274:	2300      	movs	r3, #0
   b4276:	60e3      	str	r3, [r4, #12]
}
   b4278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b427c:	2003e6b0 	.word	0x2003e6b0
   b4280:	2003e6b4 	.word	0x2003e6b4

000b4284 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   b4284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4288:	4604      	mov	r4, r0
   b428a:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b428c:	f000 f9c2 	bl	b4614 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   b4290:	68e3      	ldr	r3, [r4, #12]
   b4292:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   b4294:	bf84      	itt	hi
   b4296:	2300      	movhi	r3, #0
   b4298:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b429a:	7c23      	ldrb	r3, [r4, #16]
   b429c:	b92b      	cbnz	r3, b42aa <_ZN3DHT4readEv+0x26>
   b429e:	68e3      	ldr	r3, [r4, #12]
   b42a0:	1ac0      	subs	r0, r0, r3
   b42a2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b42a6:	f0c0 8160 	bcc.w	b456a <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b42aa:	2500      	movs	r5, #0
   b42ac:	7425      	strb	r5, [r4, #16]
   b42ae:	f000 f9b1 	bl	b4614 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42b2:	4eb0      	ldr	r6, [pc, #704]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b42b4:	6025      	str	r5, [r4, #0]
   b42b6:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   b42b8:	60e0      	str	r0, [r4, #12]

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   b42ba:	79a7      	ldrb	r7, [r4, #6]
   b42bc:	7833      	ldrb	r3, [r6, #0]
   b42be:	4dae      	ldr	r5, [pc, #696]	; (b4578 <_ZN3DHT4readEv+0x2f4>)
   b42c0:	f3bf 8f5b 	dmb	ish
   b42c4:	f013 0f01 	tst.w	r3, #1
   b42c8:	d109      	bne.n	b42de <_ZN3DHT4readEv+0x5a>
   b42ca:	4630      	mov	r0, r6
   b42cc:	f7ff fee5 	bl	b409a <__cxa_guard_acquire>
   b42d0:	b128      	cbz	r0, b42de <_ZN3DHT4readEv+0x5a>
   b42d2:	f000 f9a7 	bl	b4624 <HAL_Pin_Map>
   b42d6:	6028      	str	r0, [r5, #0]
   b42d8:	4630      	mov	r0, r6
   b42da:	f7ff fee3 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42de:	682b      	ldr	r3, [r5, #0]
   b42e0:	013f      	lsls	r7, r7, #4
   b42e2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42e6:	7833      	ldrb	r3, [r6, #0]
   b42e8:	f3bf 8f5b 	dmb	ish
   b42ec:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42ee:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42f2:	d409      	bmi.n	b4308 <_ZN3DHT4readEv+0x84>
   b42f4:	489f      	ldr	r0, [pc, #636]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b42f6:	f7ff fed0 	bl	b409a <__cxa_guard_acquire>
   b42fa:	b128      	cbz	r0, b4308 <_ZN3DHT4readEv+0x84>
   b42fc:	f000 f992 	bl	b4624 <HAL_Pin_Map>
   b4300:	6028      	str	r0, [r5, #0]
   b4302:	489c      	ldr	r0, [pc, #624]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b4304:	f7ff fece 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4308:	682b      	ldr	r3, [r5, #0]
   b430a:	443b      	add	r3, r7
   b430c:	7858      	ldrb	r0, [r3, #1]
   b430e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b4312:	ea40 0008 	orr.w	r0, r0, r8
   b4316:	f7ff ff55 	bl	b41c4 <nrf_gpio_pin_set>
	delay(250);
   b431a:	20fa      	movs	r0, #250	; 0xfa
   b431c:	f000 fb3e 	bl	b499c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   b4320:	79a0      	ldrb	r0, [r4, #6]
   b4322:	2101      	movs	r1, #1
   b4324:	f000 ff98 	bl	b5258 <pinMode>
	pinResetFast(_pin);
   b4328:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b432a:	7833      	ldrb	r3, [r6, #0]
   b432c:	f3bf 8f5b 	dmb	ish
   b4330:	07da      	lsls	r2, r3, #31
   b4332:	d409      	bmi.n	b4348 <_ZN3DHT4readEv+0xc4>
   b4334:	488f      	ldr	r0, [pc, #572]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b4336:	f7ff feb0 	bl	b409a <__cxa_guard_acquire>
   b433a:	b128      	cbz	r0, b4348 <_ZN3DHT4readEv+0xc4>
   b433c:	f000 f972 	bl	b4624 <HAL_Pin_Map>
   b4340:	6028      	str	r0, [r5, #0]
   b4342:	488c      	ldr	r0, [pc, #560]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b4344:	f7ff feae 	bl	b40a4 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4348:	682b      	ldr	r3, [r5, #0]
   b434a:	013f      	lsls	r7, r7, #4
   b434c:	5ddb      	ldrb	r3, [r3, r7]
   b434e:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4352:	7833      	ldrb	r3, [r6, #0]
   b4354:	f3bf 8f5b 	dmb	ish
   b4358:	07db      	lsls	r3, r3, #31
   b435a:	d409      	bmi.n	b4370 <_ZN3DHT4readEv+0xec>
   b435c:	4885      	ldr	r0, [pc, #532]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b435e:	f7ff fe9c 	bl	b409a <__cxa_guard_acquire>
   b4362:	b128      	cbz	r0, b4370 <_ZN3DHT4readEv+0xec>
   b4364:	f000 f95e 	bl	b4624 <HAL_Pin_Map>
   b4368:	6028      	str	r0, [r5, #0]
   b436a:	4882      	ldr	r0, [pc, #520]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b436c:	f7ff fe9a 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4370:	682b      	ldr	r3, [r5, #0]
   b4372:	443b      	add	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4374:	a803      	add	r0, sp, #12
   b4376:	785b      	ldrb	r3, [r3, #1]
   b4378:	f003 031f 	and.w	r3, r3, #31
   b437c:	ea43 0308 	orr.w	r3, r3, r8
   b4380:	9303      	str	r3, [sp, #12]
   b4382:	f7ff ff05 	bl	b4190 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b4386:	9a03      	ldr	r2, [sp, #12]
   b4388:	2301      	movs	r3, #1
   b438a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b438c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   b4390:	2014      	movs	r0, #20
   b4392:	f000 fb03 	bl	b499c <delay>
	noInterrupts();
   b4396:	f000 fb89 	bl	b4aac <_Z12noInterruptsv>
	pinSetFast(_pin);
   b439a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b439c:	7833      	ldrb	r3, [r6, #0]
   b439e:	f3bf 8f5b 	dmb	ish
   b43a2:	07d8      	lsls	r0, r3, #31
   b43a4:	d409      	bmi.n	b43ba <_ZN3DHT4readEv+0x136>
   b43a6:	4873      	ldr	r0, [pc, #460]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b43a8:	f7ff fe77 	bl	b409a <__cxa_guard_acquire>
   b43ac:	b128      	cbz	r0, b43ba <_ZN3DHT4readEv+0x136>
   b43ae:	f000 f939 	bl	b4624 <HAL_Pin_Map>
   b43b2:	6028      	str	r0, [r5, #0]
   b43b4:	486f      	ldr	r0, [pc, #444]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b43b6:	f7ff fe75 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43ba:	682b      	ldr	r3, [r5, #0]
   b43bc:	013f      	lsls	r7, r7, #4
   b43be:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43c2:	7833      	ldrb	r3, [r6, #0]
   b43c4:	f3bf 8f5b 	dmb	ish
   b43c8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43ca:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b43ce:	d409      	bmi.n	b43e4 <_ZN3DHT4readEv+0x160>
   b43d0:	4868      	ldr	r0, [pc, #416]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b43d2:	f7ff fe62 	bl	b409a <__cxa_guard_acquire>
   b43d6:	b128      	cbz	r0, b43e4 <_ZN3DHT4readEv+0x160>
   b43d8:	f000 f924 	bl	b4624 <HAL_Pin_Map>
   b43dc:	6028      	str	r0, [r5, #0]
   b43de:	4865      	ldr	r0, [pc, #404]	; (b4574 <_ZN3DHT4readEv+0x2f0>)
   b43e0:	f7ff fe60 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b43e4:	682b      	ldr	r3, [r5, #0]
   b43e6:	443b      	add	r3, r7
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   b43e8:	2700      	movs	r7, #0
   b43ea:	7858      	ldrb	r0, [r3, #1]
   b43ec:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b43f0:	ea40 0008 	orr.w	r0, r0, r8
   b43f4:	f7ff fee6 	bl	b41c4 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b43f8:	2028      	movs	r0, #40	; 0x28
   b43fa:	f000 f903 	bl	b4604 <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
   b43fe:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4400:	f8df 8170 	ldr.w	r8, [pc, #368]	; b4574 <_ZN3DHT4readEv+0x2f0>
   b4404:	2100      	movs	r1, #0
   b4406:	f000 ff27 	bl	b5258 <pinMode>
	u8 laststate = HIGH;
   b440a:	2301      	movs	r3, #1
	u8 j = 0, i;
   b440c:	46ba      	mov	sl, r7
	u8 laststate = HIGH;
   b440e:	9300      	str	r3, [sp, #0]
		counter = 0;
   b4410:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   b4414:	f894 b006 	ldrb.w	fp, [r4, #6]
   b4418:	7833      	ldrb	r3, [r6, #0]
   b441a:	f3bf 8f5b 	dmb	ish
   b441e:	07da      	lsls	r2, r3, #31
   b4420:	d409      	bmi.n	b4436 <_ZN3DHT4readEv+0x1b2>
   b4422:	4640      	mov	r0, r8
   b4424:	f7ff fe39 	bl	b409a <__cxa_guard_acquire>
   b4428:	b128      	cbz	r0, b4436 <_ZN3DHT4readEv+0x1b2>
   b442a:	f000 f8fb 	bl	b4624 <HAL_Pin_Map>
   b442e:	6028      	str	r0, [r5, #0]
   b4430:	4640      	mov	r0, r8
   b4432:	f7ff fe37 	bl	b40a4 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4436:	682b      	ldr	r3, [r5, #0]
   b4438:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b443c:	f813 300b 	ldrb.w	r3, [r3, fp]
   b4440:	015b      	lsls	r3, r3, #5
   b4442:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4444:	7833      	ldrb	r3, [r6, #0]
   b4446:	f3bf 8f5b 	dmb	ish
   b444a:	07db      	lsls	r3, r3, #31
   b444c:	d409      	bmi.n	b4462 <_ZN3DHT4readEv+0x1de>
   b444e:	4640      	mov	r0, r8
   b4450:	f7ff fe23 	bl	b409a <__cxa_guard_acquire>
   b4454:	b128      	cbz	r0, b4462 <_ZN3DHT4readEv+0x1de>
   b4456:	f000 f8e5 	bl	b4624 <HAL_Pin_Map>
   b445a:	6028      	str	r0, [r5, #0]
   b445c:	4640      	mov	r0, r8
   b445e:	f7ff fe21 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4462:	682b      	ldr	r3, [r5, #0]
   b4464:	445b      	add	r3, fp
   b4466:	f893 b001 	ldrb.w	fp, [r3, #1]
   b446a:	9b01      	ldr	r3, [sp, #4]
   b446c:	f00b 0b1f 	and.w	fp, fp, #31
   b4470:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b4474:	4658      	mov	r0, fp
   b4476:	f7ff feb2 	bl	b41de <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b447a:	4658      	mov	r0, fp
   b447c:	f7ff feaf 	bl	b41de <nrf_gpio_pin_read>
   b4480:	9b00      	ldr	r3, [sp, #0]
   b4482:	4283      	cmp	r3, r0
   b4484:	d109      	bne.n	b449a <_ZN3DHT4readEv+0x216>
			counter++;
   b4486:	f109 0901 	add.w	r9, r9, #1
   b448a:	fa5f f989 	uxtb.w	r9, r9
   b448e:	2001      	movs	r0, #1
   b4490:	f000 f8b8 	bl	b4604 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   b4494:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   b4498:	d1bc      	bne.n	b4414 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   b449a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b449e:	7833      	ldrb	r3, [r6, #0]
   b44a0:	f3bf 8f5b 	dmb	ish
   b44a4:	07d8      	lsls	r0, r3, #31
   b44a6:	d409      	bmi.n	b44bc <_ZN3DHT4readEv+0x238>
   b44a8:	4640      	mov	r0, r8
   b44aa:	f7ff fdf6 	bl	b409a <__cxa_guard_acquire>
   b44ae:	b128      	cbz	r0, b44bc <_ZN3DHT4readEv+0x238>
   b44b0:	f000 f8b8 	bl	b4624 <HAL_Pin_Map>
   b44b4:	6028      	str	r0, [r5, #0]
   b44b6:	4640      	mov	r0, r8
   b44b8:	f7ff fdf4 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b44bc:	682b      	ldr	r3, [r5, #0]
   b44be:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b44c2:	f813 300b 	ldrb.w	r3, [r3, fp]
   b44c6:	015b      	lsls	r3, r3, #5
   b44c8:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b44ca:	7833      	ldrb	r3, [r6, #0]
   b44cc:	f3bf 8f5b 	dmb	ish
   b44d0:	07d9      	lsls	r1, r3, #31
   b44d2:	d409      	bmi.n	b44e8 <_ZN3DHT4readEv+0x264>
   b44d4:	4640      	mov	r0, r8
   b44d6:	f7ff fde0 	bl	b409a <__cxa_guard_acquire>
   b44da:	b128      	cbz	r0, b44e8 <_ZN3DHT4readEv+0x264>
   b44dc:	f000 f8a2 	bl	b4624 <HAL_Pin_Map>
   b44e0:	6028      	str	r0, [r5, #0]
   b44e2:	4640      	mov	r0, r8
   b44e4:	f7ff fdde 	bl	b40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b44e8:	682b      	ldr	r3, [r5, #0]
   b44ea:	445b      	add	r3, fp
   b44ec:	f893 b001 	ldrb.w	fp, [r3, #1]
   b44f0:	9b00      	ldr	r3, [sp, #0]
   b44f2:	f00b 0b1f 	and.w	fp, fp, #31
   b44f6:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   b44fa:	4658      	mov	r0, fp
   b44fc:	f7ff fe6f 	bl	b41de <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b4500:	4658      	mov	r0, fp
   b4502:	f7ff fe6c 	bl	b41de <nrf_gpio_pin_read>

		if (counter == 255) break;
   b4506:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   b450a:	b2c3      	uxtb	r3, r0
   b450c:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   b450e:	d018      	beq.n	b4542 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   b4510:	2f03      	cmp	r7, #3
   b4512:	d911      	bls.n	b4538 <_ZN3DHT4readEv+0x2b4>
   b4514:	07fa      	lsls	r2, r7, #31
   b4516:	d40f      	bmi.n	b4538 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b4518:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b451c:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   b4520:	5ca3      	ldrb	r3, [r4, r2]
   b4522:	005b      	lsls	r3, r3, #1
   b4524:	b2db      	uxtb	r3, r3
   b4526:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b4528:	7a21      	ldrb	r1, [r4, #8]
   b452a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b452c:	bf3c      	itt	cc
   b452e:	f043 0301 	orrcc.w	r3, r3, #1
   b4532:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b4534:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   b4538:	3701      	adds	r7, #1
   b453a:	b2ff      	uxtb	r7, r7
   b453c:	2f55      	cmp	r7, #85	; 0x55
   b453e:	f47f af67 	bne.w	b4410 <_ZN3DHT4readEv+0x18c>
		}

	}

	interrupts();
   b4542:	f000 fab5 	bl	b4ab0 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   b4546:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   b454a:	d910      	bls.n	b456e <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b454c:	7863      	ldrb	r3, [r4, #1]
   b454e:	7820      	ldrb	r0, [r4, #0]
   b4550:	4418      	add	r0, r3
   b4552:	78a3      	ldrb	r3, [r4, #2]
   b4554:	4418      	add	r0, r3
   b4556:	78e3      	ldrb	r3, [r4, #3]
   b4558:	4418      	add	r0, r3
   b455a:	7923      	ldrb	r3, [r4, #4]
   b455c:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   b455e:	1ac3      	subs	r3, r0, r3
   b4560:	4258      	negs	r0, r3
   b4562:	4158      	adcs	r0, r3
		return true;
	}

	return false;

}
   b4564:	b005      	add	sp, #20
   b4566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   b456a:	2001      	movs	r0, #1
   b456c:	e7fa      	b.n	b4564 <_ZN3DHT4readEv+0x2e0>
	return false;
   b456e:	2000      	movs	r0, #0
   b4570:	e7f8      	b.n	b4564 <_ZN3DHT4readEv+0x2e0>
   b4572:	bf00      	nop
   b4574:	2003e6b0 	.word	0x2003e6b0
   b4578:	2003e6b4 	.word	0x2003e6b4

000b457c <_ZN3DHT15readTemperatureEv>:
{
   b457c:	b510      	push	{r4, lr}
   b457e:	4604      	mov	r4, r0
	if (read())
   b4580:	f7ff fe80 	bl	b4284 <_ZN3DHT4readEv>
   b4584:	b128      	cbz	r0, b4592 <_ZN3DHT15readTemperatureEv+0x16>
		f = data[2];
   b4586:	78a3      	ldrb	r3, [r4, #2]
   b4588:	ee00 3a10 	vmov	s0, r3
   b458c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b4590:	bd10      	pop	{r4, pc}
	return NAN;
   b4592:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4598 <_ZN3DHT15readTemperatureEv+0x1c>
   b4596:	e7fb      	b.n	b4590 <_ZN3DHT15readTemperatureEv+0x14>
   b4598:	7fc00000 	.word	0x7fc00000

000b459c <_ZN3DHT16getTempFarenheitEv>:
{
   b459c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   b459e:	f7ff ffed 	bl	b457c <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   b45a2:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   b45a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b45aa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   b45ae:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   b45b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; b45bc <_ZN3DHT16getTempFarenheitEv+0x20>
   b45b6:	ee37 0a00 	vadd.f32	s0, s14, s0
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	42000000 	.word	0x42000000

000b45c0 <_ZN3DHT12readHumidityEv>:
{
   b45c0:	b510      	push	{r4, lr}
   b45c2:	4604      	mov	r4, r0
	if (read())
   b45c4:	f7ff fe5e 	bl	b4284 <_ZN3DHT4readEv>
   b45c8:	b128      	cbz	r0, b45d6 <_ZN3DHT12readHumidityEv+0x16>
		f = data[0];
   b45ca:	7823      	ldrb	r3, [r4, #0]
   b45cc:	ee00 3a10 	vmov	s0, r3
   b45d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b45d4:	bd10      	pop	{r4, pc}
	return NAN;
   b45d6:	ed9f 0a01 	vldr	s0, [pc, #4]	; b45dc <_ZN3DHT12readHumidityEv+0x1c>
   b45da:	e7fb      	b.n	b45d4 <_ZN3DHT12readHumidityEv+0x14>
   b45dc:	7fc00000 	.word	0x7fc00000

000b45e0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   b45e0:	f7ff bfee 	b.w	b45c0 <_ZN3DHT12readHumidityEv>

000b45e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <os_mutex_recursive_create+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030248 	.word	0x00030248

000b45f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <HAL_RNG_GetRandomNumber+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	685b      	ldr	r3, [r3, #4]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030218 	.word	0x00030218

000b4604 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <HAL_Delay_Microseconds+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	68db      	ldr	r3, [r3, #12]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030218 	.word	0x00030218

000b4614 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	695b      	ldr	r3, [r3, #20]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030218 	.word	0x00030218

000b4624 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <HAL_Pin_Map+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	681b      	ldr	r3, [r3, #0]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003022c 	.word	0x0003022c

000b4634 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <HAL_Pin_Mode+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	689b      	ldr	r3, [r3, #8]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003022c 	.word	0x0003022c

000b4644 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_Interrupts_Enable_All+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	6a1b      	ldr	r3, [r3, #32]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003022c 	.word	0x0003022c

000b4654 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_Interrupts_Disable_All+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003022c 	.word	0x0003022c

000b4664 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <hal_i2c_write+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	6a1b      	ldr	r3, [r3, #32]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030228 	.word	0x00030228

000b4674 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <hal_i2c_available+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030228 	.word	0x00030228

000b4684 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_i2c_read+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030228 	.word	0x00030228

000b4694 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_i2c_peek+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030228 	.word	0x00030228

000b46a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_i2c_flush+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030228 	.word	0x00030228

000b46b4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <hal_i2c_is_enabled+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030228 	.word	0x00030228

000b46c4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_i2c_init+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030228 	.word	0x00030228

000b46d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <inet_inet_ntop+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	695b      	ldr	r3, [r3, #20]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030264 	.word	0x00030264

000b46e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <netdb_freeaddrinfo+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	689b      	ldr	r3, [r3, #8]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030268 	.word	0x00030268

000b46f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <netdb_getaddrinfo+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	68db      	ldr	r3, [r3, #12]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030268 	.word	0x00030268

000b4704 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_spi_init+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	69db      	ldr	r3, [r3, #28]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030230 	.word	0x00030230

000b4714 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <hal_spi_is_enabled+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6a1b      	ldr	r3, [r3, #32]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030230 	.word	0x00030230

000b4724 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <hal_usart_write+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	68db      	ldr	r3, [r3, #12]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	0003023c 	.word	0x0003023c

000b4734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_usart_available+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	691b      	ldr	r3, [r3, #16]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003023c 	.word	0x0003023c

000b4744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_usart_read+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	695b      	ldr	r3, [r3, #20]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003023c 	.word	0x0003023c

000b4754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <hal_usart_peek+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	699b      	ldr	r3, [r3, #24]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003023c 	.word	0x0003023c

000b4764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <hal_usart_flush+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	69db      	ldr	r3, [r3, #28]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003023c 	.word	0x0003023c

000b4774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <hal_usart_is_enabled+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	6a1b      	ldr	r3, [r3, #32]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003023c 	.word	0x0003023c

000b4784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_usart_available_data_for_write+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003023c 	.word	0x0003023c

000b4794 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_usart_init_ex+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003023c 	.word	0x0003023c

000b47a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <HAL_USB_USART_Init+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	681b      	ldr	r3, [r3, #0]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003024c 	.word	0x0003024c

000b47b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <HAL_USB_USART_Begin+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	685b      	ldr	r3, [r3, #4]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003024c 	.word	0x0003024c

000b47c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <HAL_USB_USART_Available_Data+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	691b      	ldr	r3, [r3, #16]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003024c 	.word	0x0003024c

000b47d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	695b      	ldr	r3, [r3, #20]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003024c 	.word	0x0003024c

000b47e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <HAL_USB_USART_Receive_Data+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	699b      	ldr	r3, [r3, #24]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003024c 	.word	0x0003024c

000b47f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <HAL_USB_USART_Send_Data+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	69db      	ldr	r3, [r3, #28]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	0003024c 	.word	0x0003024c

000b4804 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <HAL_USB_USART_Flush_Data+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a1b      	ldr	r3, [r3, #32]
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	0003024c 	.word	0x0003024c

000b4814 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <panic_+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030260 	.word	0x00030260

000b4824 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <set_system_mode+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	685b      	ldr	r3, [r3, #4]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030220 	.word	0x00030220

000b4834 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <system_delay_ms+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	695b      	ldr	r3, [r3, #20]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030220 	.word	0x00030220

000b4844 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b03      	ldr	r3, [pc, #12]	; (b4854 <system_ctrl_set_app_request_handler+0x10>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b484e:	9301      	str	r3, [sp, #4]
   b4850:	bd08      	pop	{r3, pc}
   b4852:	0000      	.short	0x0000
   b4854:	00030220 	.word	0x00030220

000b4858 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b03      	ldr	r3, [pc, #12]	; (b4868 <system_ctrl_set_result+0x10>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4862:	9301      	str	r3, [sp, #4]
   b4864:	bd08      	pop	{r3, pc}
   b4866:	0000      	.short	0x0000
   b4868:	00030220 	.word	0x00030220

000b486c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <spark_variable+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	681b      	ldr	r3, [r3, #0]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	00030244 	.word	0x00030244

000b487c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	00030244 	.word	0x00030244

000b488c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <network_connect+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	685b      	ldr	r3, [r3, #4]
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	00030240 	.word	0x00030240

000b489c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <network_connecting+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	689b      	ldr	r3, [r3, #8]
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	00030240 	.word	0x00030240

000b48ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <network_disconnect+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	68db      	ldr	r3, [r3, #12]
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	00030240 	.word	0x00030240

000b48bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <network_ready+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	691b      	ldr	r3, [r3, #16]
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	00030240 	.word	0x00030240

000b48cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <network_on+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	695b      	ldr	r3, [r3, #20]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	00030240 	.word	0x00030240

000b48dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <network_off+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	699b      	ldr	r3, [r3, #24]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	00030240 	.word	0x00030240

000b48ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <network_listen+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	69db      	ldr	r3, [r3, #28]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	00030240 	.word	0x00030240

000b48fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <network_listening+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	6a1b      	ldr	r3, [r3, #32]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	00030240 	.word	0x00030240

000b490c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <network_set_listen_timeout+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	00030240 	.word	0x00030240

000b491c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <network_get_listen_timeout+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030240 	.word	0x00030240

000b492c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <network_is_on+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030240 	.word	0x00030240

000b493c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <network_is_off+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030240 	.word	0x00030240

000b494c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <malloc+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	681b      	ldr	r3, [r3, #0]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	0003021c 	.word	0x0003021c

000b495c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <free+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	685b      	ldr	r3, [r3, #4]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	0003021c 	.word	0x0003021c

000b496c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <vsnprintf+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	0003021c 	.word	0x0003021c

000b497c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <__assert_func+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	0003021c 	.word	0x0003021c

000b498c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <newlib_impure_ptr_callback+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	0003021c 	.word	0x0003021c

000b499c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b499c:	2100      	movs	r1, #0
   b499e:	f7ff bf49 	b.w	b4834 <system_delay_ms>
	...

000b49a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b49a4:	4802      	ldr	r0, [pc, #8]	; (b49b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b49a6:	2300      	movs	r3, #0
   b49a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b49aa:	f7ff be1b 	b.w	b45e4 <os_mutex_recursive_create>
   b49ae:	bf00      	nop
   b49b0:	2003e6b8 	.word	0x2003e6b8

000b49b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49b4:	2200      	movs	r2, #0
   b49b6:	6840      	ldr	r0, [r0, #4]
   b49b8:	4611      	mov	r1, r2
   b49ba:	f7ff bf9f 	b.w	b48fc <network_listening>

000b49be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b49be:	2200      	movs	r2, #0
   b49c0:	6840      	ldr	r0, [r0, #4]
   b49c2:	4611      	mov	r1, r2
   b49c4:	f7ff bfaa 	b.w	b491c <network_get_listen_timeout>

000b49c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b49c8:	6840      	ldr	r0, [r0, #4]
   b49ca:	2200      	movs	r2, #0
   b49cc:	f7ff bf9e 	b.w	b490c <network_set_listen_timeout>

000b49d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b49d0:	6840      	ldr	r0, [r0, #4]
   b49d2:	2200      	movs	r2, #0
   b49d4:	f081 0101 	eor.w	r1, r1, #1
   b49d8:	f7ff bf88 	b.w	b48ec <network_listen>

000b49dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b49dc:	2300      	movs	r3, #0
   b49de:	6840      	ldr	r0, [r0, #4]
   b49e0:	461a      	mov	r2, r3
   b49e2:	4619      	mov	r1, r3
   b49e4:	f7ff bf7a 	b.w	b48dc <network_off>

000b49e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b49e8:	2300      	movs	r3, #0
   b49ea:	6840      	ldr	r0, [r0, #4]
   b49ec:	461a      	mov	r2, r3
   b49ee:	4619      	mov	r1, r3
   b49f0:	f7ff bf6c 	b.w	b48cc <network_on>

000b49f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b49f4:	2200      	movs	r2, #0
   b49f6:	6840      	ldr	r0, [r0, #4]
   b49f8:	4611      	mov	r1, r2
   b49fa:	f7ff bf5f 	b.w	b48bc <network_ready>

000b49fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b49fe:	2200      	movs	r2, #0
   b4a00:	6840      	ldr	r0, [r0, #4]
   b4a02:	4611      	mov	r1, r2
   b4a04:	f7ff bf4a 	b.w	b489c <network_connecting>

000b4a08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a08:	6840      	ldr	r0, [r0, #4]
   b4a0a:	2200      	movs	r2, #0
   b4a0c:	2102      	movs	r1, #2
   b4a0e:	f7ff bf4d 	b.w	b48ac <network_disconnect>

000b4a12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a12:	2300      	movs	r3, #0
   b4a14:	6840      	ldr	r0, [r0, #4]
   b4a16:	461a      	mov	r2, r3
   b4a18:	f7ff bf38 	b.w	b488c <network_connect>

000b4a1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a1c:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a1e:	2203      	movs	r2, #3
   b4a20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a22:	4a02      	ldr	r2, [pc, #8]	; (b4a2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a26:	4770      	bx	lr
   b4a28:	2003e6bc 	.word	0x2003e6bc
   b4a2c:	000b58c0 	.word	0x000b58c0

000b4a30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4a30:	4770      	bx	lr

000b4a32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a34:	4606      	mov	r6, r0
   b4a36:	4615      	mov	r5, r2
   b4a38:	460c      	mov	r4, r1
   b4a3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4a3c:	42bc      	cmp	r4, r7
   b4a3e:	d006      	beq.n	b4a4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4a40:	6833      	ldr	r3, [r6, #0]
   b4a42:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a46:	689b      	ldr	r3, [r3, #8]
   b4a48:	4630      	mov	r0, r6
   b4a4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4a4c:	e7f6      	b.n	b4a3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4a4e:	4628      	mov	r0, r5
   b4a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4a52:	7c00      	ldrb	r0, [r0, #16]
   b4a54:	2200      	movs	r2, #0
   b4a56:	f7ff be05 	b.w	b4664 <hal_i2c_write>

000b4a5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4a5a:	7c00      	ldrb	r0, [r0, #16]
   b4a5c:	2100      	movs	r1, #0
   b4a5e:	f7ff be09 	b.w	b4674 <hal_i2c_available>

000b4a62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4a62:	7c00      	ldrb	r0, [r0, #16]
   b4a64:	2100      	movs	r1, #0
   b4a66:	f7ff be0d 	b.w	b4684 <hal_i2c_read>

000b4a6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4a6a:	7c00      	ldrb	r0, [r0, #16]
   b4a6c:	2100      	movs	r1, #0
   b4a6e:	f7ff be11 	b.w	b4694 <hal_i2c_peek>

000b4a72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4a72:	7c00      	ldrb	r0, [r0, #16]
   b4a74:	2100      	movs	r1, #0
   b4a76:	f7ff be15 	b.w	b46a4 <hal_i2c_flush>

000b4a7a <_ZN7TwoWireD0Ev>:
   b4a7a:	b510      	push	{r4, lr}
   b4a7c:	2114      	movs	r1, #20
   b4a7e:	4604      	mov	r4, r0
   b4a80:	f7ff fb09 	bl	b4096 <_ZdlPvj>
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd10      	pop	{r4, pc}

000b4a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4a88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a8e:	4604      	mov	r4, r0
   b4a90:	4608      	mov	r0, r1
   b4a92:	2100      	movs	r1, #0
   b4a94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4a98:	4b03      	ldr	r3, [pc, #12]	; (b4aa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4a9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4a9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4a9e:	4611      	mov	r1, r2
   b4aa0:	f7ff fe10 	bl	b46c4 <hal_i2c_init>
}
   b4aa4:	4620      	mov	r0, r4
   b4aa6:	bd10      	pop	{r4, pc}
   b4aa8:	000b58fc 	.word	0x000b58fc

000b4aac <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b4aac:	f7ff bdd2 	b.w	b4654 <HAL_Interrupts_Disable_All>

000b4ab0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b4ab0:	f7ff bdc8 	b.w	b4644 <HAL_Interrupts_Enable_All>

000b4ab4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4ab4:	4770      	bx	lr

000b4ab6 <_ZN9IPAddressD0Ev>:
   b4ab6:	b510      	push	{r4, lr}
   b4ab8:	2118      	movs	r1, #24
   b4aba:	4604      	mov	r4, r0
   b4abc:	f7ff faeb 	bl	b4096 <_ZdlPvj>
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	bd10      	pop	{r4, pc}

000b4ac4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ac6:	7d03      	ldrb	r3, [r0, #20]
   b4ac8:	2b06      	cmp	r3, #6
{
   b4aca:	b08d      	sub	sp, #52	; 0x34
   b4acc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ace:	f100 0704 	add.w	r7, r0, #4
   b4ad2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4ad6:	d012      	beq.n	b4afe <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ad8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4adc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ae0:	220a      	movs	r2, #10
   b4ae2:	4630      	mov	r0, r6
   b4ae4:	f000 f94f 	bl	b4d86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4ae8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4aea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4aec:	d019      	beq.n	b4b22 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4aee:	2c00      	cmp	r4, #0
   b4af0:	d0f4      	beq.n	b4adc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4af2:	212e      	movs	r1, #46	; 0x2e
   b4af4:	4630      	mov	r0, r6
   b4af6:	f000 f937 	bl	b4d68 <_ZN5Print5printEc>
   b4afa:	4404      	add	r4, r0
   b4afc:	e7ee      	b.n	b4adc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4afe:	232f      	movs	r3, #47	; 0x2f
   b4b00:	466a      	mov	r2, sp
   b4b02:	4639      	mov	r1, r7
   b4b04:	200a      	movs	r0, #10
		buf[0] = 0;
   b4b06:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b0a:	f7ff fde3 	bl	b46d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4b0e:	4668      	mov	r0, sp
   b4b10:	f000 fe36 	bl	b5780 <strlen>
   b4b14:	6833      	ldr	r3, [r6, #0]
   b4b16:	4602      	mov	r2, r0
   b4b18:	68db      	ldr	r3, [r3, #12]
   b4b1a:	4669      	mov	r1, sp
   b4b1c:	4630      	mov	r0, r6
   b4b1e:	4798      	blx	r3
   b4b20:	4604      	mov	r4, r0
    }
    return n;
}
   b4b22:	4620      	mov	r0, r4
   b4b24:	b00d      	add	sp, #52	; 0x34
   b4b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4b28 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4b28:	b510      	push	{r4, lr}
   b4b2a:	4b05      	ldr	r3, [pc, #20]	; (b4b40 <_ZN9IPAddressC1Ev+0x18>)
   b4b2c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4b2e:	2211      	movs	r2, #17
   b4b30:	f840 3b04 	str.w	r3, [r0], #4
   b4b34:	2100      	movs	r1, #0
   b4b36:	f000 fded 	bl	b5714 <memset>
}
   b4b3a:	4620      	mov	r0, r4
   b4b3c:	bd10      	pop	{r4, pc}
   b4b3e:	bf00      	nop
   b4b40:	000b5924 	.word	0x000b5924

000b4b44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4b44:	4603      	mov	r3, r0
   b4b46:	4a07      	ldr	r2, [pc, #28]	; (b4b64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4b48:	b510      	push	{r4, lr}
   b4b4a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4b4e:	f101 0210 	add.w	r2, r1, #16
   b4b52:	f851 4b04 	ldr.w	r4, [r1], #4
   b4b56:	f843 4b04 	str.w	r4, [r3], #4
   b4b5a:	4291      	cmp	r1, r2
   b4b5c:	d1f9      	bne.n	b4b52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4b5e:	780a      	ldrb	r2, [r1, #0]
   b4b60:	701a      	strb	r2, [r3, #0]
}
   b4b62:	bd10      	pop	{r4, pc}
   b4b64:	000b5924 	.word	0x000b5924

000b4b68 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4b68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4b6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4b6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4b72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4b76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4b7a:	2304      	movs	r3, #4
   b4b7c:	6041      	str	r1, [r0, #4]
   b4b7e:	7503      	strb	r3, [r0, #20]
}
   b4b80:	bd10      	pop	{r4, pc}
	...

000b4b84 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4b84:	b507      	push	{r0, r1, r2, lr}
   b4b86:	4b06      	ldr	r3, [pc, #24]	; (b4ba0 <_ZN9IPAddressC1EPKh+0x1c>)
   b4b88:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4b8a:	78cb      	ldrb	r3, [r1, #3]
   b4b8c:	9300      	str	r3, [sp, #0]
   b4b8e:	788b      	ldrb	r3, [r1, #2]
   b4b90:	784a      	ldrb	r2, [r1, #1]
   b4b92:	7809      	ldrb	r1, [r1, #0]
   b4b94:	f7ff ffe8 	bl	b4b68 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4b98:	b003      	add	sp, #12
   b4b9a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b9e:	bf00      	nop
   b4ba0:	000b5924 	.word	0x000b5924

000b4ba4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ba4:	4b01      	ldr	r3, [pc, #4]	; (b4bac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ba6:	4a02      	ldr	r2, [pc, #8]	; (b4bb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ba8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4baa:	4770      	bx	lr
   b4bac:	2003e6c4 	.word	0x2003e6c4
   b4bb0:	000b5930 	.word	0x000b5930

000b4bb4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4bb4:	2300      	movs	r3, #0
   b4bb6:	6840      	ldr	r0, [r0, #4]
   b4bb8:	461a      	mov	r2, r3
   b4bba:	f7ff be67 	b.w	b488c <network_connect>

000b4bbe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4bbe:	6840      	ldr	r0, [r0, #4]
   b4bc0:	2200      	movs	r2, #0
   b4bc2:	2102      	movs	r1, #2
   b4bc4:	f7ff be72 	b.w	b48ac <network_disconnect>

000b4bc8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4bc8:	2200      	movs	r2, #0
   b4bca:	6840      	ldr	r0, [r0, #4]
   b4bcc:	4611      	mov	r1, r2
   b4bce:	f7ff be65 	b.w	b489c <network_connecting>

000b4bd2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4bd2:	2200      	movs	r2, #0
   b4bd4:	6840      	ldr	r0, [r0, #4]
   b4bd6:	4611      	mov	r1, r2
   b4bd8:	f7ff be70 	b.w	b48bc <network_ready>

000b4bdc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4bdc:	2300      	movs	r3, #0
   b4bde:	6840      	ldr	r0, [r0, #4]
   b4be0:	461a      	mov	r2, r3
   b4be2:	4619      	mov	r1, r3
   b4be4:	f7ff be72 	b.w	b48cc <network_on>

000b4be8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4be8:	2300      	movs	r3, #0
   b4bea:	6840      	ldr	r0, [r0, #4]
   b4bec:	461a      	mov	r2, r3
   b4bee:	4619      	mov	r1, r3
   b4bf0:	f7ff be74 	b.w	b48dc <network_off>

000b4bf4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4bf4:	6840      	ldr	r0, [r0, #4]
   b4bf6:	2100      	movs	r1, #0
   b4bf8:	f7ff be98 	b.w	b492c <network_is_on>

000b4bfc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4bfc:	6840      	ldr	r0, [r0, #4]
   b4bfe:	2100      	movs	r1, #0
   b4c00:	f7ff be9c 	b.w	b493c <network_is_off>

000b4c04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4c04:	6840      	ldr	r0, [r0, #4]
   b4c06:	2200      	movs	r2, #0
   b4c08:	f081 0101 	eor.w	r1, r1, #1
   b4c0c:	f7ff be6e 	b.w	b48ec <network_listen>

000b4c10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4c10:	6840      	ldr	r0, [r0, #4]
   b4c12:	2200      	movs	r2, #0
   b4c14:	f7ff be7a 	b.w	b490c <network_set_listen_timeout>

000b4c18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4c18:	2200      	movs	r2, #0
   b4c1a:	6840      	ldr	r0, [r0, #4]
   b4c1c:	4611      	mov	r1, r2
   b4c1e:	f7ff be7d 	b.w	b491c <network_get_listen_timeout>

000b4c22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4c22:	2200      	movs	r2, #0
   b4c24:	6840      	ldr	r0, [r0, #4]
   b4c26:	4611      	mov	r1, r2
   b4c28:	f7ff be68 	b.w	b48fc <network_listening>

000b4c2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c30:	b095      	sub	sp, #84	; 0x54
   b4c32:	4614      	mov	r4, r2
   b4c34:	460d      	mov	r5, r1
   b4c36:	4607      	mov	r7, r0
    IPAddress addr;
   b4c38:	f7ff ff76 	bl	b4b28 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4c3c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4c3e:	221c      	movs	r2, #28
   b4c40:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4c42:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4c44:	f000 fd66 	bl	b5714 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4c48:	2340      	movs	r3, #64	; 0x40
   b4c4a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	466b      	mov	r3, sp
   b4c50:	aa0c      	add	r2, sp, #48	; 0x30
   b4c52:	2100      	movs	r1, #0
   b4c54:	f7ff fd4e 	bl	b46f4 <netdb_getaddrinfo>
    if (!r) {
   b4c58:	4604      	mov	r4, r0
   b4c5a:	2800      	cmp	r0, #0
   b4c5c:	d14b      	bne.n	b4cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c5e:	4602      	mov	r2, r0
   b4c60:	2101      	movs	r1, #1
   b4c62:	6868      	ldr	r0, [r5, #4]
   b4c64:	f7ff fe2a 	bl	b48bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c68:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c6a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c6c:	4622      	mov	r2, r4
   b4c6e:	6868      	ldr	r0, [r5, #4]
   b4c70:	f7ff fe24 	bl	b48bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c74:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c76:	4681      	mov	r9, r0
        bool ok = false;
   b4c78:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c7a:	2e00      	cmp	r6, #0
   b4c7c:	d03b      	beq.n	b4cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4c7e:	2900      	cmp	r1, #0
   b4c80:	d139      	bne.n	b4cf6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4c82:	6873      	ldr	r3, [r6, #4]
   b4c84:	2b02      	cmp	r3, #2
   b4c86:	d003      	beq.n	b4c90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4c88:	2b0a      	cmp	r3, #10
   b4c8a:	d011      	beq.n	b4cb0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c8c:	69f6      	ldr	r6, [r6, #28]
   b4c8e:	e7f4      	b.n	b4c7a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4c90:	f1b8 0f00 	cmp.w	r8, #0
   b4c94:	d0fa      	beq.n	b4c8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4c96:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4c98:	a806      	add	r0, sp, #24
   b4c9a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4c9c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4c9e:	f7ff ff71 	bl	b4b84 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ca4:	1d3c      	adds	r4, r7, #4
   b4ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4ca8:	682b      	ldr	r3, [r5, #0]
   b4caa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cac:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4cae:	e7ed      	b.n	b4c8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4cb0:	f1b9 0f00 	cmp.w	r9, #0
   b4cb4:	d0ea      	beq.n	b4c8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4cb6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4cb8:	2210      	movs	r2, #16
   b4cba:	a801      	add	r0, sp, #4
   b4cbc:	f000 fd2a 	bl	b5714 <memset>
                    a.v = 6;
   b4cc0:	2306      	movs	r3, #6
   b4cc2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4cc6:	ad01      	add	r5, sp, #4
   b4cc8:	f104 0308 	add.w	r3, r4, #8
   b4ccc:	3418      	adds	r4, #24
   b4cce:	6818      	ldr	r0, [r3, #0]
   b4cd0:	6859      	ldr	r1, [r3, #4]
   b4cd2:	462a      	mov	r2, r5
   b4cd4:	c203      	stmia	r2!, {r0, r1}
   b4cd6:	3308      	adds	r3, #8
   b4cd8:	42a3      	cmp	r3, r4
   b4cda:	4615      	mov	r5, r2
   b4cdc:	d1f7      	bne.n	b4cce <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4cde:	a901      	add	r1, sp, #4
   b4ce0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ce2:	ad07      	add	r5, sp, #28
   b4ce4:	f7ff ff2e 	bl	b4b44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cea:	1d3c      	adds	r4, r7, #4
   b4cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4cee:	682b      	ldr	r3, [r5, #0]
   b4cf0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cf2:	4649      	mov	r1, r9
   b4cf4:	e7ca      	b.n	b4c8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4cf6:	9800      	ldr	r0, [sp, #0]
   b4cf8:	f7ff fcf4 	bl	b46e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4cfc:	4638      	mov	r0, r7
   b4cfe:	b015      	add	sp, #84	; 0x54
   b4d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4d04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4d04:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4d06:	4a03      	ldr	r2, [pc, #12]	; (b4d14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4d08:	601a      	str	r2, [r3, #0]
   b4d0a:	2200      	movs	r2, #0
   b4d0c:	605a      	str	r2, [r3, #4]

} // spark
   b4d0e:	4770      	bx	lr
   b4d10:	2003e6c8 	.word	0x2003e6c8
   b4d14:	000b593c 	.word	0x000b593c

000b4d18 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d1a:	4606      	mov	r6, r0
   b4d1c:	460d      	mov	r5, r1
  size_t n = 0;
   b4d1e:	188f      	adds	r7, r1, r2
   b4d20:	2400      	movs	r4, #0
  while (size--) {
   b4d22:	42bd      	cmp	r5, r7
   b4d24:	d00c      	beq.n	b4d40 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d26:	6833      	ldr	r3, [r6, #0]
   b4d28:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d2c:	689b      	ldr	r3, [r3, #8]
   b4d2e:	4630      	mov	r0, r6
   b4d30:	4798      	blx	r3
     if (chunk>=0)
   b4d32:	1e03      	subs	r3, r0, #0
   b4d34:	db01      	blt.n	b4d3a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4d36:	441c      	add	r4, r3
  while (size--) {
   b4d38:	e7f3      	b.n	b4d22 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4d3a:	2c00      	cmp	r4, #0
   b4d3c:	bf08      	it	eq
   b4d3e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4d40:	4620      	mov	r0, r4
   b4d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d44 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4d44:	b513      	push	{r0, r1, r4, lr}
   b4d46:	4604      	mov	r4, r0
    }
   b4d48:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4d4a:	b159      	cbz	r1, b4d64 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4d4c:	9101      	str	r1, [sp, #4]
   b4d4e:	f000 fd17 	bl	b5780 <strlen>
   b4d52:	6823      	ldr	r3, [r4, #0]
   b4d54:	9901      	ldr	r1, [sp, #4]
   b4d56:	68db      	ldr	r3, [r3, #12]
   b4d58:	4602      	mov	r2, r0
   b4d5a:	4620      	mov	r0, r4
    }
   b4d5c:	b002      	add	sp, #8
   b4d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4d62:	4718      	bx	r3
    }
   b4d64:	b002      	add	sp, #8
   b4d66:	bd10      	pop	{r4, pc}

000b4d68 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4d68:	6803      	ldr	r3, [r0, #0]
   b4d6a:	689b      	ldr	r3, [r3, #8]
   b4d6c:	4718      	bx	r3

000b4d6e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4d6e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4d70:	210d      	movs	r1, #13
{
   b4d72:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4d74:	f7ff fff8 	bl	b4d68 <_ZN5Print5printEc>
  n += print('\n');
   b4d78:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4d7a:	4604      	mov	r4, r0
  n += print('\n');
   b4d7c:	4628      	mov	r0, r5
   b4d7e:	f7ff fff3 	bl	b4d68 <_ZN5Print5printEc>
  return n;
}
   b4d82:	4420      	add	r0, r4
   b4d84:	bd38      	pop	{r3, r4, r5, pc}

000b4d86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4d86:	b530      	push	{r4, r5, lr}
   b4d88:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4d8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4d8c:	2a01      	cmp	r2, #1
  *str = '\0';
   b4d8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4d92:	bf98      	it	ls
   b4d94:	220a      	movls	r2, #10
   b4d96:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4d98:	460d      	mov	r5, r1
   b4d9a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4d9e:	fb01 5312 	mls	r3, r1, r2, r5
   b4da2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4da6:	2b09      	cmp	r3, #9
   b4da8:	bf94      	ite	ls
   b4daa:	3330      	addls	r3, #48	; 0x30
   b4dac:	3337      	addhi	r3, #55	; 0x37
   b4dae:	b2db      	uxtb	r3, r3
  } while(n);
   b4db0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4db2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4db6:	d9ef      	bls.n	b4d98 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4db8:	4621      	mov	r1, r4
   b4dba:	f7ff ffc3 	bl	b4d44 <_ZN5Print5writeEPKc>
}
   b4dbe:	b00b      	add	sp, #44	; 0x2c
   b4dc0:	bd30      	pop	{r4, r5, pc}

000b4dc2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4dc6:	b086      	sub	sp, #24
   b4dc8:	af00      	add	r7, sp, #0
   b4dca:	4605      	mov	r5, r0
   b4dcc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4dce:	1d38      	adds	r0, r7, #4
   b4dd0:	2114      	movs	r1, #20
{
   b4dd2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4dd4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4dd6:	f7ff fdc9 	bl	b496c <vsnprintf>

    if (n<bufsize)
   b4dda:	2813      	cmp	r0, #19
   b4ddc:	d80e      	bhi.n	b4dfc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4dde:	1d39      	adds	r1, r7, #4
   b4de0:	4628      	mov	r0, r5
   b4de2:	f7ff ffaf 	bl	b4d44 <_ZN5Print5writeEPKc>
   b4de6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4de8:	b11e      	cbz	r6, b4df2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4dea:	4628      	mov	r0, r5
   b4dec:	f7ff ffbf 	bl	b4d6e <_ZN5Print7printlnEv>
   b4df0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	3718      	adds	r7, #24
   b4df6:	46bd      	mov	sp, r7
   b4df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4dfc:	f100 0308 	add.w	r3, r0, #8
   b4e00:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4e04:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4e06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4e0a:	4622      	mov	r2, r4
   b4e0c:	1c41      	adds	r1, r0, #1
   b4e0e:	683b      	ldr	r3, [r7, #0]
   b4e10:	4668      	mov	r0, sp
   b4e12:	f7ff fdab 	bl	b496c <vsnprintf>
  return write(str);
   b4e16:	4669      	mov	r1, sp
   b4e18:	4628      	mov	r0, r5
   b4e1a:	f7ff ff93 	bl	b4d44 <_ZN5Print5writeEPKc>
   b4e1e:	4604      	mov	r4, r0
   b4e20:	46c5      	mov	sp, r8
   b4e22:	e7e1      	b.n	b4de8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4e24 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4e24:	4b01      	ldr	r3, [pc, #4]	; (b4e2c <_GLOBAL__sub_I_RGB+0x8>)
   b4e26:	2200      	movs	r2, #0
   b4e28:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4e2a:	4770      	bx	lr
   b4e2c:	2003e6d0 	.word	0x2003e6d0

000b4e30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e30:	b510      	push	{r4, lr}
   b4e32:	4604      	mov	r4, r0
   b4e34:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e38:	f7ff fc64 	bl	b4704 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6063      	str	r3, [r4, #4]
}
   b4e40:	4620      	mov	r0, r4
   b4e42:	bd10      	pop	{r4, pc}

000b4e44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e44:	4b05      	ldr	r3, [pc, #20]	; (b4e5c <_GLOBAL__sub_I_System+0x18>)
   b4e46:	2202      	movs	r2, #2
   b4e48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e4a:	4b05      	ldr	r3, [pc, #20]	; (b4e60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e4c:	4a05      	ldr	r2, [pc, #20]	; (b4e64 <_GLOBAL__sub_I_System+0x20>)
   b4e4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e50:	2000      	movs	r0, #0
   b4e52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e56:	f7ff bce5 	b.w	b4824 <set_system_mode>
   b4e5a:	bf00      	nop
   b4e5c:	2003e6ec 	.word	0x2003e6ec
   b4e60:	2003e6e0 	.word	0x2003e6e0
   b4e64:	ffff0000 	.word	0xffff0000

000b4e68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e68:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e6a:	681a      	ldr	r2, [r3, #0]
   b4e6c:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e70:	4770      	bx	lr
   b4e72:	bf00      	nop
   b4e74:	2003e61c 	.word	0x2003e61c
   b4e78:	2003e6f0 	.word	0x2003e6f0

000b4e7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4e7c:	4770      	bx	lr

000b4e7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e7e:	7441      	strb	r1, [r0, #17]
}
   b4e80:	4770      	bx	lr

000b4e82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4e82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4e84:	7c00      	ldrb	r0, [r0, #16]
   b4e86:	f7ff fc7d 	bl	b4784 <hal_usart_available_data_for_write>
}
   b4e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e8e:	bd08      	pop	{r3, pc}

000b4e90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4e90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4e92:	7c00      	ldrb	r0, [r0, #16]
   b4e94:	f7ff fc4e 	bl	b4734 <hal_usart_available>
}
   b4e98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e9c:	bd08      	pop	{r3, pc}

000b4e9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4e9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4ea0:	7c00      	ldrb	r0, [r0, #16]
   b4ea2:	f7ff fc57 	bl	b4754 <hal_usart_peek>
}
   b4ea6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eaa:	bd08      	pop	{r3, pc}

000b4eac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4eac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4eae:	7c00      	ldrb	r0, [r0, #16]
   b4eb0:	f7ff fc48 	bl	b4744 <hal_usart_read>
}
   b4eb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eb8:	bd08      	pop	{r3, pc}

000b4eba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4eba:	7c00      	ldrb	r0, [r0, #16]
   b4ebc:	f7ff bc52 	b.w	b4764 <hal_usart_flush>

000b4ec0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ec2:	7c45      	ldrb	r5, [r0, #17]
{
   b4ec4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ec6:	b12d      	cbz	r5, b4ed4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4ec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4eca:	b003      	add	sp, #12
   b4ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4ed0:	f7ff bc28 	b.w	b4724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ed4:	7c00      	ldrb	r0, [r0, #16]
   b4ed6:	9101      	str	r1, [sp, #4]
   b4ed8:	f7ff fc54 	bl	b4784 <hal_usart_available_data_for_write>
   b4edc:	2800      	cmp	r0, #0
   b4ede:	9901      	ldr	r1, [sp, #4]
   b4ee0:	dcf2      	bgt.n	b4ec8 <_ZN11USARTSerial5writeEh+0x8>
}
   b4ee2:	4628      	mov	r0, r5
   b4ee4:	b003      	add	sp, #12
   b4ee6:	bd30      	pop	{r4, r5, pc}

000b4ee8 <_ZN11USARTSerialD0Ev>:
   b4ee8:	b510      	push	{r4, lr}
   b4eea:	2114      	movs	r1, #20
   b4eec:	4604      	mov	r4, r0
   b4eee:	f7ff f8d2 	bl	b4096 <_ZdlPvj>
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	bd10      	pop	{r4, pc}
	...

000b4ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4ef8:	b510      	push	{r4, lr}
   b4efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4efe:	4604      	mov	r4, r0
   b4f00:	4608      	mov	r0, r1
   b4f02:	4611      	mov	r1, r2
   b4f04:	2200      	movs	r2, #0
   b4f06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4f0a:	4b04      	ldr	r3, [pc, #16]	; (b4f1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4f0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f0e:	2301      	movs	r3, #1
  _serial = serial;
   b4f10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4f14:	f7ff fc3e 	bl	b4794 <hal_usart_init_ex>
}
   b4f18:	4620      	mov	r0, r4
   b4f1a:	bd10      	pop	{r4, pc}
   b4f1c:	000b5994 	.word	0x000b5994

000b4f20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f20:	7441      	strb	r1, [r0, #17]
}
   b4f22:	4770      	bx	lr

000b4f24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f24:	4770      	bx	lr

000b4f26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f26:	4770      	bx	lr

000b4f28 <_ZN9USBSerial4readEv>:
{
   b4f28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f2a:	2100      	movs	r1, #0
   b4f2c:	7c00      	ldrb	r0, [r0, #16]
   b4f2e:	f7ff fc59 	bl	b47e4 <HAL_USB_USART_Receive_Data>
}
   b4f32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f36:	bd08      	pop	{r3, pc}

000b4f38 <_ZN9USBSerial4peekEv>:
{
   b4f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f3a:	2101      	movs	r1, #1
   b4f3c:	7c00      	ldrb	r0, [r0, #16]
   b4f3e:	f7ff fc51 	bl	b47e4 <HAL_USB_USART_Receive_Data>
}
   b4f42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f46:	bd08      	pop	{r3, pc}

000b4f48 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f4a:	7c00      	ldrb	r0, [r0, #16]
   b4f4c:	f7ff fc42 	bl	b47d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f54:	bd08      	pop	{r3, pc}

000b4f56 <_ZN9USBSerial9availableEv>:
{
   b4f56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f58:	7c00      	ldrb	r0, [r0, #16]
   b4f5a:	f7ff fc33 	bl	b47c4 <HAL_USB_USART_Available_Data>
}
   b4f5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f62:	bd08      	pop	{r3, pc}

000b4f64 <_ZN9USBSerial5writeEh>:
{
   b4f64:	b513      	push	{r0, r1, r4, lr}
   b4f66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f68:	7c00      	ldrb	r0, [r0, #16]
{
   b4f6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f6c:	f7ff fc32 	bl	b47d4 <HAL_USB_USART_Available_Data_For_Write>
   b4f70:	2800      	cmp	r0, #0
   b4f72:	9901      	ldr	r1, [sp, #4]
   b4f74:	dc01      	bgt.n	b4f7a <_ZN9USBSerial5writeEh+0x16>
   b4f76:	7c60      	ldrb	r0, [r4, #17]
   b4f78:	b120      	cbz	r0, b4f84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f7a:	7c20      	ldrb	r0, [r4, #16]
   b4f7c:	f7ff fc3a 	bl	b47f4 <HAL_USB_USART_Send_Data>
   b4f80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f84:	b002      	add	sp, #8
   b4f86:	bd10      	pop	{r4, pc}

000b4f88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f88:	7c00      	ldrb	r0, [r0, #16]
   b4f8a:	f7ff bc3b 	b.w	b4804 <HAL_USB_USART_Flush_Data>

000b4f8e <_ZN9USBSerialD0Ev>:
   b4f8e:	b510      	push	{r4, lr}
   b4f90:	2114      	movs	r1, #20
   b4f92:	4604      	mov	r4, r0
   b4f94:	f7ff f87f 	bl	b4096 <_ZdlPvj>
   b4f98:	4620      	mov	r0, r4
   b4f9a:	bd10      	pop	{r4, pc}

000b4f9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4f9c:	b510      	push	{r4, lr}
   b4f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fa2:	4604      	mov	r4, r0
   b4fa4:	4608      	mov	r0, r1
   b4fa6:	2100      	movs	r1, #0
   b4fa8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fac:	4b04      	ldr	r3, [pc, #16]	; (b4fc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4fae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fb0:	2301      	movs	r3, #1
  _serial = serial;
   b4fb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4fb6:	4611      	mov	r1, r2
   b4fb8:	f7ff fbf4 	bl	b47a4 <HAL_USB_USART_Init>
}
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	bd10      	pop	{r4, pc}
   b4fc0:	000b59c4 	.word	0x000b59c4

000b4fc4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4fc4:	7c00      	ldrb	r0, [r0, #16]
   b4fc6:	2200      	movs	r2, #0
   b4fc8:	f7ff bbf4 	b.w	b47b4 <HAL_USB_USART_Begin>

000b4fcc <_Z19acquireSerialBufferv>:
{
   b4fcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4fce:	2214      	movs	r2, #20
{
   b4fd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	f000 fb9e 	bl	b5714 <memset>
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	bd10      	pop	{r4, pc}

000b4fdc <_Z16_fetch_usbserialv>:
{
   b4fdc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fde:	4c0f      	ldr	r4, [pc, #60]	; (b501c <_Z16_fetch_usbserialv+0x40>)
{
   b4fe0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4fe2:	a803      	add	r0, sp, #12
   b4fe4:	f7ff fff2 	bl	b4fcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fe8:	7821      	ldrb	r1, [r4, #0]
   b4fea:	f3bf 8f5b 	dmb	ish
   b4fee:	f011 0101 	ands.w	r1, r1, #1
   b4ff2:	d10f      	bne.n	b5014 <_Z16_fetch_usbserialv+0x38>
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	9101      	str	r1, [sp, #4]
   b4ff8:	f7ff f84f 	bl	b409a <__cxa_guard_acquire>
   b4ffc:	9901      	ldr	r1, [sp, #4]
   b4ffe:	b148      	cbz	r0, b5014 <_Z16_fetch_usbserialv+0x38>
   b5000:	aa03      	add	r2, sp, #12
   b5002:	4807      	ldr	r0, [pc, #28]	; (b5020 <_Z16_fetch_usbserialv+0x44>)
   b5004:	f7ff ffca 	bl	b4f9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5008:	4620      	mov	r0, r4
   b500a:	f7ff f84b 	bl	b40a4 <__cxa_guard_release>
   b500e:	4805      	ldr	r0, [pc, #20]	; (b5024 <_Z16_fetch_usbserialv+0x48>)
   b5010:	f000 fb6c 	bl	b56ec <atexit>
	return _usbserial;
}
   b5014:	4802      	ldr	r0, [pc, #8]	; (b5020 <_Z16_fetch_usbserialv+0x44>)
   b5016:	b008      	add	sp, #32
   b5018:	bd10      	pop	{r4, pc}
   b501a:	bf00      	nop
   b501c:	2003e6f4 	.word	0x2003e6f4
   b5020:	2003e6f8 	.word	0x2003e6f8
   b5024:	000b4f25 	.word	0x000b4f25

000b5028 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5028:	2200      	movs	r2, #0
   b502a:	6840      	ldr	r0, [r0, #4]
   b502c:	4611      	mov	r1, r2
   b502e:	f7ff bc45 	b.w	b48bc <network_ready>

000b5032 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5032:	2200      	movs	r2, #0
   b5034:	6840      	ldr	r0, [r0, #4]
   b5036:	4611      	mov	r1, r2
   b5038:	f7ff bc60 	b.w	b48fc <network_listening>

000b503c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b503c:	2200      	movs	r2, #0
   b503e:	6840      	ldr	r0, [r0, #4]
   b5040:	4611      	mov	r1, r2
   b5042:	f7ff bc6b 	b.w	b491c <network_get_listen_timeout>

000b5046 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5046:	6840      	ldr	r0, [r0, #4]
   b5048:	2200      	movs	r2, #0
   b504a:	f7ff bc5f 	b.w	b490c <network_set_listen_timeout>

000b504e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b504e:	6840      	ldr	r0, [r0, #4]
   b5050:	2200      	movs	r2, #0
   b5052:	f081 0101 	eor.w	r1, r1, #1
   b5056:	f7ff bc49 	b.w	b48ec <network_listen>

000b505a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b505a:	2300      	movs	r3, #0
   b505c:	6840      	ldr	r0, [r0, #4]
   b505e:	461a      	mov	r2, r3
   b5060:	4619      	mov	r1, r3
   b5062:	f7ff bc3b 	b.w	b48dc <network_off>

000b5066 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5066:	2300      	movs	r3, #0
   b5068:	6840      	ldr	r0, [r0, #4]
   b506a:	461a      	mov	r2, r3
   b506c:	4619      	mov	r1, r3
   b506e:	f7ff bc2d 	b.w	b48cc <network_on>

000b5072 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5072:	2200      	movs	r2, #0
   b5074:	6840      	ldr	r0, [r0, #4]
   b5076:	4611      	mov	r1, r2
   b5078:	f7ff bc10 	b.w	b489c <network_connecting>

000b507c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b507c:	6840      	ldr	r0, [r0, #4]
   b507e:	2200      	movs	r2, #0
   b5080:	2102      	movs	r1, #2
   b5082:	f7ff bc13 	b.w	b48ac <network_disconnect>

000b5086 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5086:	2300      	movs	r3, #0
   b5088:	6840      	ldr	r0, [r0, #4]
   b508a:	461a      	mov	r2, r3
   b508c:	f7ff bbfe 	b.w	b488c <network_connect>

000b5090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5090:	4b02      	ldr	r3, [pc, #8]	; (b509c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5092:	2204      	movs	r2, #4
   b5094:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5096:	4a02      	ldr	r2, [pc, #8]	; (b50a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5098:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b509a:	4770      	bx	lr
   b509c:	2003e70c 	.word	0x2003e70c
   b50a0:	000b59f4 	.word	0x000b59f4

000b50a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b50a4:	4b01      	ldr	r3, [pc, #4]	; (b50ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b50a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b50a8:	4770      	bx	lr
   b50aa:	bf00      	nop
   b50ac:	2003e620 	.word	0x2003e620

000b50b0 <serialEventRun>:
{
   b50b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b50b2:	4b0b      	ldr	r3, [pc, #44]	; (b50e0 <serialEventRun+0x30>)
   b50b4:	b143      	cbz	r3, b50c8 <serialEventRun+0x18>
   b50b6:	f7ff ff91 	bl	b4fdc <_Z16_fetch_usbserialv>
   b50ba:	6803      	ldr	r3, [r0, #0]
   b50bc:	691b      	ldr	r3, [r3, #16]
   b50be:	4798      	blx	r3
   b50c0:	2800      	cmp	r0, #0
   b50c2:	dd01      	ble.n	b50c8 <serialEventRun+0x18>
        serialEvent();
   b50c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b50c8:	4b06      	ldr	r3, [pc, #24]	; (b50e4 <serialEventRun+0x34>)
   b50ca:	b143      	cbz	r3, b50de <serialEventRun+0x2e>
   b50cc:	f000 f92c 	bl	b5328 <_Z22__fetch_global_Serial1v>
   b50d0:	6803      	ldr	r3, [r0, #0]
   b50d2:	691b      	ldr	r3, [r3, #16]
   b50d4:	4798      	blx	r3
   b50d6:	2800      	cmp	r0, #0
   b50d8:	dd01      	ble.n	b50de <serialEventRun+0x2e>
        serialEvent1();
   b50da:	f3af 8000 	nop.w
}
   b50de:	bd08      	pop	{r3, pc}
	...

000b50e8 <_post_loop>:
{
   b50e8:	b508      	push	{r3, lr}
	serialEventRun();
   b50ea:	f7ff ffe1 	bl	b50b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b50ee:	f7ff fa91 	bl	b4614 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b50f2:	4b01      	ldr	r3, [pc, #4]	; (b50f8 <_post_loop+0x10>)
   b50f4:	6018      	str	r0, [r3, #0]
}
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	2003e728 	.word	0x2003e728

000b50fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b50fc:	4805      	ldr	r0, [pc, #20]	; (b5114 <_Z33system_initialize_user_backup_ramv+0x18>)
   b50fe:	4a06      	ldr	r2, [pc, #24]	; (b5118 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5100:	4906      	ldr	r1, [pc, #24]	; (b511c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5102:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5104:	1a12      	subs	r2, r2, r0
   b5106:	f000 faf7 	bl	b56f8 <memcpy>
    __backup_sram_signature = signature;
   b510a:	4b05      	ldr	r3, [pc, #20]	; (b5120 <_Z33system_initialize_user_backup_ramv+0x24>)
   b510c:	4a05      	ldr	r2, [pc, #20]	; (b5124 <_Z33system_initialize_user_backup_ramv+0x28>)
   b510e:	601a      	str	r2, [r3, #0]
}
   b5110:	bd08      	pop	{r3, pc}
   b5112:	bf00      	nop
   b5114:	2003f400 	.word	0x2003f400
   b5118:	2003f404 	.word	0x2003f404
   b511c:	000b5ae4 	.word	0x000b5ae4
   b5120:	2003f400 	.word	0x2003f400
   b5124:	9a271c1e 	.word	0x9a271c1e

000b5128 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5128:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b512a:	2300      	movs	r3, #0
   b512c:	9300      	str	r3, [sp, #0]
   b512e:	461a      	mov	r2, r3
   b5130:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5134:	f7ff fb90 	bl	b4858 <system_ctrl_set_result>
}
   b5138:	b003      	add	sp, #12
   b513a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5140 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5140:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5142:	8843      	ldrh	r3, [r0, #2]
   b5144:	2b0a      	cmp	r3, #10
   b5146:	d008      	beq.n	b515a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5148:	2b50      	cmp	r3, #80	; 0x50
   b514a:	d10b      	bne.n	b5164 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b514c:	4b09      	ldr	r3, [pc, #36]	; (b5174 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b514e:	681b      	ldr	r3, [r3, #0]
   b5150:	b14b      	cbz	r3, b5166 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5152:	b003      	add	sp, #12
   b5154:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5158:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b515a:	f7ff ffe5 	bl	b5128 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b515e:	b003      	add	sp, #12
   b5160:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5164:	2300      	movs	r3, #0
   b5166:	9300      	str	r3, [sp, #0]
   b5168:	461a      	mov	r2, r3
   b516a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b516e:	f7ff fb73 	bl	b4858 <system_ctrl_set_result>
}
   b5172:	e7f4      	b.n	b515e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5174:	2003e718 	.word	0x2003e718

000b5178 <module_user_init_hook>:
{
   b5178:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b517a:	4812      	ldr	r0, [pc, #72]	; (b51c4 <module_user_init_hook+0x4c>)
   b517c:	2100      	movs	r1, #0
   b517e:	f7ff fc05 	bl	b498c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5182:	4b11      	ldr	r3, [pc, #68]	; (b51c8 <module_user_init_hook+0x50>)
   b5184:	681a      	ldr	r2, [r3, #0]
   b5186:	4b11      	ldr	r3, [pc, #68]	; (b51cc <module_user_init_hook+0x54>)
   b5188:	429a      	cmp	r2, r3
   b518a:	4b11      	ldr	r3, [pc, #68]	; (b51d0 <module_user_init_hook+0x58>)
   b518c:	bf0c      	ite	eq
   b518e:	2201      	moveq	r2, #1
   b5190:	2200      	movne	r2, #0
   b5192:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5194:	d001      	beq.n	b519a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5196:	f7ff ffb1 	bl	b50fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b519a:	f7ff fa2b 	bl	b45f4 <HAL_RNG_GetRandomNumber>
   b519e:	4604      	mov	r4, r0
    srand(seed);
   b51a0:	f000 fac0 	bl	b5724 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b51a4:	4b0b      	ldr	r3, [pc, #44]	; (b51d4 <module_user_init_hook+0x5c>)
   b51a6:	b113      	cbz	r3, b51ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b51a8:	4620      	mov	r0, r4
   b51aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b51ae:	2100      	movs	r1, #0
   b51b0:	4808      	ldr	r0, [pc, #32]	; (b51d4 <module_user_init_hook+0x5c>)
   b51b2:	f7ff fb63 	bl	b487c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b51b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b51ba:	4807      	ldr	r0, [pc, #28]	; (b51d8 <module_user_init_hook+0x60>)
   b51bc:	2100      	movs	r1, #0
   b51be:	f7ff bb41 	b.w	b4844 <system_ctrl_set_app_request_handler>
   b51c2:	bf00      	nop
   b51c4:	000b50a5 	.word	0x000b50a5
   b51c8:	2003f400 	.word	0x2003f400
   b51cc:	9a271c1e 	.word	0x9a271c1e
   b51d0:	2003e714 	.word	0x2003e714
   b51d4:	00000000 	.word	0x00000000
   b51d8:	000b5141 	.word	0x000b5141

000b51dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b51dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b51de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b51e0:	d902      	bls.n	b51e8 <pinAvailable+0xc>
    return false;
   b51e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b51e4:	b002      	add	sp, #8
   b51e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b51e8:	f1a0 030b 	sub.w	r3, r0, #11
   b51ec:	2b02      	cmp	r3, #2
   b51ee:	d81a      	bhi.n	b5226 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b51f0:	4c17      	ldr	r4, [pc, #92]	; (b5250 <pinAvailable+0x74>)
   b51f2:	7821      	ldrb	r1, [r4, #0]
   b51f4:	f3bf 8f5b 	dmb	ish
   b51f8:	f011 0101 	ands.w	r1, r1, #1
   b51fc:	d10b      	bne.n	b5216 <pinAvailable+0x3a>
   b51fe:	4620      	mov	r0, r4
   b5200:	9101      	str	r1, [sp, #4]
   b5202:	f7fe ff4a 	bl	b409a <__cxa_guard_acquire>
   b5206:	9901      	ldr	r1, [sp, #4]
   b5208:	b128      	cbz	r0, b5216 <pinAvailable+0x3a>
   b520a:	4812      	ldr	r0, [pc, #72]	; (b5254 <pinAvailable+0x78>)
   b520c:	f7ff fe10 	bl	b4e30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5210:	4620      	mov	r0, r4
   b5212:	f7fe ff47 	bl	b40a4 <__cxa_guard_release>
   b5216:	4b0f      	ldr	r3, [pc, #60]	; (b5254 <pinAvailable+0x78>)
   b5218:	7818      	ldrb	r0, [r3, #0]
   b521a:	f7ff fa7b 	bl	b4714 <hal_spi_is_enabled>
   b521e:	2800      	cmp	r0, #0
   b5220:	d1df      	bne.n	b51e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5222:	2001      	movs	r0, #1
   b5224:	e7de      	b.n	b51e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5226:	2801      	cmp	r0, #1
   b5228:	d809      	bhi.n	b523e <pinAvailable+0x62>
   b522a:	f000 f83d 	bl	b52a8 <_Z19__fetch_global_Wirev>
   b522e:	2100      	movs	r1, #0
   b5230:	7c00      	ldrb	r0, [r0, #16]
   b5232:	f7ff fa3f 	bl	b46b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5236:	f080 0001 	eor.w	r0, r0, #1
   b523a:	b2c0      	uxtb	r0, r0
   b523c:	e7d2      	b.n	b51e4 <pinAvailable+0x8>
   b523e:	3809      	subs	r0, #9
   b5240:	2801      	cmp	r0, #1
   b5242:	d8ee      	bhi.n	b5222 <pinAvailable+0x46>
   b5244:	f000 f870 	bl	b5328 <_Z22__fetch_global_Serial1v>
   b5248:	7c00      	ldrb	r0, [r0, #16]
   b524a:	f7ff fa93 	bl	b4774 <hal_usart_is_enabled>
   b524e:	e7f2      	b.n	b5236 <pinAvailable+0x5a>
   b5250:	2003e71c 	.word	0x2003e71c
   b5254:	2003e720 	.word	0x2003e720

000b5258 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5258:	2823      	cmp	r0, #35	; 0x23
{
   b525a:	b538      	push	{r3, r4, r5, lr}
   b525c:	4604      	mov	r4, r0
   b525e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5260:	d80a      	bhi.n	b5278 <pinMode+0x20>
   b5262:	29ff      	cmp	r1, #255	; 0xff
   b5264:	d008      	beq.n	b5278 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5266:	f7ff ffb9 	bl	b51dc <pinAvailable>
   b526a:	b128      	cbz	r0, b5278 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b526c:	4629      	mov	r1, r5
   b526e:	4620      	mov	r0, r4
}
   b5270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5274:	f7ff b9de 	b.w	b4634 <HAL_Pin_Mode>
}
   b5278:	bd38      	pop	{r3, r4, r5, pc}

000b527a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b527a:	4770      	bx	lr

000b527c <_Z17acquireWireBufferv>:
{
   b527c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b527e:	2520      	movs	r5, #32
   b5280:	2314      	movs	r3, #20
{
   b5282:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5284:	6003      	str	r3, [r0, #0]
   b5286:	6085      	str	r5, [r0, #8]
   b5288:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b528a:	4906      	ldr	r1, [pc, #24]	; (b52a4 <_Z17acquireWireBufferv+0x28>)
   b528c:	4628      	mov	r0, r5
   b528e:	f000 f86f 	bl	b5370 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5292:	4904      	ldr	r1, [pc, #16]	; (b52a4 <_Z17acquireWireBufferv+0x28>)
	};
   b5294:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5296:	4628      	mov	r0, r5
   b5298:	f000 f86a 	bl	b5370 <_ZnajRKSt9nothrow_t>
	};
   b529c:	60e0      	str	r0, [r4, #12]
}
   b529e:	4620      	mov	r0, r4
   b52a0:	bd38      	pop	{r3, r4, r5, pc}
   b52a2:	bf00      	nop
   b52a4:	000b5a28 	.word	0x000b5a28

000b52a8 <_Z19__fetch_global_Wirev>:
{
   b52a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b52aa:	4d0e      	ldr	r5, [pc, #56]	; (b52e4 <_Z19__fetch_global_Wirev+0x3c>)
   b52ac:	7829      	ldrb	r1, [r5, #0]
   b52ae:	f3bf 8f5b 	dmb	ish
   b52b2:	f011 0401 	ands.w	r4, r1, #1
{
   b52b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b52b8:	d111      	bne.n	b52de <_Z19__fetch_global_Wirev+0x36>
   b52ba:	4628      	mov	r0, r5
   b52bc:	f7fe feed 	bl	b409a <__cxa_guard_acquire>
   b52c0:	b168      	cbz	r0, b52de <_Z19__fetch_global_Wirev+0x36>
   b52c2:	a801      	add	r0, sp, #4
   b52c4:	f7ff ffda 	bl	b527c <_Z17acquireWireBufferv>
   b52c8:	aa01      	add	r2, sp, #4
   b52ca:	4621      	mov	r1, r4
   b52cc:	4806      	ldr	r0, [pc, #24]	; (b52e8 <_Z19__fetch_global_Wirev+0x40>)
   b52ce:	f7ff fbdb 	bl	b4a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b52d2:	4628      	mov	r0, r5
   b52d4:	f7fe fee6 	bl	b40a4 <__cxa_guard_release>
   b52d8:	4804      	ldr	r0, [pc, #16]	; (b52ec <_Z19__fetch_global_Wirev+0x44>)
   b52da:	f000 fa07 	bl	b56ec <atexit>
	return wire;
}
   b52de:	4802      	ldr	r0, [pc, #8]	; (b52e8 <_Z19__fetch_global_Wirev+0x40>)
   b52e0:	b007      	add	sp, #28
   b52e2:	bd30      	pop	{r4, r5, pc}
   b52e4:	2003e72c 	.word	0x2003e72c
   b52e8:	2003e730 	.word	0x2003e730
   b52ec:	000b527b 	.word	0x000b527b

000b52f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b52f0:	4770      	bx	lr
	...

000b52f4 <_Z20acquireSerial1Bufferv>:
{
   b52f4:	b538      	push	{r3, r4, r5, lr}
   b52f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b52f8:	2514      	movs	r5, #20
   b52fa:	462a      	mov	r2, r5
   b52fc:	2100      	movs	r1, #0
   b52fe:	f000 fa09 	bl	b5714 <memset>
   b5302:	8025      	strh	r5, [r4, #0]
   b5304:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5306:	4907      	ldr	r1, [pc, #28]	; (b5324 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5308:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b530a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b530c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b530e:	f000 f82f 	bl	b5370 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5312:	4904      	ldr	r1, [pc, #16]	; (b5324 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5314:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5316:	4628      	mov	r0, r5
   b5318:	f000 f82a 	bl	b5370 <_ZnajRKSt9nothrow_t>
    };
   b531c:	60e0      	str	r0, [r4, #12]
}
   b531e:	4620      	mov	r0, r4
   b5320:	bd38      	pop	{r3, r4, r5, pc}
   b5322:	bf00      	nop
   b5324:	000b5a28 	.word	0x000b5a28

000b5328 <_Z22__fetch_global_Serial1v>:
{
   b5328:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b532a:	4d0e      	ldr	r5, [pc, #56]	; (b5364 <_Z22__fetch_global_Serial1v+0x3c>)
   b532c:	7829      	ldrb	r1, [r5, #0]
   b532e:	f3bf 8f5b 	dmb	ish
   b5332:	f011 0401 	ands.w	r4, r1, #1
{
   b5336:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5338:	d111      	bne.n	b535e <_Z22__fetch_global_Serial1v+0x36>
   b533a:	4628      	mov	r0, r5
   b533c:	f7fe fead 	bl	b409a <__cxa_guard_acquire>
   b5340:	b168      	cbz	r0, b535e <_Z22__fetch_global_Serial1v+0x36>
   b5342:	a801      	add	r0, sp, #4
   b5344:	f7ff ffd6 	bl	b52f4 <_Z20acquireSerial1Bufferv>
   b5348:	aa01      	add	r2, sp, #4
   b534a:	4621      	mov	r1, r4
   b534c:	4806      	ldr	r0, [pc, #24]	; (b5368 <_Z22__fetch_global_Serial1v+0x40>)
   b534e:	f7ff fdd3 	bl	b4ef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5352:	4628      	mov	r0, r5
   b5354:	f7fe fea6 	bl	b40a4 <__cxa_guard_release>
   b5358:	4804      	ldr	r0, [pc, #16]	; (b536c <_Z22__fetch_global_Serial1v+0x44>)
   b535a:	f000 f9c7 	bl	b56ec <atexit>
    return serial1;
}
   b535e:	4802      	ldr	r0, [pc, #8]	; (b5368 <_Z22__fetch_global_Serial1v+0x40>)
   b5360:	b007      	add	sp, #28
   b5362:	bd30      	pop	{r4, r5, pc}
   b5364:	2003e744 	.word	0x2003e744
   b5368:	2003e748 	.word	0x2003e748
   b536c:	000b52f1 	.word	0x000b52f1

000b5370 <_ZnajRKSt9nothrow_t>:
   b5370:	f7fe be8f 	b.w	b4092 <_Znaj>

000b5374 <__aeabi_drsub>:
   b5374:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5378:	e002      	b.n	b5380 <__adddf3>
   b537a:	bf00      	nop

000b537c <__aeabi_dsub>:
   b537c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5380 <__adddf3>:
   b5380:	b530      	push	{r4, r5, lr}
   b5382:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5386:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b538a:	ea94 0f05 	teq	r4, r5
   b538e:	bf08      	it	eq
   b5390:	ea90 0f02 	teqeq	r0, r2
   b5394:	bf1f      	itttt	ne
   b5396:	ea54 0c00 	orrsne.w	ip, r4, r0
   b539a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b539e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b53a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b53a6:	f000 80e2 	beq.w	b556e <__adddf3+0x1ee>
   b53aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b53ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b53b2:	bfb8      	it	lt
   b53b4:	426d      	neglt	r5, r5
   b53b6:	dd0c      	ble.n	b53d2 <__adddf3+0x52>
   b53b8:	442c      	add	r4, r5
   b53ba:	ea80 0202 	eor.w	r2, r0, r2
   b53be:	ea81 0303 	eor.w	r3, r1, r3
   b53c2:	ea82 0000 	eor.w	r0, r2, r0
   b53c6:	ea83 0101 	eor.w	r1, r3, r1
   b53ca:	ea80 0202 	eor.w	r2, r0, r2
   b53ce:	ea81 0303 	eor.w	r3, r1, r3
   b53d2:	2d36      	cmp	r5, #54	; 0x36
   b53d4:	bf88      	it	hi
   b53d6:	bd30      	pophi	{r4, r5, pc}
   b53d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b53dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b53e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b53e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b53e8:	d002      	beq.n	b53f0 <__adddf3+0x70>
   b53ea:	4240      	negs	r0, r0
   b53ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b53f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b53f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b53f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b53fc:	d002      	beq.n	b5404 <__adddf3+0x84>
   b53fe:	4252      	negs	r2, r2
   b5400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5404:	ea94 0f05 	teq	r4, r5
   b5408:	f000 80a7 	beq.w	b555a <__adddf3+0x1da>
   b540c:	f1a4 0401 	sub.w	r4, r4, #1
   b5410:	f1d5 0e20 	rsbs	lr, r5, #32
   b5414:	db0d      	blt.n	b5432 <__adddf3+0xb2>
   b5416:	fa02 fc0e 	lsl.w	ip, r2, lr
   b541a:	fa22 f205 	lsr.w	r2, r2, r5
   b541e:	1880      	adds	r0, r0, r2
   b5420:	f141 0100 	adc.w	r1, r1, #0
   b5424:	fa03 f20e 	lsl.w	r2, r3, lr
   b5428:	1880      	adds	r0, r0, r2
   b542a:	fa43 f305 	asr.w	r3, r3, r5
   b542e:	4159      	adcs	r1, r3
   b5430:	e00e      	b.n	b5450 <__adddf3+0xd0>
   b5432:	f1a5 0520 	sub.w	r5, r5, #32
   b5436:	f10e 0e20 	add.w	lr, lr, #32
   b543a:	2a01      	cmp	r2, #1
   b543c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5440:	bf28      	it	cs
   b5442:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5446:	fa43 f305 	asr.w	r3, r3, r5
   b544a:	18c0      	adds	r0, r0, r3
   b544c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5454:	d507      	bpl.n	b5466 <__adddf3+0xe6>
   b5456:	f04f 0e00 	mov.w	lr, #0
   b545a:	f1dc 0c00 	rsbs	ip, ip, #0
   b545e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5462:	eb6e 0101 	sbc.w	r1, lr, r1
   b5466:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b546a:	d31b      	bcc.n	b54a4 <__adddf3+0x124>
   b546c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5470:	d30c      	bcc.n	b548c <__adddf3+0x10c>
   b5472:	0849      	lsrs	r1, r1, #1
   b5474:	ea5f 0030 	movs.w	r0, r0, rrx
   b5478:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b547c:	f104 0401 	add.w	r4, r4, #1
   b5480:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5484:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5488:	f080 809a 	bcs.w	b55c0 <__adddf3+0x240>
   b548c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5490:	bf08      	it	eq
   b5492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5496:	f150 0000 	adcs.w	r0, r0, #0
   b549a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b549e:	ea41 0105 	orr.w	r1, r1, r5
   b54a2:	bd30      	pop	{r4, r5, pc}
   b54a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b54a8:	4140      	adcs	r0, r0
   b54aa:	eb41 0101 	adc.w	r1, r1, r1
   b54ae:	3c01      	subs	r4, #1
   b54b0:	bf28      	it	cs
   b54b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b54b6:	d2e9      	bcs.n	b548c <__adddf3+0x10c>
   b54b8:	f091 0f00 	teq	r1, #0
   b54bc:	bf04      	itt	eq
   b54be:	4601      	moveq	r1, r0
   b54c0:	2000      	moveq	r0, #0
   b54c2:	fab1 f381 	clz	r3, r1
   b54c6:	bf08      	it	eq
   b54c8:	3320      	addeq	r3, #32
   b54ca:	f1a3 030b 	sub.w	r3, r3, #11
   b54ce:	f1b3 0220 	subs.w	r2, r3, #32
   b54d2:	da0c      	bge.n	b54ee <__adddf3+0x16e>
   b54d4:	320c      	adds	r2, #12
   b54d6:	dd08      	ble.n	b54ea <__adddf3+0x16a>
   b54d8:	f102 0c14 	add.w	ip, r2, #20
   b54dc:	f1c2 020c 	rsb	r2, r2, #12
   b54e0:	fa01 f00c 	lsl.w	r0, r1, ip
   b54e4:	fa21 f102 	lsr.w	r1, r1, r2
   b54e8:	e00c      	b.n	b5504 <__adddf3+0x184>
   b54ea:	f102 0214 	add.w	r2, r2, #20
   b54ee:	bfd8      	it	le
   b54f0:	f1c2 0c20 	rsble	ip, r2, #32
   b54f4:	fa01 f102 	lsl.w	r1, r1, r2
   b54f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b54fc:	bfdc      	itt	le
   b54fe:	ea41 010c 	orrle.w	r1, r1, ip
   b5502:	4090      	lslle	r0, r2
   b5504:	1ae4      	subs	r4, r4, r3
   b5506:	bfa2      	ittt	ge
   b5508:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b550c:	4329      	orrge	r1, r5
   b550e:	bd30      	popge	{r4, r5, pc}
   b5510:	ea6f 0404 	mvn.w	r4, r4
   b5514:	3c1f      	subs	r4, #31
   b5516:	da1c      	bge.n	b5552 <__adddf3+0x1d2>
   b5518:	340c      	adds	r4, #12
   b551a:	dc0e      	bgt.n	b553a <__adddf3+0x1ba>
   b551c:	f104 0414 	add.w	r4, r4, #20
   b5520:	f1c4 0220 	rsb	r2, r4, #32
   b5524:	fa20 f004 	lsr.w	r0, r0, r4
   b5528:	fa01 f302 	lsl.w	r3, r1, r2
   b552c:	ea40 0003 	orr.w	r0, r0, r3
   b5530:	fa21 f304 	lsr.w	r3, r1, r4
   b5534:	ea45 0103 	orr.w	r1, r5, r3
   b5538:	bd30      	pop	{r4, r5, pc}
   b553a:	f1c4 040c 	rsb	r4, r4, #12
   b553e:	f1c4 0220 	rsb	r2, r4, #32
   b5542:	fa20 f002 	lsr.w	r0, r0, r2
   b5546:	fa01 f304 	lsl.w	r3, r1, r4
   b554a:	ea40 0003 	orr.w	r0, r0, r3
   b554e:	4629      	mov	r1, r5
   b5550:	bd30      	pop	{r4, r5, pc}
   b5552:	fa21 f004 	lsr.w	r0, r1, r4
   b5556:	4629      	mov	r1, r5
   b5558:	bd30      	pop	{r4, r5, pc}
   b555a:	f094 0f00 	teq	r4, #0
   b555e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5562:	bf06      	itte	eq
   b5564:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5568:	3401      	addeq	r4, #1
   b556a:	3d01      	subne	r5, #1
   b556c:	e74e      	b.n	b540c <__adddf3+0x8c>
   b556e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5572:	bf18      	it	ne
   b5574:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5578:	d029      	beq.n	b55ce <__adddf3+0x24e>
   b557a:	ea94 0f05 	teq	r4, r5
   b557e:	bf08      	it	eq
   b5580:	ea90 0f02 	teqeq	r0, r2
   b5584:	d005      	beq.n	b5592 <__adddf3+0x212>
   b5586:	ea54 0c00 	orrs.w	ip, r4, r0
   b558a:	bf04      	itt	eq
   b558c:	4619      	moveq	r1, r3
   b558e:	4610      	moveq	r0, r2
   b5590:	bd30      	pop	{r4, r5, pc}
   b5592:	ea91 0f03 	teq	r1, r3
   b5596:	bf1e      	ittt	ne
   b5598:	2100      	movne	r1, #0
   b559a:	2000      	movne	r0, #0
   b559c:	bd30      	popne	{r4, r5, pc}
   b559e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b55a2:	d105      	bne.n	b55b0 <__adddf3+0x230>
   b55a4:	0040      	lsls	r0, r0, #1
   b55a6:	4149      	adcs	r1, r1
   b55a8:	bf28      	it	cs
   b55aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b55ae:	bd30      	pop	{r4, r5, pc}
   b55b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b55b4:	bf3c      	itt	cc
   b55b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b55ba:	bd30      	popcc	{r4, r5, pc}
   b55bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b55c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b55c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b55c8:	f04f 0000 	mov.w	r0, #0
   b55cc:	bd30      	pop	{r4, r5, pc}
   b55ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b55d2:	bf1a      	itte	ne
   b55d4:	4619      	movne	r1, r3
   b55d6:	4610      	movne	r0, r2
   b55d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b55dc:	bf1c      	itt	ne
   b55de:	460b      	movne	r3, r1
   b55e0:	4602      	movne	r2, r0
   b55e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b55e6:	bf06      	itte	eq
   b55e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b55ec:	ea91 0f03 	teqeq	r1, r3
   b55f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b55f4:	bd30      	pop	{r4, r5, pc}
   b55f6:	bf00      	nop

000b55f8 <__aeabi_ui2d>:
   b55f8:	f090 0f00 	teq	r0, #0
   b55fc:	bf04      	itt	eq
   b55fe:	2100      	moveq	r1, #0
   b5600:	4770      	bxeq	lr
   b5602:	b530      	push	{r4, r5, lr}
   b5604:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5608:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b560c:	f04f 0500 	mov.w	r5, #0
   b5610:	f04f 0100 	mov.w	r1, #0
   b5614:	e750      	b.n	b54b8 <__adddf3+0x138>
   b5616:	bf00      	nop

000b5618 <__aeabi_i2d>:
   b5618:	f090 0f00 	teq	r0, #0
   b561c:	bf04      	itt	eq
   b561e:	2100      	moveq	r1, #0
   b5620:	4770      	bxeq	lr
   b5622:	b530      	push	{r4, r5, lr}
   b5624:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5628:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b562c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5630:	bf48      	it	mi
   b5632:	4240      	negmi	r0, r0
   b5634:	f04f 0100 	mov.w	r1, #0
   b5638:	e73e      	b.n	b54b8 <__adddf3+0x138>
   b563a:	bf00      	nop

000b563c <__aeabi_f2d>:
   b563c:	0042      	lsls	r2, r0, #1
   b563e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5642:	ea4f 0131 	mov.w	r1, r1, rrx
   b5646:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b564a:	bf1f      	itttt	ne
   b564c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5650:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5654:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5658:	4770      	bxne	lr
   b565a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b565e:	bf08      	it	eq
   b5660:	4770      	bxeq	lr
   b5662:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5666:	bf04      	itt	eq
   b5668:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b566c:	4770      	bxeq	lr
   b566e:	b530      	push	{r4, r5, lr}
   b5670:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b567c:	e71c      	b.n	b54b8 <__adddf3+0x138>
   b567e:	bf00      	nop

000b5680 <__aeabi_ul2d>:
   b5680:	ea50 0201 	orrs.w	r2, r0, r1
   b5684:	bf08      	it	eq
   b5686:	4770      	bxeq	lr
   b5688:	b530      	push	{r4, r5, lr}
   b568a:	f04f 0500 	mov.w	r5, #0
   b568e:	e00a      	b.n	b56a6 <__aeabi_l2d+0x16>

000b5690 <__aeabi_l2d>:
   b5690:	ea50 0201 	orrs.w	r2, r0, r1
   b5694:	bf08      	it	eq
   b5696:	4770      	bxeq	lr
   b5698:	b530      	push	{r4, r5, lr}
   b569a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b569e:	d502      	bpl.n	b56a6 <__aeabi_l2d+0x16>
   b56a0:	4240      	negs	r0, r0
   b56a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b56a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b56aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b56ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b56b2:	f43f aed8 	beq.w	b5466 <__adddf3+0xe6>
   b56b6:	f04f 0203 	mov.w	r2, #3
   b56ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b56be:	bf18      	it	ne
   b56c0:	3203      	addne	r2, #3
   b56c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b56c6:	bf18      	it	ne
   b56c8:	3203      	addne	r2, #3
   b56ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b56ce:	f1c2 0320 	rsb	r3, r2, #32
   b56d2:	fa00 fc03 	lsl.w	ip, r0, r3
   b56d6:	fa20 f002 	lsr.w	r0, r0, r2
   b56da:	fa01 fe03 	lsl.w	lr, r1, r3
   b56de:	ea40 000e 	orr.w	r0, r0, lr
   b56e2:	fa21 f102 	lsr.w	r1, r1, r2
   b56e6:	4414      	add	r4, r2
   b56e8:	e6bd      	b.n	b5466 <__adddf3+0xe6>
   b56ea:	bf00      	nop

000b56ec <atexit>:
   b56ec:	2300      	movs	r3, #0
   b56ee:	4601      	mov	r1, r0
   b56f0:	461a      	mov	r2, r3
   b56f2:	4618      	mov	r0, r3
   b56f4:	f000 b84c 	b.w	b5790 <__register_exitproc>

000b56f8 <memcpy>:
   b56f8:	440a      	add	r2, r1
   b56fa:	4291      	cmp	r1, r2
   b56fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5700:	d100      	bne.n	b5704 <memcpy+0xc>
   b5702:	4770      	bx	lr
   b5704:	b510      	push	{r4, lr}
   b5706:	f811 4b01 	ldrb.w	r4, [r1], #1
   b570a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b570e:	4291      	cmp	r1, r2
   b5710:	d1f9      	bne.n	b5706 <memcpy+0xe>
   b5712:	bd10      	pop	{r4, pc}

000b5714 <memset>:
   b5714:	4402      	add	r2, r0
   b5716:	4603      	mov	r3, r0
   b5718:	4293      	cmp	r3, r2
   b571a:	d100      	bne.n	b571e <memset+0xa>
   b571c:	4770      	bx	lr
   b571e:	f803 1b01 	strb.w	r1, [r3], #1
   b5722:	e7f9      	b.n	b5718 <memset+0x4>

000b5724 <srand>:
   b5724:	b538      	push	{r3, r4, r5, lr}
   b5726:	4b10      	ldr	r3, [pc, #64]	; (b5768 <srand+0x44>)
   b5728:	681d      	ldr	r5, [r3, #0]
   b572a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b572c:	4604      	mov	r4, r0
   b572e:	b9b3      	cbnz	r3, b575e <srand+0x3a>
   b5730:	2018      	movs	r0, #24
   b5732:	f7ff f90b 	bl	b494c <malloc>
   b5736:	4602      	mov	r2, r0
   b5738:	63a8      	str	r0, [r5, #56]	; 0x38
   b573a:	b920      	cbnz	r0, b5746 <srand+0x22>
   b573c:	4b0b      	ldr	r3, [pc, #44]	; (b576c <srand+0x48>)
   b573e:	480c      	ldr	r0, [pc, #48]	; (b5770 <srand+0x4c>)
   b5740:	2142      	movs	r1, #66	; 0x42
   b5742:	f7ff f91b 	bl	b497c <__assert_func>
   b5746:	490b      	ldr	r1, [pc, #44]	; (b5774 <srand+0x50>)
   b5748:	4b0b      	ldr	r3, [pc, #44]	; (b5778 <srand+0x54>)
   b574a:	e9c0 1300 	strd	r1, r3, [r0]
   b574e:	4b0b      	ldr	r3, [pc, #44]	; (b577c <srand+0x58>)
   b5750:	6083      	str	r3, [r0, #8]
   b5752:	230b      	movs	r3, #11
   b5754:	8183      	strh	r3, [r0, #12]
   b5756:	2100      	movs	r1, #0
   b5758:	2001      	movs	r0, #1
   b575a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b575e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5760:	2200      	movs	r2, #0
   b5762:	611c      	str	r4, [r3, #16]
   b5764:	615a      	str	r2, [r3, #20]
   b5766:	bd38      	pop	{r3, r4, r5, pc}
   b5768:	2003e620 	.word	0x2003e620
   b576c:	000b5a29 	.word	0x000b5a29
   b5770:	000b5a40 	.word	0x000b5a40
   b5774:	abcd330e 	.word	0xabcd330e
   b5778:	e66d1234 	.word	0xe66d1234
   b577c:	0005deec 	.word	0x0005deec

000b5780 <strlen>:
   b5780:	4603      	mov	r3, r0
   b5782:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5786:	2a00      	cmp	r2, #0
   b5788:	d1fb      	bne.n	b5782 <strlen+0x2>
   b578a:	1a18      	subs	r0, r3, r0
   b578c:	3801      	subs	r0, #1
   b578e:	4770      	bx	lr

000b5790 <__register_exitproc>:
   b5790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5794:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5850 <__register_exitproc+0xc0>
   b5798:	4606      	mov	r6, r0
   b579a:	f8d8 0000 	ldr.w	r0, [r8]
   b579e:	461f      	mov	r7, r3
   b57a0:	460d      	mov	r5, r1
   b57a2:	4691      	mov	r9, r2
   b57a4:	f000 f856 	bl	b5854 <__retarget_lock_acquire_recursive>
   b57a8:	4b25      	ldr	r3, [pc, #148]	; (b5840 <__register_exitproc+0xb0>)
   b57aa:	681c      	ldr	r4, [r3, #0]
   b57ac:	b934      	cbnz	r4, b57bc <__register_exitproc+0x2c>
   b57ae:	4c25      	ldr	r4, [pc, #148]	; (b5844 <__register_exitproc+0xb4>)
   b57b0:	601c      	str	r4, [r3, #0]
   b57b2:	4b25      	ldr	r3, [pc, #148]	; (b5848 <__register_exitproc+0xb8>)
   b57b4:	b113      	cbz	r3, b57bc <__register_exitproc+0x2c>
   b57b6:	681b      	ldr	r3, [r3, #0]
   b57b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b57bc:	6863      	ldr	r3, [r4, #4]
   b57be:	2b1f      	cmp	r3, #31
   b57c0:	dd07      	ble.n	b57d2 <__register_exitproc+0x42>
   b57c2:	f8d8 0000 	ldr.w	r0, [r8]
   b57c6:	f000 f847 	bl	b5858 <__retarget_lock_release_recursive>
   b57ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b57ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b57d2:	b34e      	cbz	r6, b5828 <__register_exitproc+0x98>
   b57d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b57d8:	b988      	cbnz	r0, b57fe <__register_exitproc+0x6e>
   b57da:	4b1c      	ldr	r3, [pc, #112]	; (b584c <__register_exitproc+0xbc>)
   b57dc:	b923      	cbnz	r3, b57e8 <__register_exitproc+0x58>
   b57de:	f8d8 0000 	ldr.w	r0, [r8]
   b57e2:	f000 f838 	bl	b5856 <__retarget_lock_release>
   b57e6:	e7f0      	b.n	b57ca <__register_exitproc+0x3a>
   b57e8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b57ec:	f7ff f8ae 	bl	b494c <malloc>
   b57f0:	2800      	cmp	r0, #0
   b57f2:	d0f4      	beq.n	b57de <__register_exitproc+0x4e>
   b57f4:	2300      	movs	r3, #0
   b57f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b57fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b57fe:	6863      	ldr	r3, [r4, #4]
   b5800:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5804:	2201      	movs	r2, #1
   b5806:	409a      	lsls	r2, r3
   b5808:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b580c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5810:	4313      	orrs	r3, r2
   b5812:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5816:	2e02      	cmp	r6, #2
   b5818:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b581c:	bf02      	ittt	eq
   b581e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5822:	4313      	orreq	r3, r2
   b5824:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5828:	6863      	ldr	r3, [r4, #4]
   b582a:	f8d8 0000 	ldr.w	r0, [r8]
   b582e:	1c5a      	adds	r2, r3, #1
   b5830:	3302      	adds	r3, #2
   b5832:	6062      	str	r2, [r4, #4]
   b5834:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5838:	f000 f80e 	bl	b5858 <__retarget_lock_release_recursive>
   b583c:	2000      	movs	r0, #0
   b583e:	e7c6      	b.n	b57ce <__register_exitproc+0x3e>
   b5840:	2003e7e8 	.word	0x2003e7e8
   b5844:	2003e75c 	.word	0x2003e75c
   b5848:	00000000 	.word	0x00000000
   b584c:	000b494d 	.word	0x000b494d
   b5850:	2003e684 	.word	0x2003e684

000b5854 <__retarget_lock_acquire_recursive>:
   b5854:	4770      	bx	lr

000b5856 <__retarget_lock_release>:
   b5856:	4770      	bx	lr

000b5858 <__retarget_lock_release_recursive>:
   b5858:	4770      	bx	lr

000b585a <link_code_end>:
	...

000b585c <dynalib_user>:
   b585c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b586c:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   b587c:	0079 6554 706d 203a 6625 4800 6d75 6469     y.Temp: %f.Humid
   b588c:	7469 3a79 2520 0066 7341 6573 7472 6f69     ity: %f.Assertio
   b589c:	466e 6961 756c 6572 2a20 5f70 6970 206e     nFailure *p_pin 
   b58ac:	203c 3328 2032 202b 3631 0029               < (32 + 16).

000b58b8 <_ZTVN5spark13EthernetClassE>:
	...
   b58c0:	4a13 000b 4a09 000b 49ff 000b 49f5 000b     .J...J...I...I..
   b58d0:	49e9 000b 49dd 000b 4bf5 000b 4bfd 000b     .I...I...K...K..
   b58e0:	49d1 000b 49c9 000b 49bf 000b 49b5 000b     .I...I...I...I..
   b58f0:	4c2d 000b                                   -L..

000b58f4 <_ZTV7TwoWire>:
	...
   b58fc:	4a31 000b 4a7b 000b 4a53 000b 4a33 000b     1J..{J..SJ..3J..
   b590c:	4a5b 000b 4a63 000b 4a6b 000b 4a73 000b     [J..cJ..kJ..sJ..

000b591c <_ZTV9IPAddress>:
	...
   b5924:	4ac5 000b 4ab5 000b 4ab7 000b 7061 0070     .J...J...J..app.

000b5934 <_ZTVN5spark12NetworkClassE>:
	...
   b593c:	4bb5 000b 4bbf 000b 4bc9 000b 4bd3 000b     .K...K...K...K..
   b594c:	4bdd 000b 4be9 000b 4bf5 000b 4bfd 000b     .K...K...K...K..
   b595c:	4c05 000b 4c11 000b 4c19 000b 4c23 000b     .L...L...L..#L..
   b596c:	4c2d 000b 5925 252d 2d6d 6425 2554 3a48     -L..%Y-%m-%dT%H:
   b597c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b598c <_ZTV11USARTSerial>:
	...
   b5994:	4e7d 000b 4ee9 000b 4ec1 000b 4d19 000b     }N...N...N...M..
   b59a4:	4e91 000b 4ead 000b 4e9f 000b 4ebb 000b     .N...N...N...N..
   b59b4:	4e7f 000b 4e83 000b                         .N...N..

000b59bc <_ZTV9USBSerial>:
	...
   b59c4:	4f27 000b 4f8f 000b 4f65 000b 4d19 000b     'O...O..eO...M..
   b59d4:	4f57 000b 4f29 000b 4f39 000b 4f89 000b     WO..)O..9O...O..
   b59e4:	4f49 000b 4f21 000b                         IO..!O..

000b59ec <_ZTVN5spark9WiFiClassE>:
	...
   b59f4:	5087 000b 507d 000b 5073 000b 5029 000b     .P..}P..sP..)P..
   b5a04:	5067 000b 505b 000b 4bf5 000b 4bfd 000b     gP..[P...K...K..
   b5a14:	504f 000b 5047 000b 503d 000b 5033 000b     OP..GP..=P..3P..
   b5a24:	4c2d 000b                                   -L..

000b5a28 <_ZSt7nothrow>:
   b5a28:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5a38:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5a48:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5a58:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5a68:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5a78:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5a88:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5a99 <link_const_variable_data_end>:
   b5a99:	00          	.byte	0x00
	...

000b5a9c <link_constructors_location>:
   b5a9c:	000b4181 	.word	0x000b4181
   b5aa0:	000b49a5 	.word	0x000b49a5
   b5aa4:	000b4a1d 	.word	0x000b4a1d
   b5aa8:	000b4ba5 	.word	0x000b4ba5
   b5aac:	000b4d05 	.word	0x000b4d05
   b5ab0:	000b4e25 	.word	0x000b4e25
   b5ab4:	000b4e45 	.word	0x000b4e45
   b5ab8:	000b4e69 	.word	0x000b4e69
   b5abc:	000b5091 	.word	0x000b5091
