
/Users/andrewleonard/Desktop/LabAndProjects/BluetoothImplementation/target/4.0.0/argon/BluetoothImplementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a84  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6aa0  000b6aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6ac4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e638  000b6ac8  0001e638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000014c  2003e6a4  2003e6a4  0002e6a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6b34  000b6b34  00026b34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6b5c  000b6b5c  00026b5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000dae29  00000000  00000000  00026b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000d07f  00000000  00000000  00101989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00030f90  00000000  00000000  0010ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026a0  00000000  00000000  0013f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009310  00000000  00000000  00142038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003027c  00000000  00000000  0014b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d8db  00000000  00000000  0017b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012bc9f  00000000  00000000  001a8e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006db4  00000000  00000000  002d4b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f993 	bl	b6358 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f9b5 	bl	b63a8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e638 	.word	0x2003e638
   b4048:	000b6ac8 	.word	0x000b6ac8
   b404c:	2003e6a4 	.word	0x2003e6a4
   b4050:	2003e6a4 	.word	0x2003e6a4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ffdb 	bl	b6018 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6a70 	.word	0x000b6a70
   b407c:	000b6a94 	.word	0x000b6a94

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b870 	b.w	b4164 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f86e 	bl	b4166 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bf7b 	b.w	b5f88 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 ba97 	b.w	b45c4 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 ba95 	b.w	b45c4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 ba9b 	b.w	b45d4 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_Z12configureBLEv>:

BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
BleCharacteristic signalStrengthCharacteristic("strength", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
BleCharacteristic freeMemoryCharacteristic("freeMemory", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);

void configureBLE(){
   b40b0:	b570      	push	{r4, r5, r6, lr}
   b40b2:	b090      	sub	sp, #64	; 0x40
BLE.addCharacteristic(uptimeCharacteristic);
   b40b4:	f000 fdac 	bl	b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40b8:	4a26      	ldr	r2, [pc, #152]	; (b4154 <_Z12configureBLEv+0xa4>)
   b40ba:	4c27      	ldr	r4, [pc, #156]	; (b4158 <_Z12configureBLEv+0xa8>)
   b40bc:	4601      	mov	r1, r0
   b40be:	a80b      	add	r0, sp, #44	; 0x2c
   b40c0:	f001 fad2 	bl	b5668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40c4:	a80b      	add	r0, sp, #44	; 0x2c
   b40c6:	f000 fe8c 	bl	b4de2 <_ZN8particle17BleCharacteristicD1Ev>
BLE.addCharacteristic(signalStrengthCharacteristic);
   b40ca:	f000 fda1 	bl	b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40ce:	4a23      	ldr	r2, [pc, #140]	; (b415c <_Z12configureBLEv+0xac>)
   b40d0:	4601      	mov	r1, r0
   b40d2:	a80b      	add	r0, sp, #44	; 0x2c
   b40d4:	f001 fac8 	bl	b5668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40d8:	a80b      	add	r0, sp, #44	; 0x2c
   b40da:	f000 fe82 	bl	b4de2 <_ZN8particle17BleCharacteristicD1Ev>
BLE.addCharacteristic(freeMemoryCharacteristic);
   b40de:	f000 fd97 	bl	b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40e2:	4a1f      	ldr	r2, [pc, #124]	; (b4160 <_Z12configureBLEv+0xb0>)
   b40e4:	4601      	mov	r1, r0
   b40e6:	a80b      	add	r0, sp, #44	; 0x2c
   b40e8:	f001 fabe 	bl	b5668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40ec:	a80b      	add	r0, sp, #44	; 0x2c
   b40ee:	f000 fe78 	bl	b4de2 <_ZN8particle17BleCharacteristicD1Ev>

BleAdvertisingData advData;
   b40f2:	a803      	add	r0, sp, #12
   b40f4:	f000 ffab 	bl	b504e <_ZN8particle18BleAdvertisingDataC1Ev>

// Advertise our private service only
advData.appendServiceUUID(serviceUuid);
   b40f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b40fa:	ad06      	add	r5, sp, #24
   b40fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b40fe:	ad06      	add	r5, sp, #24
   b4100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4102:	6826      	ldr	r6, [r4, #0]
   b4104:	ac0b      	add	r4, sp, #44	; 0x2c
   b4106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4108:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b410a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b410c:	f000 fbf4 	bl	b48f8 <_ZNK8particle7BleUuid4typeEv>
   b4110:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4112:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4114:	b9b4      	cbnz	r4, b4144 <_Z12configureBLEv+0x94>
            uint16_t uuid16 = tempUUID.shorted();
   b4116:	f000 fc0b 	bl	b4930 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b411a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b411c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4120:	2302      	movs	r3, #2
   b4122:	f10d 020a 	add.w	r2, sp, #10
   b4126:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4128:	a803      	add	r0, sp, #12
   b412a:	f000 ff85 	bl	b5038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

// Continuously advertise when not connected
BLE.advertise(&advData);
   b412e:	f000 fd6f 	bl	b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4132:	2200      	movs	r2, #0
   b4134:	a903      	add	r1, sp, #12
   b4136:	f000 fdf8 	bl	b4d2a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b413a:	9803      	ldr	r0, [sp, #12]
   b413c:	f000 fa4a 	bl	b45d4 <free>

}
   b4140:	b010      	add	sp, #64	; 0x40
   b4142:	bd70      	pop	{r4, r5, r6, pc}
   b4144:	f000 fbf6 	bl	b4934 <_ZNK8particle7BleUuid8rawBytesEv>
   b4148:	2300      	movs	r3, #0
   b414a:	9300      	str	r3, [sp, #0]
   b414c:	4602      	mov	r2, r0
   b414e:	2310      	movs	r3, #16
   b4150:	2107      	movs	r1, #7
   b4152:	e7e9      	b.n	b4128 <_Z12configureBLEv+0x78>
   b4154:	2003e6c8 	.word	0x2003e6c8
   b4158:	2003e6a4 	.word	0x2003e6a4
   b415c:	2003e6c0 	.word	0x2003e6c0
   b4160:	2003e6b8 	.word	0x2003e6b8

000b4164 <setup>:


void setup() {

}
   b4164:	4770      	bx	lr

000b4166 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
configureBLE();
   b4166:	f7ff bfa3 	b.w	b40b0 <_Z12configureBLEv>

000b416a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b416a:	b082      	sub	sp, #8
   b416c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b416e:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4170:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4172:	9315      	str	r3, [sp, #84]	; 0x54
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4174:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4176:	e9c0 3300 	strd	r3, r3, [r0]
   b417a:	4606      	mov	r6, r0
   b417c:	4694      	mov	ip, r2
   b417e:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4182:	ac04      	add	r4, sp, #16
   b4184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4186:	682b      	ldr	r3, [r5, #0]
   b4188:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b418a:	ad1a      	add	r5, sp, #104	; 0x68
   b418c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b418e:	ac09      	add	r4, sp, #36	; 0x24
   b4190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4192:	682b      	ldr	r3, [r5, #0]
   b4194:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4196:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4198:	9302      	str	r3, [sp, #8]
   b419a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b419c:	9301      	str	r3, [sp, #4]
   b419e:	ab09      	add	r3, sp, #36	; 0x24
   b41a0:	9300      	str	r3, [sp, #0]
   b41a2:	4630      	mov	r0, r6
   b41a4:	ab04      	add	r3, sp, #16
   b41a6:	4662      	mov	r2, ip
   b41a8:	4639      	mov	r1, r7
   b41aa:	f001 f933 	bl	b5414 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b41ae:	4630      	mov	r0, r6
   b41b0:	b00f      	add	sp, #60	; 0x3c
   b41b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b41b6:	b002      	add	sp, #8
   b41b8:	4770      	bx	lr
	...

000b41bc <_GLOBAL__sub_I_lastUpdate>:

   b41bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("57f5ed37-d4e9-4b77-8917-c5f4c55e51d9"); // CHANGE ME
   b41c0:	4d2b      	ldr	r5, [pc, #172]	; (b4270 <_GLOBAL__sub_I_lastUpdate+0xb4>)
   b41c2:	b093      	sub	sp, #76	; 0x4c
SYSTEM_THREAD(ENABLED);
   b41c4:	2100      	movs	r1, #0
   b41c6:	2001      	movs	r0, #1
   b41c8:	f000 f978 	bl	b44bc <system_thread_set_state>
const BleUuid serviceUuid("57f5ed37-d4e9-4b77-8917-c5f4c55e51d9"); // CHANGE ME
   b41cc:	4929      	ldr	r1, [pc, #164]	; (b4274 <_GLOBAL__sub_I_lastUpdate+0xb8>)
   b41ce:	4628      	mov	r0, r5
   b41d0:	f000 fc30 	bl	b4a34 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic uptimeCharacteristic("uptime", BleCharacteristicProperty::NOTIFY, BleUuid("fdcf4a3f-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   b41d4:	f04f 0900 	mov.w	r9, #0
   b41d8:	4927      	ldr	r1, [pc, #156]	; (b4278 <_GLOBAL__sub_I_lastUpdate+0xbc>)
   b41da:	a80d      	add	r0, sp, #52	; 0x34
   b41dc:	f000 fc2a 	bl	b4a34 <_ZN8particle7BleUuidC1EPKc>
   b41e0:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
   b41e4:	462e      	mov	r6, r5
   b41e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b41e8:	f04f 0810 	mov.w	r8, #16
   b41ec:	eb0d 0408 	add.w	r4, sp, r8
   b41f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b41f2:	6833      	ldr	r3, [r6, #0]
   b41f4:	6023      	str	r3, [r4, #0]
   b41f6:	ac0e      	add	r4, sp, #56	; 0x38
   b41f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b41fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4202:	491e      	ldr	r1, [pc, #120]	; (b427c <_GLOBAL__sub_I_lastUpdate+0xc0>)
   b4204:	481e      	ldr	r0, [pc, #120]	; (b4280 <_GLOBAL__sub_I_lastUpdate+0xc4>)
   b4206:	4642      	mov	r2, r8
   b4208:	f7ff ffaf 	bl	b416a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic signalStrengthCharacteristic("strength", BleCharacteristicProperty::NOTIFY, BleUuid("cc97c20c-5822-4800-ade5-1f661d2133ee"), serviceUuid);
   b420c:	491d      	ldr	r1, [pc, #116]	; (b4284 <_GLOBAL__sub_I_lastUpdate+0xc8>)
   b420e:	a80d      	add	r0, sp, #52	; 0x34
   b4210:	f000 fc10 	bl	b4a34 <_ZN8particle7BleUuidC1EPKc>
   b4214:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
   b4218:	46ac      	mov	ip, r5
   b421a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b421e:	eb0d 0708 	add.w	r7, sp, r8
   b4222:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4224:	6833      	ldr	r3, [r6, #0]
   b4226:	603b      	str	r3, [r7, #0]
   b4228:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b422c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4232:	4915      	ldr	r1, [pc, #84]	; (b4288 <_GLOBAL__sub_I_lastUpdate+0xcc>)
   b4234:	4815      	ldr	r0, [pc, #84]	; (b428c <_GLOBAL__sub_I_lastUpdate+0xd0>)
   b4236:	4642      	mov	r2, r8
   b4238:	f7ff ff97 	bl	b416a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic freeMemoryCharacteristic("freeMemory", BleCharacteristicProperty::NOTIFY, BleUuid("d2b26bf3-9792-42fc-9e8a-41f6107df04c"), serviceUuid);
   b423c:	4914      	ldr	r1, [pc, #80]	; (b4290 <_GLOBAL__sub_I_lastUpdate+0xd4>)
   b423e:	a80d      	add	r0, sp, #52	; 0x34
   b4240:	f000 fbf8 	bl	b4a34 <_ZN8particle7BleUuidC1EPKc>
   b4244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4246:	eb0d 0708 	add.w	r7, sp, r8
   b424a:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
   b424e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4250:	6833      	ldr	r3, [r6, #0]
   b4252:	603b      	str	r3, [r7, #0]
   b4254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b4258:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b425c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b425e:	490d      	ldr	r1, [pc, #52]	; (b4294 <_GLOBAL__sub_I_lastUpdate+0xd8>)
   b4260:	480d      	ldr	r0, [pc, #52]	; (b4298 <_GLOBAL__sub_I_lastUpdate+0xdc>)
   b4262:	4642      	mov	r2, r8
   b4264:	f7ff ff81 	bl	b416a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4268:	b013      	add	sp, #76	; 0x4c
   b426a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b426e:	bf00      	nop
   b4270:	2003e6a4 	.word	0x2003e6a4
   b4274:	000b6530 	.word	0x000b6530
   b4278:	000b6555 	.word	0x000b6555
   b427c:	000b657a 	.word	0x000b657a
   b4280:	2003e6c8 	.word	0x2003e6c8
   b4284:	000b6581 	.word	0x000b6581
   b4288:	000b65a6 	.word	0x000b65a6
   b428c:	2003e6c0 	.word	0x2003e6c0
   b4290:	000b65af 	.word	0x000b65af
   b4294:	000b65d4 	.word	0x000b65d4
   b4298:	2003e6b8 	.word	0x2003e6b8

000b429c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b429c:	b508      	push	{r3, lr}
   b429e:	4b02      	ldr	r3, [pc, #8]	; (b42a8 <hal_ble_stack_init+0xc>)
   b42a0:	681b      	ldr	r3, [r3, #0]
   b42a2:	689b      	ldr	r3, [r3, #8]
   b42a4:	9301      	str	r3, [sp, #4]
   b42a6:	bd08      	pop	{r3, pc}
   b42a8:	00030278 	.word	0x00030278

000b42ac <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b42ac:	b508      	push	{r3, lr}
   b42ae:	4b02      	ldr	r3, [pc, #8]	; (b42b8 <hal_ble_gap_set_advertising_data+0xc>)
   b42b0:	681b      	ldr	r3, [r3, #0]
   b42b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b42b4:	9301      	str	r3, [sp, #4]
   b42b6:	bd08      	pop	{r3, pc}
   b42b8:	00030278 	.word	0x00030278

000b42bc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b42bc:	b508      	push	{r3, lr}
   b42be:	4b02      	ldr	r3, [pc, #8]	; (b42c8 <hal_ble_gap_set_scan_response_data+0xc>)
   b42c0:	681b      	ldr	r3, [r3, #0]
   b42c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b42c4:	9301      	str	r3, [sp, #4]
   b42c6:	bd08      	pop	{r3, pc}
   b42c8:	00030278 	.word	0x00030278

000b42cc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b42cc:	b508      	push	{r3, lr}
   b42ce:	4b02      	ldr	r3, [pc, #8]	; (b42d8 <hal_ble_gap_start_advertising+0xc>)
   b42d0:	681b      	ldr	r3, [r3, #0]
   b42d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b42d4:	9301      	str	r3, [sp, #4]
   b42d6:	bd08      	pop	{r3, pc}
   b42d8:	00030278 	.word	0x00030278

000b42dc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b42dc:	b508      	push	{r3, lr}
   b42de:	4b03      	ldr	r3, [pc, #12]	; (b42ec <hal_ble_gap_disconnect+0x10>)
   b42e0:	681b      	ldr	r3, [r3, #0]
   b42e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b42e6:	9301      	str	r3, [sp, #4]
   b42e8:	bd08      	pop	{r3, pc}
   b42ea:	0000      	.short	0x0000
   b42ec:	00030278 	.word	0x00030278

000b42f0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b03      	ldr	r3, [pc, #12]	; (b4300 <hal_ble_gatt_server_add_service+0x10>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b42fa:	9301      	str	r3, [sp, #4]
   b42fc:	bd08      	pop	{r3, pc}
   b42fe:	0000      	.short	0x0000
   b4300:	00030278 	.word	0x00030278

000b4304 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b03      	ldr	r3, [pc, #12]	; (b4314 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b430e:	9301      	str	r3, [sp, #4]
   b4310:	bd08      	pop	{r3, pc}
   b4312:	0000      	.short	0x0000
   b4314:	00030278 	.word	0x00030278

000b4318 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b03      	ldr	r3, [pc, #12]	; (b4328 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4322:	9301      	str	r3, [sp, #4]
   b4324:	bd08      	pop	{r3, pc}
   b4326:	0000      	.short	0x0000
   b4328:	00030278 	.word	0x00030278

000b432c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b432c:	b508      	push	{r3, lr}
   b432e:	4b02      	ldr	r3, [pc, #8]	; (b4338 <os_mutex_recursive_create+0xc>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	bd08      	pop	{r3, pc}
   b4338:	00030248 	.word	0x00030248

000b433c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b433c:	b508      	push	{r3, lr}
   b433e:	4b02      	ldr	r3, [pc, #8]	; (b4348 <os_mutex_recursive_lock+0xc>)
   b4340:	681b      	ldr	r3, [r3, #0]
   b4342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4344:	9301      	str	r3, [sp, #4]
   b4346:	bd08      	pop	{r3, pc}
   b4348:	00030248 	.word	0x00030248

000b434c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b434c:	b508      	push	{r3, lr}
   b434e:	4b02      	ldr	r3, [pc, #8]	; (b4358 <os_mutex_recursive_unlock+0xc>)
   b4350:	681b      	ldr	r3, [r3, #0]
   b4352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4354:	9301      	str	r3, [sp, #4]
   b4356:	bd08      	pop	{r3, pc}
   b4358:	00030248 	.word	0x00030248

000b435c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b02      	ldr	r3, [pc, #8]	; (b4368 <HAL_RNG_GetRandomNumber+0xc>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	685b      	ldr	r3, [r3, #4]
   b4364:	9301      	str	r3, [sp, #4]
   b4366:	bd08      	pop	{r3, pc}
   b4368:	00030218 	.word	0x00030218

000b436c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b436c:	b508      	push	{r3, lr}
   b436e:	4b02      	ldr	r3, [pc, #8]	; (b4378 <HAL_Delay_Microseconds+0xc>)
   b4370:	681b      	ldr	r3, [r3, #0]
   b4372:	68db      	ldr	r3, [r3, #12]
   b4374:	9301      	str	r3, [sp, #4]
   b4376:	bd08      	pop	{r3, pc}
   b4378:	00030218 	.word	0x00030218

000b437c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	695b      	ldr	r3, [r3, #20]
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	00030218 	.word	0x00030218

000b438c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <inet_inet_ntop+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	695b      	ldr	r3, [r3, #20]
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030264 	.word	0x00030264

000b439c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <netdb_freeaddrinfo+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	689b      	ldr	r3, [r3, #8]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030268 	.word	0x00030268

000b43ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <netdb_getaddrinfo+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	68db      	ldr	r3, [r3, #12]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	00030268 	.word	0x00030268

000b43bc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <hal_usart_write+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	68db      	ldr	r3, [r3, #12]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	0003023c 	.word	0x0003023c

000b43cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <hal_usart_available+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	691b      	ldr	r3, [r3, #16]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	0003023c 	.word	0x0003023c

000b43dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_usart_read+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	695b      	ldr	r3, [r3, #20]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	0003023c 	.word	0x0003023c

000b43ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_usart_peek+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	699b      	ldr	r3, [r3, #24]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003023c 	.word	0x0003023c

000b43fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_usart_flush+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	69db      	ldr	r3, [r3, #28]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003023c 	.word	0x0003023c

000b440c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <hal_usart_available_data_for_write+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	0003023c 	.word	0x0003023c

000b441c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <hal_usart_init_ex+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	0003023c 	.word	0x0003023c

000b442c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <HAL_USB_USART_Init+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	681b      	ldr	r3, [r3, #0]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003024c 	.word	0x0003024c

000b443c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <HAL_USB_USART_Available_Data+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	691b      	ldr	r3, [r3, #16]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003024c 	.word	0x0003024c

000b444c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	695b      	ldr	r3, [r3, #20]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	0003024c 	.word	0x0003024c

000b445c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <HAL_USB_USART_Receive_Data+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	699b      	ldr	r3, [r3, #24]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	0003024c 	.word	0x0003024c

000b446c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <HAL_USB_USART_Send_Data+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	69db      	ldr	r3, [r3, #28]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003024c 	.word	0x0003024c

000b447c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <HAL_USB_USART_Flush_Data+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6a1b      	ldr	r3, [r3, #32]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	0003024c 	.word	0x0003024c

000b448c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <panic_+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030260 	.word	0x00030260

000b449c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <log_message+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030260 	.word	0x00030260

000b44ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <set_system_mode+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	685b      	ldr	r3, [r3, #4]
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030220 	.word	0x00030220

000b44bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <system_thread_set_state+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030220 	.word	0x00030220

000b44cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b03      	ldr	r3, [pc, #12]	; (b44dc <system_ctrl_set_app_request_handler+0x10>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b44d6:	9301      	str	r3, [sp, #4]
   b44d8:	bd08      	pop	{r3, pc}
   b44da:	0000      	.short	0x0000
   b44dc:	00030220 	.word	0x00030220

000b44e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b03      	ldr	r3, [pc, #12]	; (b44f0 <system_ctrl_set_result+0x10>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b44ea:	9301      	str	r3, [sp, #4]
   b44ec:	bd08      	pop	{r3, pc}
   b44ee:	0000      	.short	0x0000
   b44f0:	00030220 	.word	0x00030220

000b44f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <spark_set_random_seed_from_cloud_handler+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030244 	.word	0x00030244

000b4504 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <network_connect+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	685b      	ldr	r3, [r3, #4]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	00030240 	.word	0x00030240

000b4514 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <network_connecting+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	689b      	ldr	r3, [r3, #8]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	00030240 	.word	0x00030240

000b4524 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <network_disconnect+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	68db      	ldr	r3, [r3, #12]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	00030240 	.word	0x00030240

000b4534 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <network_ready+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	691b      	ldr	r3, [r3, #16]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030240 	.word	0x00030240

000b4544 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <network_on+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	695b      	ldr	r3, [r3, #20]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030240 	.word	0x00030240

000b4554 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <network_off+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	699b      	ldr	r3, [r3, #24]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030240 	.word	0x00030240

000b4564 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <network_listen+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	69db      	ldr	r3, [r3, #28]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030240 	.word	0x00030240

000b4574 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <network_listening+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6a1b      	ldr	r3, [r3, #32]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030240 	.word	0x00030240

000b4584 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <network_set_listen_timeout+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030240 	.word	0x00030240

000b4594 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <network_get_listen_timeout+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030240 	.word	0x00030240

000b45a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <network_is_on+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030240 	.word	0x00030240

000b45b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <network_is_off+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030240 	.word	0x00030240

000b45c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <malloc+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	681b      	ldr	r3, [r3, #0]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003021c 	.word	0x0003021c

000b45d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <free+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	685b      	ldr	r3, [r3, #4]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003021c 	.word	0x0003021c

000b45e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <realloc+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	689b      	ldr	r3, [r3, #8]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003021c 	.word	0x0003021c

000b45f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <abort+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003021c 	.word	0x0003021c

000b4604 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <__assert_func+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	0003021c 	.word	0x0003021c

000b4614 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <newlib_impure_ptr_callback+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	0003021c 	.word	0x0003021c

000b4624 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4624:	4770      	bx	lr

000b4626 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4626:	4770      	bx	lr

000b4628 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4628:	4770      	bx	lr

000b462a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b462a:	4770      	bx	lr

000b462c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b462c:	4b06      	ldr	r3, [pc, #24]	; (b4648 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b462e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4630:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4632:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4636:	d005      	beq.n	b4644 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4638:	4608      	mov	r0, r1
   b463a:	f001 fd65 	bl	b6108 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b463e:	2800      	cmp	r0, #0
   b4640:	bf08      	it	eq
   b4642:	2400      	moveq	r4, #0
      }
   b4644:	4620      	mov	r0, r4
   b4646:	bd10      	pop	{r4, pc}
   b4648:	000b6780 	.word	0x000b6780

000b464c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b464c:	4b06      	ldr	r3, [pc, #24]	; (b4668 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b464e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4650:	b510      	push	{r4, lr}
   b4652:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4656:	d005      	beq.n	b4664 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4658:	4608      	mov	r0, r1
   b465a:	f001 fd55 	bl	b6108 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b465e:	2800      	cmp	r0, #0
   b4660:	bf08      	it	eq
   b4662:	2400      	moveq	r4, #0
      }
   b4664:	4620      	mov	r0, r4
   b4666:	bd10      	pop	{r4, pc}
   b4668:	000b6780 	.word	0x000b6780

000b466c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b466c:	4b06      	ldr	r3, [pc, #24]	; (b4688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b466e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4670:	b510      	push	{r4, lr}
   b4672:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4676:	d005      	beq.n	b4684 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4678:	4608      	mov	r0, r1
   b467a:	f001 fd45 	bl	b6108 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b467e:	2800      	cmp	r0, #0
   b4680:	bf08      	it	eq
   b4682:	2400      	moveq	r4, #0
      }
   b4684:	4620      	mov	r0, r4
   b4686:	bd10      	pop	{r4, pc}
   b4688:	000b6780 	.word	0x000b6780

000b468c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b468c:	b510      	push	{r4, lr}
   b468e:	2168      	movs	r1, #104	; 0x68
   b4690:	4604      	mov	r4, r0
   b4692:	f7ff fd02 	bl	b409a <_ZdlPvj>
   b4696:	4620      	mov	r0, r4
   b4698:	bd10      	pop	{r4, pc}

000b469a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b469a:	b510      	push	{r4, lr}
   b469c:	2128      	movs	r1, #40	; 0x28
   b469e:	4604      	mov	r4, r0
   b46a0:	f7ff fcfb 	bl	b409a <_ZdlPvj>
   b46a4:	4620      	mov	r0, r4
   b46a6:	bd10      	pop	{r4, pc}

000b46a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b46a8:	b510      	push	{r4, lr}
   b46aa:	2130      	movs	r1, #48	; 0x30
   b46ac:	4604      	mov	r4, r0
   b46ae:	f7ff fcf4 	bl	b409a <_ZdlPvj>
   b46b2:	4620      	mov	r0, r4
   b46b4:	bd10      	pop	{r4, pc}

000b46b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b46b6:	2168      	movs	r1, #104	; 0x68
   b46b8:	f7ff bcef 	b.w	b409a <_ZdlPvj>

000b46bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b46bc:	2128      	movs	r1, #40	; 0x28
   b46be:	f7ff bcec 	b.w	b409a <_ZdlPvj>

000b46c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b46c2:	2130      	movs	r1, #48	; 0x30
   b46c4:	f7ff bce9 	b.w	b409a <_ZdlPvj>

000b46c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b46ca:	2500      	movs	r5, #0
   b46cc:	1cec      	adds	r4, r5, #3
   b46ce:	428c      	cmp	r4, r1
   b46d0:	d80d      	bhi.n	b46ee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b46d2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b46d4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b46d6:	5d87      	ldrb	r7, [r0, r6]
   b46d8:	4297      	cmp	r7, r2
   b46da:	d105      	bne.n	b46e8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b46dc:	4426      	add	r6, r4
   b46de:	42b1      	cmp	r1, r6
   b46e0:	d305      	bcc.n	b46ee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b46e2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b46e4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b46e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b46e8:	3401      	adds	r4, #1
   b46ea:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b46ec:	e7ee      	b.n	b46cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b46ee:	2000      	movs	r0, #0
   b46f0:	e7f9      	b.n	b46e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b46f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b46f4:	4a02      	ldr	r2, [pc, #8]	; (b4700 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b46f6:	4903      	ldr	r1, [pc, #12]	; (b4704 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b46f8:	200a      	movs	r0, #10
   b46fa:	f7ff bec7 	b.w	b448c <panic_>
   b46fe:	bf00      	nop
   b4700:	000b436d 	.word	0x000b436d
   b4704:	000b65df 	.word	0x000b65df

000b4708 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4708:	b430      	push	{r4, r5}
   b470a:	460d      	mov	r5, r1
   b470c:	4611      	mov	r1, r2
   b470e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4710:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4712:	6809      	ldr	r1, [r1, #0]
   b4714:	6828      	ldr	r0, [r5, #0]
   b4716:	e9d3 4300 	ldrd	r4, r3, [r3]
   b471a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b471c:	bc30      	pop	{r4, r5}
   b471e:	4760      	bx	ip

000b4720 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4720:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4722:	b538      	push	{r3, r4, r5, lr}
   b4724:	4604      	mov	r4, r0
	switch (__op)
   b4726:	d102      	bne.n	b472e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4728:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b472a:	6023      	str	r3, [r4, #0]
	}
   b472c:	e003      	b.n	b4736 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b472e:	2a02      	cmp	r2, #2
   b4730:	d003      	beq.n	b473a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4732:	2a03      	cmp	r2, #3
   b4734:	d00d      	beq.n	b4752 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4736:	2000      	movs	r0, #0
   b4738:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b473a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b473c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b473e:	f7ff fca8 	bl	b4092 <_Znwj>
   b4742:	4603      	mov	r3, r0
   b4744:	2800      	cmp	r0, #0
   b4746:	d0f0      	beq.n	b472a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4748:	e895 0003 	ldmia.w	r5, {r0, r1}
   b474c:	e883 0003 	stmia.w	r3, {r0, r1}
   b4750:	e7eb      	b.n	b472a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4752:	6800      	ldr	r0, [r0, #0]
   b4754:	2800      	cmp	r0, #0
   b4756:	d0ee      	beq.n	b4736 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4758:	2108      	movs	r1, #8
   b475a:	f7ff fc9e 	bl	b409a <_ZdlPvj>
   b475e:	e7ea      	b.n	b4736 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4760 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4760:	b510      	push	{r4, lr}
      if (_M_manager)
   b4762:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4764:	4604      	mov	r4, r0
      if (_M_manager)
   b4766:	b113      	cbz	r3, b476e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4768:	2203      	movs	r2, #3
   b476a:	4601      	mov	r1, r0
   b476c:	4798      	blx	r3
    }
   b476e:	4620      	mov	r0, r4
   b4770:	bd10      	pop	{r4, pc}

000b4772 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4772:	b510      	push	{r4, lr}
   b4774:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4776:	3058      	adds	r0, #88	; 0x58
   b4778:	f7ff fff2 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b477c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4784:	f001 ba40 	b.w	b5c08 <_ZN6StringD1Ev>

000b4788 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4788:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b478a:	6843      	ldr	r3, [r0, #4]
   b478c:	3b01      	subs	r3, #1
    {
   b478e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4790:	6043      	str	r3, [r0, #4]
   b4792:	b963      	cbnz	r3, b47ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4794:	6803      	ldr	r3, [r0, #0]
   b4796:	689b      	ldr	r3, [r3, #8]
   b4798:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b479a:	68a3      	ldr	r3, [r4, #8]
   b479c:	3b01      	subs	r3, #1
   b479e:	60a3      	str	r3, [r4, #8]
   b47a0:	b92b      	cbnz	r3, b47ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b47a2:	6823      	ldr	r3, [r4, #0]
   b47a4:	4620      	mov	r0, r4
   b47a6:	68db      	ldr	r3, [r3, #12]
    }
   b47a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b47ac:	4718      	bx	r3
    }
   b47ae:	bd10      	pop	{r4, pc}

000b47b0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b47b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b47b4:	b2da      	uxtb	r2, r3
   b47b6:	2a09      	cmp	r2, #9
   b47b8:	d801      	bhi.n	b47be <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b47ba:	4618      	mov	r0, r3
   b47bc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b47be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b47c2:	2b05      	cmp	r3, #5
   b47c4:	d801      	bhi.n	b47ca <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b47c6:	3857      	subs	r0, #87	; 0x57
   b47c8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b47ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b47ce:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b47d0:	bf94      	ite	ls
   b47d2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b47d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b47d8:	4770      	bx	lr
	...

000b47dc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b47dc:	b510      	push	{r4, lr}
            locked_(false) {
   b47de:	2300      	movs	r3, #0
   b47e0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b47e2:	4b04      	ldr	r3, [pc, #16]	; (b47f4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b47e4:	4604      	mov	r4, r0
   b47e6:	6818      	ldr	r0, [r3, #0]
   b47e8:	f7ff fda8 	bl	b433c <os_mutex_recursive_lock>
        locked_ = true;
   b47ec:	2301      	movs	r3, #1
   b47ee:	7023      	strb	r3, [r4, #0]
    }
   b47f0:	4620      	mov	r0, r4
   b47f2:	bd10      	pop	{r4, pc}
   b47f4:	2003e6d8 	.word	0x2003e6d8

000b47f8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b47f8:	b510      	push	{r4, lr}
        if (locked_) {
   b47fa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b47fc:	4604      	mov	r4, r0
        if (locked_) {
   b47fe:	b11b      	cbz	r3, b4808 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4800:	4b02      	ldr	r3, [pc, #8]	; (b480c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4802:	6818      	ldr	r0, [r3, #0]
   b4804:	f7ff fda2 	bl	b434c <os_mutex_recursive_unlock>
    }
   b4808:	4620      	mov	r0, r4
   b480a:	bd10      	pop	{r4, pc}
   b480c:	2003e6d8 	.word	0x2003e6d8

000b4810 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4810:	b082      	sub	sp, #8
   b4812:	4603      	mov	r3, r0
    address_ = addr;
   b4814:	6808      	ldr	r0, [r1, #0]
   b4816:	6849      	ldr	r1, [r1, #4]
   b4818:	466a      	mov	r2, sp
   b481a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b481c:	466a      	mov	r2, sp
   b481e:	ca03      	ldmia	r2!, {r0, r1}
   b4820:	6018      	str	r0, [r3, #0]
}
   b4822:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4824:	6059      	str	r1, [r3, #4]
}
   b4826:	b002      	add	sp, #8
   b4828:	4770      	bx	lr

000b482a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b482a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b482c:	7982      	ldrb	r2, [r0, #6]
   b482e:	798b      	ldrb	r3, [r1, #6]
   b4830:	429a      	cmp	r2, r3
   b4832:	d106      	bne.n	b4842 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4834:	2206      	movs	r2, #6
   b4836:	f001 fd7f 	bl	b6338 <memcmp>
   b483a:	fab0 f080 	clz	r0, r0
   b483e:	0940      	lsrs	r0, r0, #5
}
   b4840:	bd08      	pop	{r3, pc}
    return false;
   b4842:	2000      	movs	r0, #0
   b4844:	e7fc      	b.n	b4840 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4846 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b484a:	6003      	str	r3, [r0, #0]
   b484c:	8083      	strh	r3, [r0, #4]
}
   b484e:	2000      	movs	r0, #0
   b4850:	4770      	bx	lr

000b4852 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4852:	b508      	push	{r3, lr}
   b4854:	4602      	mov	r2, r0
        : address_{} {
   b4856:	2100      	movs	r1, #0
   b4858:	6001      	str	r1, [r0, #0]
   b485a:	6041      	str	r1, [r0, #4]
    clear();
   b485c:	f7ff fff3 	bl	b4846 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4860:	7191      	strb	r1, [r2, #6]
}
   b4862:	4610      	mov	r0, r2
   b4864:	bd08      	pop	{r3, pc}
	...

000b4868 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4868:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b486a:	2301      	movs	r3, #1
   b486c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b486e:	4b05      	ldr	r3, [pc, #20]	; (b4884 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4870:	4602      	mov	r2, r0
   b4872:	f103 0110 	add.w	r1, r3, #16
   b4876:	f853 4b04 	ldr.w	r4, [r3], #4
   b487a:	f842 4b04 	str.w	r4, [r2], #4
   b487e:	428b      	cmp	r3, r1
   b4880:	d1f9      	bne.n	b4876 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4882:	bd10      	pop	{r4, pc}
   b4884:	000b678e 	.word	0x000b678e

000b4888 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4888:	b510      	push	{r4, lr}
    if (uuid128) {
   b488a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b488c:	4604      	mov	r4, r0
    if (uuid128) {
   b488e:	b1b1      	cbz	r1, b48be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4890:	2a01      	cmp	r2, #1
   b4892:	f101 0210 	add.w	r2, r1, #16
   b4896:	d10a      	bne.n	b48ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4898:	4601      	mov	r1, r0
   b489a:	f853 0b04 	ldr.w	r0, [r3], #4
   b489e:	f841 0b04 	str.w	r0, [r1], #4
   b48a2:	4293      	cmp	r3, r2
   b48a4:	d1f9      	bne.n	b489a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b48a6:	2301      	movs	r3, #1
   b48a8:	6123      	str	r3, [r4, #16]
}
   b48aa:	4620      	mov	r0, r4
   b48ac:	bd10      	pop	{r4, pc}
   b48ae:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b48b0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b48b4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b48b8:	429a      	cmp	r2, r3
   b48ba:	d1f9      	bne.n	b48b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b48bc:	e7f3      	b.n	b48a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b48be:	2210      	movs	r2, #16
   b48c0:	f001 fd72 	bl	b63a8 <memset>
   b48c4:	e7f1      	b.n	b48aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b48c6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b48c6:	b538      	push	{r3, r4, r5, lr}
   b48c8:	4604      	mov	r4, r0
   b48ca:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b48cc:	461a      	mov	r2, r3
   b48ce:	f7ff ffdb 	bl	b4888 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b48d2:	81a5      	strh	r5, [r4, #12]
}
   b48d4:	4620      	mov	r0, r4
   b48d6:	bd38      	pop	{r3, r4, r5, pc}

000b48d8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b48d8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b48da:	6902      	ldr	r2, [r0, #16]
   b48dc:	b922      	cbnz	r2, b48e8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b48de:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b48e0:	3800      	subs	r0, #0
   b48e2:	bf18      	it	ne
   b48e4:	2001      	movne	r0, #1
}
   b48e6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b48e8:	4902      	ldr	r1, [pc, #8]	; (b48f4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b48ea:	2210      	movs	r2, #16
   b48ec:	f001 fd24 	bl	b6338 <memcmp>
   b48f0:	e7f6      	b.n	b48e0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b48f2:	bf00      	nop
   b48f4:	000b67ae 	.word	0x000b67ae

000b48f8 <_ZNK8particle7BleUuid4typeEv>:
}
   b48f8:	6900      	ldr	r0, [r0, #16]
   b48fa:	4770      	bx	lr

000b48fc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b48fc:	b538      	push	{r3, r4, r5, lr}
   b48fe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b4900:	2214      	movs	r2, #20
   b4902:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b4904:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b4906:	f001 fd4f 	bl	b63a8 <memset>
    if (type_ == BleUuidType::SHORT) {
   b490a:	6923      	ldr	r3, [r4, #16]
   b490c:	b91b      	cbnz	r3, b4916 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b490e:	89a3      	ldrh	r3, [r4, #12]
   b4910:	802b      	strh	r3, [r5, #0]
}
   b4912:	4628      	mov	r0, r5
   b4914:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b4916:	2301      	movs	r3, #1
   b4918:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b491a:	4621      	mov	r1, r4
   b491c:	462b      	mov	r3, r5
   b491e:	f104 0210 	add.w	r2, r4, #16
   b4922:	f851 0b04 	ldr.w	r0, [r1], #4
   b4926:	f843 0b04 	str.w	r0, [r3], #4
   b492a:	4291      	cmp	r1, r2
   b492c:	d1f9      	bne.n	b4922 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b492e:	e7f0      	b.n	b4912 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b4930 <_ZNK8particle7BleUuid7shortedEv>:
}
   b4930:	8980      	ldrh	r0, [r0, #12]
   b4932:	4770      	bx	lr

000b4934 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b4934:	4770      	bx	lr

000b4936 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4936:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4938:	6902      	ldr	r2, [r0, #16]
   b493a:	690b      	ldr	r3, [r1, #16]
   b493c:	429a      	cmp	r2, r3
   b493e:	d106      	bne.n	b494e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4940:	2210      	movs	r2, #16
   b4942:	f001 fcf9 	bl	b6338 <memcmp>
   b4946:	fab0 f080 	clz	r0, r0
   b494a:	0940      	lsrs	r0, r0, #5
}
   b494c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b494e:	2000      	movs	r0, #0
   b4950:	e7fc      	b.n	b494c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4954 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4954:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4956:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b495a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b495c:	4b34      	ldr	r3, [pc, #208]	; (b4a30 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b495e:	460c      	mov	r4, r1
   b4960:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4962:	4602      	mov	r2, r0
   b4964:	f103 0110 	add.w	r1, r3, #16
   b4968:	f853 0b04 	ldr.w	r0, [r3], #4
   b496c:	f842 0b04 	str.w	r0, [r2], #4
   b4970:	428b      	cmp	r3, r1
   b4972:	d1f9      	bne.n	b4968 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4974:	b344      	cbz	r4, b49c8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4976:	2124      	movs	r1, #36	; 0x24
   b4978:	4620      	mov	r0, r4
   b497a:	f001 fd5d 	bl	b6438 <strnlen>
   b497e:	2804      	cmp	r0, #4
   b4980:	f04f 0500 	mov.w	r5, #0
   b4984:	d123      	bne.n	b49ce <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4986:	f8ad 5004 	strh.w	r5, [sp, #4]
   b498a:	af01      	add	r7, sp, #4
   b498c:	1ca5      	adds	r5, r4, #2
   b498e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4990:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4994:	f7ff ff0c 	bl	b47b0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4998:	f1b0 0800 	subs.w	r8, r0, #0
   b499c:	db12      	blt.n	b49c4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b499e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b49a2:	f7ff ff05 	bl	b47b0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b49a6:	2800      	cmp	r0, #0
   b49a8:	db0c      	blt.n	b49c4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b49aa:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b49ac:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b49b0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b49b2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b49b6:	d1eb      	bne.n	b4990 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b49b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b49bc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b49be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b49c2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b49c4:	2300      	movs	r3, #0
   b49c6:	6133      	str	r3, [r6, #16]
}
   b49c8:	b002      	add	sp, #8
   b49ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b49ce:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b49d2:	2124      	movs	r1, #36	; 0x24
   b49d4:	4620      	mov	r0, r4
   b49d6:	f001 fd2f 	bl	b6438 <strnlen>
   b49da:	42a8      	cmp	r0, r5
   b49dc:	d807      	bhi.n	b49ee <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b49de:	4642      	mov	r2, r8
   b49e0:	2100      	movs	r1, #0
   b49e2:	4630      	mov	r0, r6
}
   b49e4:	b002      	add	sp, #8
   b49e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b49ea:	f001 bcdd 	b.w	b63a8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b49ee:	f1b8 0f00 	cmp.w	r8, #0
   b49f2:	d0e9      	beq.n	b49c8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b49f4:	5d60      	ldrb	r0, [r4, r5]
   b49f6:	f7ff fedb 	bl	b47b0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b49fa:	0603      	lsls	r3, r0, #24
   b49fc:	d415      	bmi.n	b4a2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b49fe:	0100      	lsls	r0, r0, #4
   b4a00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b4a04:	b2c7      	uxtb	r7, r0
   b4a06:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4a0a:	2124      	movs	r1, #36	; 0x24
   b4a0c:	4620      	mov	r0, r4
   b4a0e:	f001 fd13 	bl	b6438 <strnlen>
   b4a12:	3501      	adds	r5, #1
   b4a14:	42a8      	cmp	r0, r5
   b4a16:	d908      	bls.n	b4a2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4a18:	5d60      	ldrb	r0, [r4, r5]
   b4a1a:	f7ff fec9 	bl	b47b0 <_ZN8particle11hexToNibbleEc>
   b4a1e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4a20:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4a22:	bfa4      	itt	ge
   b4a24:	4338      	orrge	r0, r7
   b4a26:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4a2a:	3501      	adds	r5, #1
   b4a2c:	e7d1      	b.n	b49d2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4a2e:	bf00      	nop
   b4a30:	000b678e 	.word	0x000b678e

000b4a34 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4a34:	b513      	push	{r0, r1, r4, lr}
   b4a36:	4604      	mov	r4, r0
   b4a38:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4a3a:	f7ff ff15 	bl	b4868 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4a3e:	4620      	mov	r0, r4
   b4a40:	9901      	ldr	r1, [sp, #4]
   b4a42:	f7ff ff87 	bl	b4954 <_ZN8particle7BleUuid9constructEPKc>
}
   b4a46:	4620      	mov	r0, r4
   b4a48:	b002      	add	sp, #8
   b4a4a:	bd10      	pop	{r4, pc}

000b4a4c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b4a4c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b4a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4a52:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b4a54:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b4a56:	8043      	strh	r3, [r0, #2]
   b4a58:	220e      	movs	r2, #14
   b4a5a:	4629      	mov	r1, r5
   b4a5c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4a5e:	7105      	strb	r5, [r0, #4]
   b4a60:	3006      	adds	r0, #6
   b4a62:	f001 fca1 	bl	b63a8 <memset>
   b4a66:	f104 0014 	add.w	r0, r4, #20
   b4a6a:	f7ff fefd 	bl	b4868 <_ZN8particle7BleUuidC1Ev>
   b4a6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4a72:	f7ff fef9 	bl	b4868 <_ZN8particle7BleUuidC1Ev>
   b4a76:	4904      	ldr	r1, [pc, #16]	; (b4a88 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b4a78:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4a7c:	f001 f90f 	bl	b5c9e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b4a80:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b4a82:	4620      	mov	r0, r4
   b4a84:	bd38      	pop	{r3, r4, r5, pc}
   b4a86:	bf00      	nop
   b4a88:	000b6676 	.word	0x000b6676

000b4a8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b4a8c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4a8e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b4a92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b4a96:	4293      	cmp	r3, r2
   b4a98:	4618      	mov	r0, r3
   b4a9a:	d006      	beq.n	b4aaa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b4a9c:	6804      	ldr	r4, [r0, #0]
   b4a9e:	8824      	ldrh	r4, [r4, #0]
   b4aa0:	428c      	cmp	r4, r1
   b4aa2:	f103 0308 	add.w	r3, r3, #8
   b4aa6:	d1f6      	bne.n	b4a96 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b4aa8:	bd10      	pop	{r4, pc}
        return nullptr;
   b4aaa:	2000      	movs	r0, #0
   b4aac:	e7fc      	b.n	b4aa8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b4ab0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b4ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b4ab4:	2600      	movs	r6, #0
   b4ab6:	6006      	str	r6, [r0, #0]
   b4ab8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4aba:	2028      	movs	r0, #40	; 0x28
   b4abc:	460c      	mov	r4, r1
   b4abe:	f7ff fae8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b4ac2:	1e05      	subs	r5, r0, #0
   b4ac4:	f105 080c 	add.w	r8, r5, #12
   b4ac8:	d00f      	beq.n	b4aea <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b4aca:	2301      	movs	r3, #1
   b4acc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b4ad0:	4b08      	ldr	r3, [pc, #32]	; (b4af4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b4ad2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b4ad4:	4640      	mov	r0, r8
   b4ad6:	f7ff fec7 	bl	b4868 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b4ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b4adc:	622e      	str	r6, [r5, #32]
   b4ade:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b4ae2:	4646      	mov	r6, r8
   b4ae4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4ae6:	6823      	ldr	r3, [r4, #0]
   b4ae8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b4aea:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b4aee:	4638      	mov	r0, r7
   b4af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4af4:	000b6750 	.word	0x000b6750

000b4af8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b4af8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b4afa:	2500      	movs	r5, #0
   b4afc:	6005      	str	r5, [r0, #0]
   b4afe:	4606      	mov	r6, r0
   b4b00:	2030      	movs	r0, #48	; 0x30
   b4b02:	f7ff fac6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b4b06:	4604      	mov	r4, r0
   b4b08:	b188      	cbz	r0, b4b2e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b4b0a:	2301      	movs	r3, #1
   b4b0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b4b10:	4b09      	ldr	r3, [pc, #36]	; (b4b38 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b4b12:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b4b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4b18:	8183      	strh	r3, [r0, #12]
   b4b1a:	300e      	adds	r0, #14
   b4b1c:	f7ff fe99 	bl	b4852 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b4b20:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b4b24:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b4b28:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b4b2c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b4b2e:	6074      	str	r4, [r6, #4]
   b4b30:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b4b32:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b4b34:	4630      	mov	r0, r6
   b4b36:	bd70      	pop	{r4, r5, r6, pc}
   b4b38:	000b676c 	.word	0x000b676c

000b4b3c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b4b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b3e:	460d      	mov	r5, r1
   b4b40:	4604      	mov	r4, r0
    WiringBleLock lk;
   b4b42:	a801      	add	r0, sp, #4
   b4b44:	f7ff fe4a 	bl	b47dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b4b48:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b4b4a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b4b4e:	6023      	str	r3, [r4, #0]
   b4b50:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b4b54:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b4b56:	a801      	add	r0, sp, #4
   b4b58:	f7ff fe4e 	bl	b47f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	b003      	add	sp, #12
   b4b60:	bd30      	pop	{r4, r5, pc}

000b4b62 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b4b62:	b530      	push	{r4, r5, lr}
   b4b64:	4605      	mov	r5, r0
   b4b66:	b087      	sub	sp, #28
   b4b68:	460c      	mov	r4, r1
    WiringBleLock lk;
   b4b6a:	a801      	add	r0, sp, #4
   b4b6c:	f7ff fe36 	bl	b47dc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b4b70:	682a      	ldr	r2, [r5, #0]
   b4b72:	6823      	ldr	r3, [r4, #0]
   b4b74:	8812      	ldrh	r2, [r2, #0]
   b4b76:	881b      	ldrh	r3, [r3, #0]
   b4b78:	429a      	cmp	r2, r3
   b4b7a:	d10d      	bne.n	b4b98 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b4b7c:	4629      	mov	r1, r5
   b4b7e:	a802      	add	r0, sp, #8
   b4b80:	f7ff ffdc 	bl	b4b3c <_ZNK8particle13BlePeerDevice7addressEv>
   b4b84:	4621      	mov	r1, r4
   b4b86:	a804      	add	r0, sp, #16
   b4b88:	f7ff ffd8 	bl	b4b3c <_ZNK8particle13BlePeerDevice7addressEv>
   b4b8c:	a904      	add	r1, sp, #16
   b4b8e:	a802      	add	r0, sp, #8
   b4b90:	f7ff fe4b 	bl	b482a <_ZNK8particle10BleAddresseqERKS0_>
   b4b94:	4604      	mov	r4, r0
   b4b96:	b900      	cbnz	r0, b4b9a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b4b98:	2400      	movs	r4, #0
    WiringBleLock lk;
   b4b9a:	a801      	add	r0, sp, #4
   b4b9c:	f7ff fe2c 	bl	b47f8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	b007      	add	sp, #28
   b4ba4:	bd30      	pop	{r4, r5, pc}
	...

000b4ba8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b4ba8:	b510      	push	{r4, lr}
   b4baa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b4bac:	2064      	movs	r0, #100	; 0x64
   b4bae:	f7ff fa70 	bl	b4092 <_Znwj>
   b4bb2:	b168      	cbz	r0, b4bd0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b4bb4:	2300      	movs	r3, #0
   b4bb6:	e9c0 3300 	strd	r3, r3, [r0]
   b4bba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b4bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b4bc2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b4bc6:	6203      	str	r3, [r0, #32]
   b4bc8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b4bca:	63c3      	str	r3, [r0, #60]	; 0x3c
   b4bcc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b4bce:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b4bd0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b4bd2:	b920      	cbnz	r0, b4bde <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b4bd4:	4a0a      	ldr	r2, [pc, #40]	; (b4c00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b4bd6:	490b      	ldr	r1, [pc, #44]	; (b4c04 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b4bd8:	200a      	movs	r0, #10
   b4bda:	f7ff fc57 	bl	b448c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b4bde:	2000      	movs	r0, #0
   b4be0:	f7ff fb5c 	bl	b429c <hal_ble_stack_init>
   b4be4:	b120      	cbz	r0, b4bf0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b4be6:	4a06      	ldr	r2, [pc, #24]	; (b4c00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b4be8:	4907      	ldr	r1, [pc, #28]	; (b4c08 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b4bea:	200a      	movs	r0, #10
   b4bec:	f7ff fc4e 	bl	b448c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b4bf0:	6821      	ldr	r1, [r4, #0]
   b4bf2:	4806      	ldr	r0, [pc, #24]	; (b4c0c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b4bf4:	2200      	movs	r2, #0
   b4bf6:	f7ff fb8f 	bl	b4318 <hal_ble_set_callback_on_periph_link_events>
}
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	bd10      	pop	{r4, pc}
   b4bfe:	bf00      	nop
   b4c00:	000b436d 	.word	0x000b436d
   b4c04:	000b65df 	.word	0x000b65df
   b4c08:	000b661d 	.word	0x000b661d
   b4c0c:	000b5181 	.word	0x000b5181

000b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b4c10:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b4c12:	4c0a      	ldr	r4, [pc, #40]	; (b4c3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b4c14:	7823      	ldrb	r3, [r4, #0]
   b4c16:	f3bf 8f5b 	dmb	ish
   b4c1a:	07db      	lsls	r3, r3, #31
   b4c1c:	d40c      	bmi.n	b4c38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b4c1e:	4620      	mov	r0, r4
   b4c20:	f7ff fa3d 	bl	b409e <__cxa_guard_acquire>
   b4c24:	b140      	cbz	r0, b4c38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b4c26:	4806      	ldr	r0, [pc, #24]	; (b4c40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b4c28:	f7ff ffbe 	bl	b4ba8 <_ZN8particle14BleLocalDeviceC1Ev>
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f7ff fa3b 	bl	b40a8 <__cxa_guard_release>
   b4c32:	4804      	ldr	r0, [pc, #16]	; (b4c44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b4c34:	f001 fb7a 	bl	b632c <atexit>
    return instance;
}
   b4c38:	4801      	ldr	r0, [pc, #4]	; (b4c40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b4c3a:	bd10      	pop	{r4, pc}
   b4c3c:	2003e6d0 	.word	0x2003e6d0
   b4c40:	2003e6dc 	.word	0x2003e6dc
   b4c44:	000b4e4d 	.word	0x000b4e4d

000b4c48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b4c48:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b4c4a:	6803      	ldr	r3, [r0, #0]
   b4c4c:	3b09      	subs	r3, #9
   b4c4e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b4c50:	b08d      	sub	sp, #52	; 0x34
   b4c52:	4604      	mov	r4, r0
   b4c54:	460d      	mov	r5, r1
    switch (event->type) {
   b4c56:	d811      	bhi.n	b4c7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b4c58:	f7ff ffda 	bl	b4c10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c5c:	88a1      	ldrh	r1, [r4, #4]
   b4c5e:	6800      	ldr	r0, [r0, #0]
   b4c60:	f7ff ff14 	bl	b4a8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b4c64:	4603      	mov	r3, r0
   b4c66:	b958      	cbnz	r0, b4c80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b4c68:	2220      	movs	r2, #32
   b4c6a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b4c6e:	4a0b      	ldr	r2, [pc, #44]	; (b4c9c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b4c70:	9200      	str	r2, [sp, #0]
   b4c72:	490b      	ldr	r1, [pc, #44]	; (b4ca0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b4c74:	aa04      	add	r2, sp, #16
   b4c76:	2032      	movs	r0, #50	; 0x32
   b4c78:	f7ff fc10 	bl	b449c <log_message>
}
   b4c7c:	b00d      	add	sp, #52	; 0x34
   b4c7e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b4c80:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b4c82:	2a00      	cmp	r2, #0
   b4c84:	d0fa      	beq.n	b4c7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b4c86:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c8a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b4c8e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b4c92:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b4c94:	aa04      	add	r2, sp, #16
   b4c96:	a903      	add	r1, sp, #12
   b4c98:	47a0      	blx	r4
}
   b4c9a:	e7ef      	b.n	b4c7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b4c9c:	000b665f 	.word	0x000b665f
   b4ca0:	000b65f6 	.word	0x000b65f6

000b4ca4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b4ca4:	b919      	cbnz	r1, b4cae <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b4ca6:	460a      	mov	r2, r1
   b4ca8:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b4caa:	f7ff baff 	b.w	b42ac <hal_ble_gap_set_advertising_data>
   b4cae:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4cb2:	2200      	movs	r2, #0
   b4cb4:	e7f9      	b.n	b4caa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b4cb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b4cb6:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b4cb8:	1e14      	subs	r4, r2, #0
   b4cba:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b4cbc:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b4cbe:	db02      	blt.n	b4cc6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b4cc0:	1862      	adds	r2, r4, r1
   b4cc2:	429a      	cmp	r2, r3
   b4cc4:	dd00      	ble.n	b4cc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b4cc6:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b4cc8:	682a      	ldr	r2, [r5, #0]
   b4cca:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b4ccc:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b4cce:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4cd0:	1a52      	subs	r2, r2, r1
   b4cd2:	f001 fb4f 	bl	b6374 <memmove>
    size_ -= n;
   b4cd6:	686a      	ldr	r2, [r5, #4]
   b4cd8:	1b12      	subs	r2, r2, r4
   b4cda:	606a      	str	r2, [r5, #4]
}
   b4cdc:	bd38      	pop	{r3, r4, r5, pc}

000b4cde <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4cde:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b4ce0:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4ce2:	4604      	mov	r4, r0
   b4ce4:	460d      	mov	r5, r1
   b4ce6:	ab01      	add	r3, sp, #4
   b4ce8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4cec:	f7ff fcec 	bl	b46c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b4cf0:	4602      	mov	r2, r0
   b4cf2:	b138      	cbz	r0, b4d04 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b4cf4:	9901      	ldr	r1, [sp, #4]
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	f7ff ffdd 	bl	b4cb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b4cfc:	4629      	mov	r1, r5
   b4cfe:	4620      	mov	r0, r4
   b4d00:	f7ff ffed 	bl	b4cde <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b4d04:	b003      	add	sp, #12
   b4d06:	bd30      	pop	{r4, r5, pc}

000b4d08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b4d08:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b4d0a:	460c      	mov	r4, r1
   b4d0c:	b929      	cbnz	r1, b4d1a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b4d0e:	460a      	mov	r2, r1
   b4d10:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b4d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b4d16:	f7ff bad1 	b.w	b42bc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b4d1a:	2101      	movs	r1, #1
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f7ff ffde 	bl	b4cde <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b4d22:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4d26:	2200      	movs	r2, #0
   b4d28:	e7f3      	b.n	b4d12 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b4d2a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b4d2a:	b538      	push	{r3, r4, r5, lr}
   b4d2c:	4604      	mov	r4, r0
   b4d2e:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b4d30:	f7ff ffb8 	bl	b4ca4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b4d34:	2800      	cmp	r0, #0
   b4d36:	db0a      	blt.n	b4d4e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b4d38:	4629      	mov	r1, r5
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f7ff ffe4 	bl	b4d08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b4d40:	2800      	cmp	r0, #0
   b4d42:	db04      	blt.n	b4d4e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b4d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b4d48:	2000      	movs	r0, #0
   b4d4a:	f7ff babf 	b.w	b42cc <hal_ble_gap_start_advertising>
}
   b4d4e:	bd38      	pop	{r3, r4, r5, pc}

000b4d50 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b4d50:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4d52:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b4d54:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b4d56:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d58:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b4d5a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d5c:	f7ff f999 	bl	b4092 <_Znwj>
   b4d60:	b118      	cbz	r0, b4d6a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b4d62:	682b      	ldr	r3, [r5, #0]
   b4d64:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d66:	686b      	ldr	r3, [r5, #4]
   b4d68:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b4d6a:	4b03      	ldr	r3, [pc, #12]	; (b4d78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b4d6c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4d6e:	4b03      	ldr	r3, [pc, #12]	; (b4d7c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d70:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4d72:	60a3      	str	r3, [r4, #8]
      }
   b4d74:	4620      	mov	r0, r4
   b4d76:	bd38      	pop	{r3, r4, r5, pc}
   b4d78:	000b4709 	.word	0x000b4709
   b4d7c:	000b4721 	.word	0x000b4721

000b4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b4d80:	680b      	ldr	r3, [r1, #0]
   b4d82:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b4d84:	b113      	cbz	r3, b4d8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b4d86:	685a      	ldr	r2, [r3, #4]
   b4d88:	3201      	adds	r2, #1
   b4d8a:	605a      	str	r2, [r3, #4]
      }
   b4d8c:	4770      	bx	lr

000b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b4d8e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4d90:	f851 3b04 	ldr.w	r3, [r1], #4
   b4d94:	4604      	mov	r4, r0
   b4d96:	f840 3b04 	str.w	r3, [r0], #4
   b4d9a:	f7ff fff1 	bl	b4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b4d9e:	6823      	ldr	r3, [r4, #0]
   b4da0:	b90b      	cbnz	r3, b4da6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b4da2:	f7ff fca7 	bl	b46f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b4da6:	4620      	mov	r0, r4
   b4da8:	bd10      	pop	{r4, pc}

000b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b4daa:	b510      	push	{r4, lr}
   b4dac:	f851 3b04 	ldr.w	r3, [r1], #4
   b4db0:	4604      	mov	r4, r0
   b4db2:	f840 3b04 	str.w	r3, [r0], #4
   b4db6:	f7ff ffe3 	bl	b4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b4dba:	4620      	mov	r0, r4
   b4dbc:	bd10      	pop	{r4, pc}

000b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b4dbe:	b510      	push	{r4, lr}
   b4dc0:	f851 3b04 	ldr.w	r3, [r1], #4
   b4dc4:	4604      	mov	r4, r0
   b4dc6:	f840 3b04 	str.w	r3, [r0], #4
   b4dca:	f7ff ffd9 	bl	b4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b4dce:	4620      	mov	r0, r4
   b4dd0:	bd10      	pop	{r4, pc}

000b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4dd2:	b510      	push	{r4, lr}
   b4dd4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4dd6:	6800      	ldr	r0, [r0, #0]
   b4dd8:	b108      	cbz	r0, b4dde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4dda:	f7ff fcd5 	bl	b4788 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4dde:	4620      	mov	r0, r4
   b4de0:	bd10      	pop	{r4, pc}

000b4de2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b4de2:	b510      	push	{r4, lr}
   b4de4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b4de6:	3004      	adds	r0, #4
   b4de8:	f7ff fff3 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4dec:	4620      	mov	r0, r4
   b4dee:	bd10      	pop	{r4, pc}

000b4df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4df0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4df2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4df6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4df8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4dfc:	42ae      	cmp	r6, r5
   b4dfe:	d004      	beq.n	b4e0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b4e00:	1d28      	adds	r0, r5, #4
   b4e02:	f7ff ffe6 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e06:	3508      	adds	r5, #8
   b4e08:	e7f8      	b.n	b4dfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4e0a:	6820      	ldr	r0, [r4, #0]
   b4e0c:	f7ff fbe2 	bl	b45d4 <free>
}
   b4e10:	4620      	mov	r0, r4
   b4e12:	bd70      	pop	{r4, r5, r6, pc}

000b4e14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e14:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4e16:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e1a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4e1c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4e20:	42ae      	cmp	r6, r5
   b4e22:	d004      	beq.n	b4e2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b4e24:	1d28      	adds	r0, r5, #4
   b4e26:	f7ff ffd4 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e2a:	3508      	adds	r5, #8
   b4e2c:	e7f8      	b.n	b4e20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4e2e:	6820      	ldr	r0, [r4, #0]
   b4e30:	f7ff fbd0 	bl	b45d4 <free>
}
   b4e34:	4620      	mov	r0, r4
   b4e36:	bd70      	pop	{r4, r5, r6, pc}

000b4e38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4e38:	b510      	push	{r4, lr}
   b4e3a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b4e3c:	3024      	adds	r0, #36	; 0x24
   b4e3e:	f7ff ffe9 	bl	b4e14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b4e42:	f104 0018 	add.w	r0, r4, #24
   b4e46:	f7ff ffd3 	bl	b4df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b4e4a:	bd10      	pop	{r4, pc}

000b4e4c <__tcf_0>:
    static BleLocalDevice instance;
   b4e4c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b4e4e:	4b17      	ldr	r3, [pc, #92]	; (b4eac <__tcf_0+0x60>)
   b4e50:	681c      	ldr	r4, [r3, #0]
   b4e52:	b354      	cbz	r4, b4eaa <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b4e54:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b4e58:	f7ff fc82 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
   b4e5c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b4e60:	f7ff fc7e 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
   b4e64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b4e68:	f7ff fc7a 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
   b4e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4e70:	f7ff fc76 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b4e74:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b4e78:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b4e7c:	42ae      	cmp	r6, r5
   b4e7e:	d004      	beq.n	b4e8a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b4e80:	1d28      	adds	r0, r5, #4
   b4e82:	f7ff ffa6 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e86:	3508      	adds	r5, #8
   b4e88:	e7f8      	b.n	b4e7c <__tcf_0+0x30>
    ::free(ptr);
   b4e8a:	69a0      	ldr	r0, [r4, #24]
   b4e8c:	f7ff fba2 	bl	b45d4 <free>
    ~BleLocalDeviceImpl() = default;
   b4e90:	f104 000c 	add.w	r0, r4, #12
   b4e94:	f7ff ffbe 	bl	b4e14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b4e98:	4620      	mov	r0, r4
   b4e9a:	f7ff ffa9 	bl	b4df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b4ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4ea6:	f7ff b8f8 	b.w	b409a <_ZdlPvj>
   b4eaa:	bd70      	pop	{r4, r5, r6, pc}
   b4eac:	2003e6dc 	.word	0x2003e6dc

000b4eb0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b4eb0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b4eb2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4eb4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b4eb8:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4ebc:	6803      	ldr	r3, [r0, #0]
   b4ebe:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ec0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4ec2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b4ec4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b4ec6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b4ec8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b4eca:	f7ff ff82 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b4ece:	b002      	add	sp, #8
   b4ed0:	bd10      	pop	{r4, pc}

000b4ed2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b4ed2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4ed4:	b510      	push	{r4, lr}
      if (_M_empty())
   b4ed6:	b90a      	cbnz	r2, b4edc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b4ed8:	f001 f912 	bl	b6100 <_ZSt25__throw_bad_function_callv>
    }
   b4edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ee0:	68c3      	ldr	r3, [r0, #12]
   b4ee2:	4718      	bx	r3

000b4ee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b4ee4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b4ee6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4ee8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4eea:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4eec:	dd03      	ble.n	b4ef6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b4eee:	f7ff fb79 	bl	b45e4 <realloc>
            if (!d) {
   b4ef2:	b918      	cbnz	r0, b4efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4ef4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b4ef6:	f7ff fb6d 	bl	b45d4 <free>
        T* d = nullptr;
   b4efa:	2000      	movs	r0, #0
        data_ = d;
   b4efc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4efe:	60a5      	str	r5, [r4, #8]
        return true;
   b4f00:	2001      	movs	r0, #1
   b4f02:	e7f7      	b.n	b4ef4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4f04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b4f04:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b4f06:	6883      	ldr	r3, [r0, #8]
   b4f08:	428b      	cmp	r3, r1
   b4f0a:	da02      	bge.n	b4f12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b4f0c:	f7ff ffea 	bl	b4ee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b4f10:	bd08      	pop	{r3, pc}
    return true;
   b4f12:	2001      	movs	r0, #1
   b4f14:	e7fc      	b.n	b4f10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b4f16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b4f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f1a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4f1c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b4f1e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4f20:	4419      	add	r1, r3
   b4f22:	6883      	ldr	r3, [r0, #8]
   b4f24:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b4f26:	4604      	mov	r4, r0
   b4f28:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4f2a:	dc12      	bgt.n	b4f52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b4f2c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4f2e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b4f30:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4f32:	1bd2      	subs	r2, r2, r7
   b4f34:	4631      	mov	r1, r6
   b4f36:	1970      	adds	r0, r6, r5
   b4f38:	f001 fa1c 	bl	b6374 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b4f3c:	462a      	mov	r2, r5
   b4f3e:	4641      	mov	r1, r8
   b4f40:	4630      	mov	r0, r6
   b4f42:	f001 fa09 	bl	b6358 <memcpy>
    size_ += n;
   b4f46:	6863      	ldr	r3, [r4, #4]
   b4f48:	442b      	add	r3, r5
   b4f4a:	6063      	str	r3, [r4, #4]
    return true;
   b4f4c:	2001      	movs	r0, #1
}
   b4f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b4f52:	f7ff ffc7 	bl	b4ee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b4f56:	2800      	cmp	r0, #0
   b4f58:	d1e8      	bne.n	b4f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b4f5a:	e7f8      	b.n	b4f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b4f5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b4f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f5e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4f60:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b4f64:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b4f66:	4604      	mov	r4, r0
   b4f68:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4f6a:	da0b      	bge.n	b4f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b4f6c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4f6e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b4f70:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b4f72:	1b52      	subs	r2, r2, r5
   b4f74:	1c48      	adds	r0, r1, #1
   b4f76:	f001 f9fd 	bl	b6374 <memmove>
    new(p) T(std::move(value));
   b4f7a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b4f7c:	6863      	ldr	r3, [r4, #4]
   b4f7e:	3301      	adds	r3, #1
   b4f80:	6063      	str	r3, [r4, #4]
}
   b4f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b4f84:	3101      	adds	r1, #1
   b4f86:	f7ff ffad 	bl	b4ee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b4f8a:	2800      	cmp	r0, #0
   b4f8c:	d1ee      	bne.n	b4f6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b4f8e:	e7f8      	b.n	b4f82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b4f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b4f90:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b4f92:	6841      	ldr	r1, [r0, #4]
   b4f94:	f7ff bfe2 	b.w	b4f5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b4f98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b4f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4f9c:	4604      	mov	r4, r0
   b4f9e:	461d      	mov	r5, r3
   b4fa0:	460f      	mov	r7, r1
   b4fa2:	ab01      	add	r3, sp, #4
   b4fa4:	4690      	mov	r8, r2
   b4fa6:	460a      	mov	r2, r1
   b4fa8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4fac:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b4fb0:	f7ff fb8a 	bl	b46c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b4fb4:	1cae      	adds	r6, r5, #2
   b4fb6:	6863      	ldr	r3, [r4, #4]
   b4fb8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b4fba:	f1b9 0f00 	cmp.w	r9, #0
   b4fbe:	d126      	bne.n	b500e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b4fc0:	b328      	cbz	r0, b500e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b4fc2:	4433      	add	r3, r6
   b4fc4:	1a1b      	subs	r3, r3, r0
   b4fc6:	2bff      	cmp	r3, #255	; 0xff
   b4fc8:	d809      	bhi.n	b4fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b4fca:	9901      	ldr	r1, [sp, #4]
   b4fcc:	4620      	mov	r0, r4
   b4fce:	f7ff fe72 	bl	b4cb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b4fd2:	6861      	ldr	r1, [r4, #4]
   b4fd4:	4620      	mov	r0, r4
   b4fd6:	4431      	add	r1, r6
   b4fd8:	f7ff ff94 	bl	b4f04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b4fdc:	b918      	cbnz	r0, b4fe6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b4fde:	6860      	ldr	r0, [r4, #4]
}
   b4fe0:	b003      	add	sp, #12
   b4fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b4fe6:	1c6a      	adds	r2, r5, #1
   b4fe8:	9901      	ldr	r1, [sp, #4]
   b4fea:	b2d2      	uxtb	r2, r2
   b4fec:	4620      	mov	r0, r4
   b4fee:	f7ff ffb5 	bl	b4f5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b4ff2:	9901      	ldr	r1, [sp, #4]
   b4ff4:	463a      	mov	r2, r7
   b4ff6:	3101      	adds	r1, #1
   b4ff8:	4620      	mov	r0, r4
   b4ffa:	f7ff ffaf 	bl	b4f5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b4ffe:	9901      	ldr	r1, [sp, #4]
   b5000:	462b      	mov	r3, r5
   b5002:	4642      	mov	r2, r8
   b5004:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5006:	4620      	mov	r0, r4
   b5008:	f7ff ff85 	bl	b4f16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b500c:	e7e7      	b.n	b4fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b500e:	18f1      	adds	r1, r6, r3
   b5010:	29ff      	cmp	r1, #255	; 0xff
   b5012:	d8e4      	bhi.n	b4fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff ff75 	bl	b4f04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b501a:	2800      	cmp	r0, #0
   b501c:	d0df      	beq.n	b4fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b501e:	1c69      	adds	r1, r5, #1
   b5020:	b2c9      	uxtb	r1, r1
   b5022:	4620      	mov	r0, r4
   b5024:	f7ff ffb4 	bl	b4f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5028:	4639      	mov	r1, r7
   b502a:	4620      	mov	r0, r4
   b502c:	f7ff ffb0 	bl	b4f90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5030:	6861      	ldr	r1, [r4, #4]
   b5032:	462b      	mov	r3, r5
   b5034:	4642      	mov	r2, r8
   b5036:	e7e6      	b.n	b5006 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5038:	b430      	push	{r4, r5}
   b503a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b503e:	b11a      	cbz	r2, b5048 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5040:	9502      	str	r5, [sp, #8]
}
   b5042:	bc30      	pop	{r4, r5}
   b5044:	f7ff bfa8 	b.w	b4f98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5048:	6840      	ldr	r0, [r0, #4]
}
   b504a:	bc30      	pop	{r4, r5}
   b504c:	4770      	bx	lr

000b504e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b504e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5050:	2300      	movs	r3, #0
   b5052:	e9c0 3300 	strd	r3, r3, [r0]
   b5056:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5058:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b505a:	9300      	str	r3, [sp, #0]
   b505c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b505e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5062:	4619      	mov	r1, r3
   b5064:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5068:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b506a:	f7ff ffe5 	bl	b5038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b506e:	4620      	mov	r0, r4
   b5070:	b004      	add	sp, #16
   b5072:	bd10      	pop	{r4, pc}

000b5074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5074:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5078:	4604      	mov	r4, r0
   b507a:	460d      	mov	r5, r1
   b507c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b507e:	d914      	bls.n	b50aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5080:	4290      	cmp	r0, r2
   b5082:	d213      	bcs.n	b50ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5084:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5088:	1a75      	subs	r5, r6, r1
   b508a:	f1a1 0708 	sub.w	r7, r1, #8
   b508e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5090:	42b7      	cmp	r7, r6
   b5092:	d018      	beq.n	b50c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5094:	b11c      	cbz	r4, b509e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5096:	4631      	mov	r1, r6
   b5098:	4620      	mov	r0, r4
   b509a:	f7ff fe90 	bl	b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b509e:	1d30      	adds	r0, r6, #4
   b50a0:	f7ff fe97 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b50a4:	3e08      	subs	r6, #8
   b50a6:	3c08      	subs	r4, #8
   b50a8:	e7f2      	b.n	b5090 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b50aa:	d00c      	beq.n	b50c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b50ac:	42b5      	cmp	r5, r6
   b50ae:	d00a      	beq.n	b50c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b50b0:	b11c      	cbz	r4, b50ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b50b2:	4629      	mov	r1, r5
   b50b4:	4620      	mov	r0, r4
   b50b6:	f7ff fe82 	bl	b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b50ba:	1d28      	adds	r0, r5, #4
   b50bc:	f7ff fe89 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b50c0:	3508      	adds	r5, #8
   b50c2:	3408      	adds	r4, #8
   b50c4:	e7f2      	b.n	b50ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b50c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b50c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b50c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b50ca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b50cc:	6846      	ldr	r6, [r0, #4]
   b50ce:	4668      	mov	r0, sp
   b50d0:	f7ff fe75 	bl	b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b50d4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b50d8:	429f      	cmp	r7, r3
   b50da:	db12      	blt.n	b5102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b50dc:	3701      	adds	r7, #1
        if (n > 0) {
   b50de:	2f00      	cmp	r7, #0
   b50e0:	dd29      	ble.n	b5136 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b50e2:	00f8      	lsls	r0, r7, #3
   b50e4:	f7ff fa6e 	bl	b45c4 <malloc>
            if (!d) {
   b50e8:	4605      	mov	r5, r0
   b50ea:	b1f0      	cbz	r0, b512a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b50ec:	e9d4 1200 	ldrd	r1, r2, [r4]
   b50f0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b50f4:	f7ff ffbe 	bl	b5074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b50f8:	6820      	ldr	r0, [r4, #0]
   b50fa:	f7ff fa6b 	bl	b45d4 <free>
        data_ = d;
   b50fe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5100:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5102:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5104:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5106:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b510a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b510e:	4631      	mov	r1, r6
   b5110:	f106 0008 	add.w	r0, r6, #8
   b5114:	f7ff ffae 	bl	b5074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5118:	b11e      	cbz	r6, b5122 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b511a:	4669      	mov	r1, sp
   b511c:	4630      	mov	r0, r6
   b511e:	f7ff fe4e 	bl	b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5122:	6863      	ldr	r3, [r4, #4]
   b5124:	3301      	adds	r3, #1
   b5126:	6063      	str	r3, [r4, #4]
    return true;
   b5128:	2501      	movs	r5, #1
   b512a:	a801      	add	r0, sp, #4
   b512c:	f7ff fe51 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5130:	4628      	mov	r0, r5
   b5132:	b003      	add	sp, #12
   b5134:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5136:	2500      	movs	r5, #0
   b5138:	e7de      	b.n	b50f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b513a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b513a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b513c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5140:	4605      	mov	r5, r0
   b5142:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5144:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5148:	42a6      	cmp	r6, r4
   b514a:	d005      	beq.n	b5158 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b514c:	4639      	mov	r1, r7
   b514e:	4620      	mov	r0, r4
   b5150:	f7ff fd07 	bl	b4b62 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5154:	b108      	cbz	r0, b515a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5156:	b914      	cbnz	r4, b515e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b515a:	3408      	adds	r4, #8
   b515c:	e7f4      	b.n	b5148 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b515e:	1d20      	adds	r0, r4, #4
   b5160:	f7ff fe37 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5164:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5168:	f104 0108 	add.w	r1, r4, #8
   b516c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5170:	4620      	mov	r0, r4
   b5172:	f7ff ff7f 	bl	b5074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5176:	686b      	ldr	r3, [r5, #4]
   b5178:	3b01      	subs	r3, #1
   b517a:	606b      	str	r3, [r5, #4]
    return true;
   b517c:	e7ec      	b.n	b5158 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5180 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5184:	4605      	mov	r5, r0
   b5186:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5188:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b518a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b518c:	f7ff fb26 	bl	b47dc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5190:	682e      	ldr	r6, [r5, #0]
   b5192:	1ef3      	subs	r3, r6, #3
   b5194:	2b0d      	cmp	r3, #13
   b5196:	d83c      	bhi.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5198:	e8df f013 	tbh	[pc, r3, lsl #1]
   b519c:	0053000e 	.word	0x0053000e
   b51a0:	00d1003b 	.word	0x00d1003b
   b51a4:	003b003b 	.word	0x003b003b
   b51a8:	003b003b 	.word	0x003b003b
   b51ac:	009b003b 	.word	0x009b003b
   b51b0:	009b009b 	.word	0x009b009b
   b51b4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b51b8:	a804      	add	r0, sp, #16
   b51ba:	f7ff fc9d 	bl	b4af8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b51be:	9b04      	ldr	r3, [sp, #16]
   b51c0:	89aa      	ldrh	r2, [r5, #12]
   b51c2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b51c4:	6869      	ldr	r1, [r5, #4]
   b51c6:	9804      	ldr	r0, [sp, #16]
   b51c8:	3108      	adds	r1, #8
   b51ca:	3002      	adds	r0, #2
   b51cc:	f7ff fb20 	bl	b4810 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b51d0:	a904      	add	r1, sp, #16
   b51d2:	a806      	add	r0, sp, #24
   b51d4:	f7ff fdf3 	bl	b4dbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b51d8:	a906      	add	r1, sp, #24
   b51da:	f104 0018 	add.w	r0, r4, #24
   b51de:	f7ff ff73 	bl	b50c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b51e2:	4605      	mov	r5, r0
   b51e4:	a807      	add	r0, sp, #28
   b51e6:	f7ff fdf4 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51ea:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b51ec:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b51ee:	b9b5      	cbnz	r5, b521e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b51f0:	4b5d      	ldr	r3, [pc, #372]	; (b5368 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b51f2:	495e      	ldr	r1, [pc, #376]	; (b536c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b51f4:	9300      	str	r3, [sp, #0]
   b51f6:	2032      	movs	r0, #50	; 0x32
   b51f8:	462b      	mov	r3, r5
   b51fa:	aa06      	add	r2, sp, #24
   b51fc:	9507      	str	r5, [sp, #28]
   b51fe:	f7ff f94d 	bl	b449c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5202:	9b04      	ldr	r3, [sp, #16]
   b5204:	4629      	mov	r1, r5
   b5206:	8818      	ldrh	r0, [r3, #0]
   b5208:	f7ff f868 	bl	b42dc <hal_ble_gap_disconnect>
   b520c:	a805      	add	r0, sp, #20
   b520e:	f7ff fde0 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5212:	a803      	add	r0, sp, #12
   b5214:	f7ff faf0 	bl	b47f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5218:	b00e      	add	sp, #56	; 0x38
   b521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b521e:	4a54      	ldr	r2, [pc, #336]	; (b5370 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5220:	9200      	str	r2, [sp, #0]
   b5222:	2300      	movs	r3, #0
   b5224:	4951      	ldr	r1, [pc, #324]	; (b536c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5226:	9307      	str	r3, [sp, #28]
   b5228:	aa06      	add	r2, sp, #24
   b522a:	2001      	movs	r0, #1
   b522c:	f7ff f936 	bl	b449c <log_message>
                if (impl->connectedCallback_) {
   b5230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5232:	2b00      	cmp	r3, #0
   b5234:	d0ea      	beq.n	b520c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b5236:	a904      	add	r1, sp, #16
   b5238:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b523c:	f7ff fe49 	bl	b4ed2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5240:	e7e4      	b.n	b520c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5242:	89a9      	ldrh	r1, [r5, #12]
   b5244:	4620      	mov	r0, r4
   b5246:	f7ff fc21 	bl	b4a8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b524a:	4606      	mov	r6, r0
   b524c:	2800      	cmp	r0, #0
   b524e:	d0e0      	beq.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5250:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5252:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5256:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b525a:	8029      	strh	r1, [r5, #0]
   b525c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5260:	429a      	cmp	r2, r3
   b5262:	d003      	beq.n	b526c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b5264:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5268:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b526a:	e7f9      	b.n	b5260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b526c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5270:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5274:	45b8      	cmp	r8, r7
   b5276:	d004      	beq.n	b5282 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b5278:	1d38      	adds	r0, r7, #4
   b527a:	f7ff fdaa 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b527e:	3708      	adds	r7, #8
   b5280:	e7f8      	b.n	b5274 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b5282:	2300      	movs	r3, #0
   b5284:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5286:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b528a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b528e:	45b8      	cmp	r8, r7
   b5290:	d004      	beq.n	b529c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b5292:	1d38      	adds	r0, r7, #4
   b5294:	f7ff fd9d 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5298:	3708      	adds	r7, #8
   b529a:	e7f8      	b.n	b528e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b529c:	2300      	movs	r3, #0
   b529e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b52a0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b52a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b52a4:	b123      	cbz	r3, b52b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b52a6:	4631      	mov	r1, r6
   b52a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b52ac:	f7ff fe11 	bl	b4ed2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b52b0:	2300      	movs	r3, #0
   b52b2:	2220      	movs	r2, #32
   b52b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b52b8:	4a2e      	ldr	r2, [pc, #184]	; (b5374 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b52ba:	9200      	str	r2, [sp, #0]
   b52bc:	492b      	ldr	r1, [pc, #172]	; (b536c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b52be:	aa06      	add	r2, sp, #24
   b52c0:	2001      	movs	r0, #1
   b52c2:	f7ff f8eb 	bl	b449c <log_message>
                    impl->peers_.removeOne(*peer);
   b52c6:	4631      	mov	r1, r6
   b52c8:	f104 0018 	add.w	r0, r4, #24
   b52cc:	f7ff ff35 	bl	b513a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b52d0:	e79f      	b.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b52d2:	89a9      	ldrh	r1, [r5, #12]
   b52d4:	4620      	mov	r0, r4
   b52d6:	f7ff fbd9 	bl	b4a8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b52da:	2800      	cmp	r0, #0
   b52dc:	d099      	beq.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b52de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b52e0:	2b00      	cmp	r3, #0
   b52e2:	d096      	beq.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b52e4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b52e6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b52e8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b52ec:	d001      	beq.n	b52f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b52ee:	2e10      	cmp	r6, #16
   b52f0:	d117      	bne.n	b5322 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b52f2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b52f4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b52f6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b52f8:	2506      	movs	r5, #6
                        };
   b52fa:	f88d 3015 	strb.w	r3, [sp, #21]
   b52fe:	9104      	str	r1, [sp, #16]
   b5300:	f88d 2014 	strb.w	r2, [sp, #20]
   b5304:	9006      	str	r0, [sp, #24]
   b5306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b530a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b530c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5310:	9508      	str	r5, [sp, #32]
   b5312:	e883 0003 	stmia.w	r3, {r0, r1}
   b5316:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5318:	a906      	add	r1, sp, #24
   b531a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b531e:	4798      	blx	r3
   b5320:	e777      	b.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5322:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5324:	bf01      	itttt	eq
   b5326:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5328:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b532a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b532e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5330:	bf0f      	iteee	eq
   b5332:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5336:	461a      	movne	r2, r3
   b5338:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b533a:	461d      	movne	r5, r3
   b533c:	e7dd      	b.n	b52fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b533e:	89a9      	ldrh	r1, [r5, #12]
   b5340:	4620      	mov	r0, r4
   b5342:	f7ff fba3 	bl	b4a8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5346:	4601      	mov	r1, r0
   b5348:	2800      	cmp	r0, #0
   b534a:	f43f af62 	beq.w	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b534e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5350:	2b00      	cmp	r3, #0
   b5352:	f43f af5e 	beq.w	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5356:	686b      	ldr	r3, [r5, #4]
   b5358:	9306      	str	r3, [sp, #24]
   b535a:	aa06      	add	r2, sp, #24
   b535c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b535e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5362:	4798      	blx	r3
   b5364:	e755      	b.n	b5212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5366:	bf00      	nop
   b5368:	000b6677 	.word	0x000b6677
   b536c:	000b65f6 	.word	0x000b65f6
   b5370:	000b669d 	.word	0x000b669d
   b5374:	000b66ba 	.word	0x000b66ba

000b5378 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5378:	b513      	push	{r0, r1, r4, lr}
   b537a:	460b      	mov	r3, r1
   b537c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b537e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5382:	466c      	mov	r4, sp
   b5384:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5388:	e893 0003 	ldmia.w	r3, {r0, r1}
   b538c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5390:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5394:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5398:	b002      	add	sp, #8
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b539c:	b538      	push	{r3, r4, r5, lr}
   b539e:	4605      	mov	r5, r0
   b53a0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b53a2:	f7ff ffe9 	bl	b5378 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53a6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b53a8:	68a2      	ldr	r2, [r4, #8]
   b53aa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53ac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53ae:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b53b0:	68e2      	ldr	r2, [r4, #12]
   b53b2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b53b4:	60e3      	str	r3, [r4, #12]
      }
   b53b6:	bd38      	pop	{r3, r4, r5, pc}

000b53b8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b53b8:	b570      	push	{r4, r5, r6, lr}
   b53ba:	4604      	mov	r4, r0
   b53bc:	b08c      	sub	sp, #48	; 0x30
   b53be:	460e      	mov	r6, r1
   b53c0:	9201      	str	r2, [sp, #4]
   b53c2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b53c4:	f7ff fb42 	bl	b4a4c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b53c8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b53ca:	9901      	ldr	r1, [sp, #4]
   b53cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b53d0:	f000 fc79 	bl	b5cc6 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b53d4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b53d8:	b1cd      	cbz	r5, b540e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b53da:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b53dc:	9502      	str	r5, [sp, #8]
   b53de:	a902      	add	r1, sp, #8
   b53e0:	a804      	add	r0, sp, #16
   b53e2:	9303      	str	r3, [sp, #12]
   b53e4:	f7ff fcb4 	bl	b4d50 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b53e8:	2300      	movs	r3, #0
	__x.swap(*this);
   b53ea:	a908      	add	r1, sp, #32
   b53ec:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b53ee:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b53f0:	f7ff ffd4 	bl	b539c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b53f4:	4631      	mov	r1, r6
   b53f6:	a808      	add	r0, sp, #32
   b53f8:	f7ff ffd0 	bl	b539c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b53fc:	a808      	add	r0, sp, #32
   b53fe:	f7ff f9af 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
   b5402:	a804      	add	r0, sp, #16
   b5404:	f7ff f9ac 	bl	b4760 <_ZNSt14_Function_baseD1Ev>
    }
   b5408:	4620      	mov	r0, r4
   b540a:	b00c      	add	sp, #48	; 0x30
   b540c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b540e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5410:	e7ea      	b.n	b53e8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5414 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5418:	b087      	sub	sp, #28
   b541a:	461d      	mov	r5, r3
   b541c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b5420:	4680      	mov	r8, r0
   b5422:	468b      	mov	fp, r1
   b5424:	4692      	mov	sl, r2
   b5426:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5428:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b542a:	2200      	movs	r2, #0
   b542c:	2068      	movs	r0, #104	; 0x68
   b542e:	9102      	str	r1, [sp, #8]
   b5430:	9204      	str	r2, [sp, #16]
   b5432:	f7fe fe2e 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5436:	1e06      	subs	r6, r0, #0
   b5438:	f106 090c 	add.w	r9, r6, #12
   b543c:	d018      	beq.n	b5470 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b543e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5440:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5442:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5446:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b5448:	4a15      	ldr	r2, [pc, #84]	; (b54a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b544a:	f847 2b20 	str.w	r2, [r7], #32
   b544e:	9b03      	ldr	r3, [sp, #12]
   b5450:	9100      	str	r1, [sp, #0]
   b5452:	465a      	mov	r2, fp
   b5454:	4651      	mov	r1, sl
   b5456:	4648      	mov	r0, r9
   b5458:	f7ff ffae 	bl	b53b8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b545c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b545e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5460:	682b      	ldr	r3, [r5, #0]
   b5462:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5466:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b546a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b546c:	6823      	ldr	r3, [r4, #0]
   b546e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5470:	a904      	add	r1, sp, #16
   b5472:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5474:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b5478:	f7ff fd1a 	bl	b4eb0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b547c:	a805      	add	r0, sp, #20
   b547e:	f7ff fca8 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5482:	f8d8 3000 	ldr.w	r3, [r8]
   b5486:	b93b      	cbnz	r3, b5498 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b5488:	4a06      	ldr	r2, [pc, #24]	; (b54a4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b548a:	4907      	ldr	r1, [pc, #28]	; (b54a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b548c:	200a      	movs	r0, #10
}
   b548e:	b007      	add	sp, #28
   b5490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5494:	f7fe bffa 	b.w	b448c <panic_>
}
   b5498:	b007      	add	sp, #28
   b549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b549e:	bf00      	nop
   b54a0:	000b6734 	.word	0x000b6734
   b54a4:	000b436d 	.word	0x000b436d
   b54a8:	000b65df 	.word	0x000b65df

000b54ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b54ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b54ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54b0:	4604      	mov	r4, r0
   b54b2:	460d      	mov	r5, r1
   b54b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b54b6:	d914      	bls.n	b54e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b54b8:	4290      	cmp	r0, r2
   b54ba:	d213      	bcs.n	b54e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b54bc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b54c0:	1a75      	subs	r5, r6, r1
   b54c2:	f1a1 0708 	sub.w	r7, r1, #8
   b54c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b54c8:	42b7      	cmp	r7, r6
   b54ca:	d018      	beq.n	b54fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b54cc:	b11c      	cbz	r4, b54d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b54ce:	4631      	mov	r1, r6
   b54d0:	4620      	mov	r0, r4
   b54d2:	f7ff fc6a 	bl	b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b54d6:	1d30      	adds	r0, r6, #4
   b54d8:	f7ff fc7b 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b54dc:	3e08      	subs	r6, #8
   b54de:	3c08      	subs	r4, #8
   b54e0:	e7f2      	b.n	b54c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b54e2:	d00c      	beq.n	b54fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b54e4:	42b5      	cmp	r5, r6
   b54e6:	d00a      	beq.n	b54fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b54e8:	b11c      	cbz	r4, b54f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b54ea:	4629      	mov	r1, r5
   b54ec:	4620      	mov	r0, r4
   b54ee:	f7ff fc5c 	bl	b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b54f2:	1d28      	adds	r0, r5, #4
   b54f4:	f7ff fc6d 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b54f8:	3508      	adds	r5, #8
   b54fa:	3408      	adds	r4, #8
   b54fc:	e7f2      	b.n	b54e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b54fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5500 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5500:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5502:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5504:	4605      	mov	r5, r0
        if (n > 0) {
   b5506:	dd11      	ble.n	b552c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5508:	00f0      	lsls	r0, r6, #3
   b550a:	f7ff f85b 	bl	b45c4 <malloc>
            if (!d) {
   b550e:	4604      	mov	r4, r0
   b5510:	b158      	cbz	r0, b552a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5512:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5516:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b551a:	f7ff ffc7 	bl	b54ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b551e:	6828      	ldr	r0, [r5, #0]
   b5520:	f7ff f858 	bl	b45d4 <free>
        data_ = d;
   b5524:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5526:	60ae      	str	r6, [r5, #8]
        return true;
   b5528:	2001      	movs	r0, #1
    }
   b552a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b552c:	2400      	movs	r4, #0
   b552e:	e7f6      	b.n	b551e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5530 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5532:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5534:	6845      	ldr	r5, [r0, #4]
   b5536:	4668      	mov	r0, sp
   b5538:	f7ff fc37 	bl	b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b553c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5540:	4299      	cmp	r1, r3
   b5542:	da10      	bge.n	b5566 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5544:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5546:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5548:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b554c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5550:	4629      	mov	r1, r5
   b5552:	f105 0008 	add.w	r0, r5, #8
   b5556:	f7ff ffa9 	bl	b54ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b555a:	b98d      	cbnz	r5, b5580 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b555c:	6863      	ldr	r3, [r4, #4]
   b555e:	3301      	adds	r3, #1
   b5560:	6063      	str	r3, [r4, #4]
    return true;
   b5562:	2601      	movs	r6, #1
   b5564:	e006      	b.n	b5574 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5566:	3101      	adds	r1, #1
   b5568:	4620      	mov	r0, r4
   b556a:	f7ff ffc9 	bl	b5500 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b556e:	4606      	mov	r6, r0
   b5570:	2800      	cmp	r0, #0
   b5572:	d1e7      	bne.n	b5544 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5574:	a801      	add	r0, sp, #4
   b5576:	f7ff fc2c 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b557a:	4630      	mov	r0, r6
   b557c:	b002      	add	sp, #8
   b557e:	bd70      	pop	{r4, r5, r6, pc}
   b5580:	4669      	mov	r1, sp
   b5582:	4628      	mov	r0, r5
   b5584:	f7ff fc11 	bl	b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5588:	e7e8      	b.n	b555c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b558a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b558a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b558e:	4604      	mov	r4, r0
   b5590:	460d      	mov	r5, r1
   b5592:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5594:	d914      	bls.n	b55c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5596:	4290      	cmp	r0, r2
   b5598:	d213      	bcs.n	b55c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b559a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b559e:	1a75      	subs	r5, r6, r1
   b55a0:	f1a1 0708 	sub.w	r7, r1, #8
   b55a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b55a6:	42b7      	cmp	r7, r6
   b55a8:	d018      	beq.n	b55dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b55aa:	b11c      	cbz	r4, b55b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b55ac:	4631      	mov	r1, r6
   b55ae:	4620      	mov	r0, r4
   b55b0:	f7ff fbed 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b55b4:	1d30      	adds	r0, r6, #4
   b55b6:	f7ff fc0c 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b55ba:	3e08      	subs	r6, #8
   b55bc:	3c08      	subs	r4, #8
   b55be:	e7f2      	b.n	b55a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b55c0:	d00c      	beq.n	b55dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b55c2:	42b5      	cmp	r5, r6
   b55c4:	d00a      	beq.n	b55dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b55c6:	b11c      	cbz	r4, b55d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b55c8:	4629      	mov	r1, r5
   b55ca:	4620      	mov	r0, r4
   b55cc:	f7ff fbdf 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b55d0:	1d28      	adds	r0, r5, #4
   b55d2:	f7ff fbfe 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b55d6:	3508      	adds	r5, #8
   b55d8:	3408      	adds	r4, #8
   b55da:	e7f2      	b.n	b55c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b55dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b55de:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b55e0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b55e2:	4605      	mov	r5, r0
        if (n > 0) {
   b55e4:	dd11      	ble.n	b560a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b55e6:	00f0      	lsls	r0, r6, #3
   b55e8:	f7fe ffec 	bl	b45c4 <malloc>
            if (!d) {
   b55ec:	4604      	mov	r4, r0
   b55ee:	b158      	cbz	r0, b5608 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b55f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b55f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b55f8:	f7ff ffc7 	bl	b558a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b55fc:	6828      	ldr	r0, [r5, #0]
   b55fe:	f7fe ffe9 	bl	b45d4 <free>
        data_ = d;
   b5602:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5604:	60ae      	str	r6, [r5, #8]
        return true;
   b5606:	2001      	movs	r0, #1
    }
   b5608:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b560a:	2400      	movs	r4, #0
   b560c:	e7f6      	b.n	b55fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b560e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b560e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5610:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5612:	6845      	ldr	r5, [r0, #4]
   b5614:	4668      	mov	r0, sp
   b5616:	f7ff fbba 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b561a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b561e:	4299      	cmp	r1, r3
   b5620:	da10      	bge.n	b5644 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5622:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5624:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5626:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b562a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b562e:	4629      	mov	r1, r5
   b5630:	f105 0008 	add.w	r0, r5, #8
   b5634:	f7ff ffa9 	bl	b558a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5638:	b98d      	cbnz	r5, b565e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b563a:	6863      	ldr	r3, [r4, #4]
   b563c:	3301      	adds	r3, #1
   b563e:	6063      	str	r3, [r4, #4]
    return true;
   b5640:	2601      	movs	r6, #1
   b5642:	e006      	b.n	b5652 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5644:	3101      	adds	r1, #1
   b5646:	4620      	mov	r0, r4
   b5648:	f7ff ffc9 	bl	b55de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b564c:	4606      	mov	r6, r0
   b564e:	2800      	cmp	r0, #0
   b5650:	d1e7      	bne.n	b5622 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5652:	a801      	add	r0, sp, #4
   b5654:	f7ff fbbd 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5658:	4630      	mov	r0, r6
   b565a:	b002      	add	sp, #8
   b565c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b565e:	4669      	mov	r1, sp
   b5660:	4628      	mov	r0, r5
   b5662:	f7ff fb94 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5666:	e7e8      	b.n	b563a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5668 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b566c:	4617      	mov	r7, r2
   b566e:	b0a1      	sub	sp, #132	; 0x84
   b5670:	4680      	mov	r8, r0
    WiringBleLock lk;
   b5672:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5674:	460e      	mov	r6, r1
    WiringBleLock lk;
   b5676:	f7ff f8b1 	bl	b47dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b567a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b567c:	7923      	ldrb	r3, [r4, #4]
   b567e:	b953      	cbnz	r3, b5696 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5680:	4639      	mov	r1, r7
   b5682:	4640      	mov	r0, r8
   b5684:	f7ff fb83 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5688:	a80a      	add	r0, sp, #40	; 0x28
   b568a:	f7ff f8b5 	bl	b47f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b568e:	4640      	mov	r0, r8
   b5690:	b021      	add	sp, #132	; 0x84
   b5692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5696:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5698:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b569c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b56a0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b56a2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b56a6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b56aa:	9b03      	ldr	r3, [sp, #12]
   b56ac:	429d      	cmp	r5, r3
   b56ae:	d021      	beq.n	b56f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b56b0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b56b4:	4658      	mov	r0, fp
   b56b6:	f109 0114 	add.w	r1, r9, #20
   b56ba:	f7ff f93c 	bl	b4936 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b56be:	b1b8      	cbz	r0, b56f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b56c0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b56c4:	4650      	mov	r0, sl
   b56c6:	f7ff f936 	bl	b4936 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b56ca:	b188      	cbz	r0, b56f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b56cc:	6823      	ldr	r3, [r4, #0]
   b56ce:	f8d9 2000 	ldr.w	r2, [r9]
   b56d2:	4053      	eors	r3, r2
   b56d4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b56d8:	d10a      	bne.n	b56f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b56da:	2220      	movs	r2, #32
   b56dc:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b56e0:	4a5e      	ldr	r2, [pc, #376]	; (b585c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b56e2:	9200      	str	r2, [sp, #0]
   b56e4:	aa15      	add	r2, sp, #84	; 0x54
   b56e6:	495e      	ldr	r1, [pc, #376]	; (b5860 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b56e8:	2032      	movs	r0, #50	; 0x32
   b56ea:	f7fe fed7 	bl	b449c <log_message>
   b56ee:	e7c7      	b.n	b5680 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b56f0:	3508      	adds	r5, #8
   b56f2:	e7da      	b.n	b56aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b56f4:	4650      	mov	r0, sl
   b56f6:	f7ff f8ef 	bl	b48d8 <_ZNK8particle7BleUuid7isValidEv>
   b56fa:	b960      	cbnz	r0, b5716 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b56fc:	4959      	ldr	r1, [pc, #356]	; (b5864 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b56fe:	2201      	movs	r2, #1
   b5700:	a815      	add	r0, sp, #84	; 0x54
   b5702:	ad15      	add	r5, sp, #84	; 0x54
   b5704:	f7ff f8c0 	bl	b4888 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b5708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b570a:	46d4      	mov	ip, sl
   b570c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5710:	682b      	ldr	r3, [r5, #0]
   b5712:	f8cc 3000 	str.w	r3, [ip]
   b5716:	6833      	ldr	r3, [r6, #0]
   b5718:	e9d3 5300 	ldrd	r5, r3, [r3]
   b571c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5720:	455d      	cmp	r5, fp
   b5722:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5724:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5726:	d06e      	beq.n	b5806 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5728:	f855 0b08 	ldr.w	r0, [r5], #8
   b572c:	f7ff f903 	bl	b4936 <_ZNK8particle7BleUuideqERKS0_>
   b5730:	2800      	cmp	r0, #0
   b5732:	d0f5      	beq.n	b5720 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b5734:	f104 0a14 	add.w	sl, r4, #20
   b5738:	4650      	mov	r0, sl
   b573a:	f7ff f8cd 	bl	b48d8 <_ZNK8particle7BleUuid7isValidEv>
   b573e:	b988      	cbnz	r0, b5764 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b5740:	4b49      	ldr	r3, [pc, #292]	; (b5868 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5742:	4948      	ldr	r1, [pc, #288]	; (b5864 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b5744:	881a      	ldrh	r2, [r3, #0]
   b5746:	3201      	adds	r2, #1
   b5748:	b292      	uxth	r2, r2
   b574a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b574c:	a815      	add	r0, sp, #84	; 0x54
   b574e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b5750:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5752:	f7ff f8b8 	bl	b48c6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b5756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5758:	46d4      	mov	ip, sl
   b575a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b575e:	682b      	ldr	r3, [r5, #0]
   b5760:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b5764:	4b41      	ldr	r3, [pc, #260]	; (b586c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b5766:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b5768:	2228      	movs	r2, #40	; 0x28
   b576a:	2100      	movs	r1, #0
   b576c:	a816      	add	r0, sp, #88	; 0x58
   b576e:	f000 fe1b 	bl	b63a8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b5772:	4651      	mov	r1, sl
   b5774:	a804      	add	r0, sp, #16
   b5776:	f7ff f8c1 	bl	b48fc <_ZN8particle7BleUuid7halUUIDEv>
   b577a:	ab04      	add	r3, sp, #16
   b577c:	aa18      	add	r2, sp, #96	; 0x60
   b577e:	f10d 0c20 	add.w	ip, sp, #32
   b5782:	6818      	ldr	r0, [r3, #0]
   b5784:	6859      	ldr	r1, [r3, #4]
   b5786:	4615      	mov	r5, r2
   b5788:	c503      	stmia	r5!, {r0, r1}
   b578a:	3308      	adds	r3, #8
   b578c:	4563      	cmp	r3, ip
   b578e:	462a      	mov	r2, r5
   b5790:	d1f7      	bne.n	b5782 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b5792:	6818      	ldr	r0, [r3, #0]
   b5794:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b5796:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b5798:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b579c:	f8d9 3000 	ldr.w	r3, [r9]
   b57a0:	8a9b      	ldrh	r3, [r3, #20]
   b57a2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b57a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b57a8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b57aa:	4b31      	ldr	r3, [pc, #196]	; (b5870 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b57ac:	2200      	movs	r2, #0
   b57ae:	1da1      	adds	r1, r4, #6
   b57b0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b57b2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b57b6:	f7fe fda5 	bl	b4304 <hal_ble_gatt_server_add_characteristic>
   b57ba:	2800      	cmp	r0, #0
   b57bc:	f47f af60 	bne.w	b5680 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b57c0:	2301      	movs	r3, #1
   b57c2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b57c4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b57c6:	4639      	mov	r1, r7
        return characteristics_;
   b57c8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b57ca:	a80d      	add	r0, sp, #52	; 0x34
   b57cc:	f7ff fadf 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b57d0:	4620      	mov	r0, r4
   b57d2:	a90d      	add	r1, sp, #52	; 0x34
   b57d4:	f7ff ff1b 	bl	b560e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b57d8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b57da:	a80e      	add	r0, sp, #56	; 0x38
   b57dc:	f7ff faf9 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57e0:	2c00      	cmp	r4, #0
   b57e2:	f47f af4d 	bne.w	b5680 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b57e6:	2320      	movs	r3, #32
   b57e8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b57ec:	4b21      	ldr	r3, [pc, #132]	; (b5874 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b57ee:	9300      	str	r3, [sp, #0]
   b57f0:	aa0d      	add	r2, sp, #52	; 0x34
   b57f2:	4623      	mov	r3, r4
   b57f4:	e777      	b.n	b56e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b57f6:	4639      	mov	r1, r7
   b57f8:	4640      	mov	r0, r8
   b57fa:	f7ff fac8 	bl	b4d8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b57fe:	a80c      	add	r0, sp, #48	; 0x30
   b5800:	f7ff fae7 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5804:	e740      	b.n	b5688 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b5806:	a80b      	add	r0, sp, #44	; 0x2c
   b5808:	f7ff f952 	bl	b4ab0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b580c:	4651      	mov	r1, sl
   b580e:	a815      	add	r0, sp, #84	; 0x54
   b5810:	f7ff f874 	bl	b48fc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b5814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5816:	2300      	movs	r3, #0
   b5818:	3214      	adds	r2, #20
   b581a:	a915      	add	r1, sp, #84	; 0x54
   b581c:	2001      	movs	r0, #1
   b581e:	f7fe fd67 	bl	b42f0 <hal_ble_gatt_server_add_service>
   b5822:	2800      	cmp	r0, #0
   b5824:	d1e7      	bne.n	b57f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b5826:	6835      	ldr	r5, [r6, #0]
   b5828:	a90b      	add	r1, sp, #44	; 0x2c
   b582a:	a80d      	add	r0, sp, #52	; 0x34
   b582c:	f7ff fabd 	bl	b4daa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b5830:	4628      	mov	r0, r5
   b5832:	a90d      	add	r1, sp, #52	; 0x34
   b5834:	f7ff fe7c 	bl	b5530 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b5838:	4605      	mov	r5, r0
   b583a:	a80e      	add	r0, sp, #56	; 0x38
   b583c:	f7ff fac9 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5840:	2d00      	cmp	r5, #0
   b5842:	d0d8      	beq.n	b57f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b5844:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b5846:	6853      	ldr	r3, [r2, #4]
   b5848:	6812      	ldr	r2, [r2, #0]
   b584a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b584e:	3b01      	subs	r3, #1
   b5850:	a80c      	add	r0, sp, #48	; 0x30
   b5852:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b5856:	f7ff fabc 	bl	b4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b585a:	e76b      	b.n	b5734 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b585c:	000b66d9 	.word	0x000b66d9
   b5860:	000b65f6 	.word	0x000b65f6
   b5864:	000b679e 	.word	0x000b679e
   b5868:	2003e6d4 	.word	0x2003e6d4
   b586c:	002c0003 	.word	0x002c0003
   b5870:	000b4c49 	.word	0x000b4c49
   b5874:	000b6704 	.word	0x000b6704

000b5878 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b5878:	4802      	ldr	r0, [pc, #8]	; (b5884 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b587a:	2300      	movs	r3, #0
   b587c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b587e:	f7fe bd55 	b.w	b432c <os_mutex_recursive_create>
   b5882:	bf00      	nop
   b5884:	2003e6d8 	.word	0x2003e6d8

000b5888 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5888:	2200      	movs	r2, #0
   b588a:	6840      	ldr	r0, [r0, #4]
   b588c:	4611      	mov	r1, r2
   b588e:	f7fe be71 	b.w	b4574 <network_listening>

000b5892 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5892:	2200      	movs	r2, #0
   b5894:	6840      	ldr	r0, [r0, #4]
   b5896:	4611      	mov	r1, r2
   b5898:	f7fe be7c 	b.w	b4594 <network_get_listen_timeout>

000b589c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b589c:	6840      	ldr	r0, [r0, #4]
   b589e:	2200      	movs	r2, #0
   b58a0:	f7fe be70 	b.w	b4584 <network_set_listen_timeout>

000b58a4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58a4:	6840      	ldr	r0, [r0, #4]
   b58a6:	2200      	movs	r2, #0
   b58a8:	f081 0101 	eor.w	r1, r1, #1
   b58ac:	f7fe be5a 	b.w	b4564 <network_listen>

000b58b0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58b0:	2300      	movs	r3, #0
   b58b2:	6840      	ldr	r0, [r0, #4]
   b58b4:	461a      	mov	r2, r3
   b58b6:	4619      	mov	r1, r3
   b58b8:	f7fe be4c 	b.w	b4554 <network_off>

000b58bc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58bc:	2300      	movs	r3, #0
   b58be:	6840      	ldr	r0, [r0, #4]
   b58c0:	461a      	mov	r2, r3
   b58c2:	4619      	mov	r1, r3
   b58c4:	f7fe be3e 	b.w	b4544 <network_on>

000b58c8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b58c8:	2200      	movs	r2, #0
   b58ca:	6840      	ldr	r0, [r0, #4]
   b58cc:	4611      	mov	r1, r2
   b58ce:	f7fe be31 	b.w	b4534 <network_ready>

000b58d2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b58d2:	2200      	movs	r2, #0
   b58d4:	6840      	ldr	r0, [r0, #4]
   b58d6:	4611      	mov	r1, r2
   b58d8:	f7fe be1c 	b.w	b4514 <network_connecting>

000b58dc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b58dc:	6840      	ldr	r0, [r0, #4]
   b58de:	2200      	movs	r2, #0
   b58e0:	2102      	movs	r1, #2
   b58e2:	f7fe be1f 	b.w	b4524 <network_disconnect>

000b58e6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b58e6:	2300      	movs	r3, #0
   b58e8:	6840      	ldr	r0, [r0, #4]
   b58ea:	461a      	mov	r2, r3
   b58ec:	f7fe be0a 	b.w	b4504 <network_connect>

000b58f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b58f0:	4b02      	ldr	r3, [pc, #8]	; (b58fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b58f2:	2203      	movs	r2, #3
   b58f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b58f6:	4a02      	ldr	r2, [pc, #8]	; (b5900 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b58f8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b58fa:	4770      	bx	lr
   b58fc:	2003e6e0 	.word	0x2003e6e0
   b5900:	000b67c8 	.word	0x000b67c8

000b5904 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5904:	4770      	bx	lr

000b5906 <_ZN9IPAddressD0Ev>:
   b5906:	b510      	push	{r4, lr}
   b5908:	2118      	movs	r1, #24
   b590a:	4604      	mov	r4, r0
   b590c:	f7fe fbc5 	bl	b409a <_ZdlPvj>
   b5910:	4620      	mov	r0, r4
   b5912:	bd10      	pop	{r4, pc}

000b5914 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5914:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5916:	7d03      	ldrb	r3, [r0, #20]
   b5918:	2b06      	cmp	r3, #6
{
   b591a:	b08d      	sub	sp, #52	; 0x34
   b591c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b591e:	f100 0704 	add.w	r7, r0, #4
   b5922:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5926:	d012      	beq.n	b594e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5928:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b592c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5930:	220a      	movs	r2, #10
   b5932:	4630      	mov	r0, r6
   b5934:	f000 f943 	bl	b5bbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5938:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b593a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b593c:	d019      	beq.n	b5972 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b593e:	2c00      	cmp	r4, #0
   b5940:	d0f4      	beq.n	b592c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5942:	212e      	movs	r1, #46	; 0x2e
   b5944:	4630      	mov	r0, r6
   b5946:	f000 f937 	bl	b5bb8 <_ZN5Print5printEc>
   b594a:	4404      	add	r4, r0
   b594c:	e7ee      	b.n	b592c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b594e:	232f      	movs	r3, #47	; 0x2f
   b5950:	466a      	mov	r2, sp
   b5952:	4639      	mov	r1, r7
   b5954:	200a      	movs	r0, #10
		buf[0] = 0;
   b5956:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b595a:	f7fe fd17 	bl	b438c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b595e:	4668      	mov	r0, sp
   b5960:	f000 fd62 	bl	b6428 <strlen>
   b5964:	6833      	ldr	r3, [r6, #0]
   b5966:	4602      	mov	r2, r0
   b5968:	68db      	ldr	r3, [r3, #12]
   b596a:	4669      	mov	r1, sp
   b596c:	4630      	mov	r0, r6
   b596e:	4798      	blx	r3
   b5970:	4604      	mov	r4, r0
    }
    return n;
}
   b5972:	4620      	mov	r0, r4
   b5974:	b00d      	add	sp, #52	; 0x34
   b5976:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5978 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5978:	b510      	push	{r4, lr}
   b597a:	4b05      	ldr	r3, [pc, #20]	; (b5990 <_ZN9IPAddressC1Ev+0x18>)
   b597c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b597e:	2211      	movs	r2, #17
   b5980:	f840 3b04 	str.w	r3, [r0], #4
   b5984:	2100      	movs	r1, #0
   b5986:	f000 fd0f 	bl	b63a8 <memset>
}
   b598a:	4620      	mov	r0, r4
   b598c:	bd10      	pop	{r4, pc}
   b598e:	bf00      	nop
   b5990:	000b6804 	.word	0x000b6804

000b5994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5994:	4603      	mov	r3, r0
   b5996:	4a07      	ldr	r2, [pc, #28]	; (b59b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5998:	b510      	push	{r4, lr}
   b599a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b599e:	f101 0210 	add.w	r2, r1, #16
   b59a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b59a6:	f843 4b04 	str.w	r4, [r3], #4
   b59aa:	4291      	cmp	r1, r2
   b59ac:	d1f9      	bne.n	b59a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b59ae:	780a      	ldrb	r2, [r1, #0]
   b59b0:	701a      	strb	r2, [r3, #0]
}
   b59b2:	bd10      	pop	{r4, pc}
   b59b4:	000b6804 	.word	0x000b6804

000b59b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b59b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b59ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b59be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b59c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b59c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b59ca:	2304      	movs	r3, #4
   b59cc:	6041      	str	r1, [r0, #4]
   b59ce:	7503      	strb	r3, [r0, #20]
}
   b59d0:	bd10      	pop	{r4, pc}
	...

000b59d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b59d4:	b507      	push	{r0, r1, r2, lr}
   b59d6:	4b06      	ldr	r3, [pc, #24]	; (b59f0 <_ZN9IPAddressC1EPKh+0x1c>)
   b59d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b59da:	78cb      	ldrb	r3, [r1, #3]
   b59dc:	9300      	str	r3, [sp, #0]
   b59de:	788b      	ldrb	r3, [r1, #2]
   b59e0:	784a      	ldrb	r2, [r1, #1]
   b59e2:	7809      	ldrb	r1, [r1, #0]
   b59e4:	f7ff ffe8 	bl	b59b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59e8:	b003      	add	sp, #12
   b59ea:	f85d fb04 	ldr.w	pc, [sp], #4
   b59ee:	bf00      	nop
   b59f0:	000b6804 	.word	0x000b6804

000b59f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b59f4:	4b01      	ldr	r3, [pc, #4]	; (b59fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b59f6:	4a02      	ldr	r2, [pc, #8]	; (b5a00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b59f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b59fa:	4770      	bx	lr
   b59fc:	2003e6e8 	.word	0x2003e6e8
   b5a00:	000b6810 	.word	0x000b6810

000b5a04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a04:	2300      	movs	r3, #0
   b5a06:	6840      	ldr	r0, [r0, #4]
   b5a08:	461a      	mov	r2, r3
   b5a0a:	f7fe bd7b 	b.w	b4504 <network_connect>

000b5a0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a0e:	6840      	ldr	r0, [r0, #4]
   b5a10:	2200      	movs	r2, #0
   b5a12:	2102      	movs	r1, #2
   b5a14:	f7fe bd86 	b.w	b4524 <network_disconnect>

000b5a18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a18:	2200      	movs	r2, #0
   b5a1a:	6840      	ldr	r0, [r0, #4]
   b5a1c:	4611      	mov	r1, r2
   b5a1e:	f7fe bd79 	b.w	b4514 <network_connecting>

000b5a22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a22:	2200      	movs	r2, #0
   b5a24:	6840      	ldr	r0, [r0, #4]
   b5a26:	4611      	mov	r1, r2
   b5a28:	f7fe bd84 	b.w	b4534 <network_ready>

000b5a2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a2c:	2300      	movs	r3, #0
   b5a2e:	6840      	ldr	r0, [r0, #4]
   b5a30:	461a      	mov	r2, r3
   b5a32:	4619      	mov	r1, r3
   b5a34:	f7fe bd86 	b.w	b4544 <network_on>

000b5a38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5a38:	2300      	movs	r3, #0
   b5a3a:	6840      	ldr	r0, [r0, #4]
   b5a3c:	461a      	mov	r2, r3
   b5a3e:	4619      	mov	r1, r3
   b5a40:	f7fe bd88 	b.w	b4554 <network_off>

000b5a44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5a44:	6840      	ldr	r0, [r0, #4]
   b5a46:	2100      	movs	r1, #0
   b5a48:	f7fe bdac 	b.w	b45a4 <network_is_on>

000b5a4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5a4c:	6840      	ldr	r0, [r0, #4]
   b5a4e:	2100      	movs	r1, #0
   b5a50:	f7fe bdb0 	b.w	b45b4 <network_is_off>

000b5a54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5a54:	6840      	ldr	r0, [r0, #4]
   b5a56:	2200      	movs	r2, #0
   b5a58:	f081 0101 	eor.w	r1, r1, #1
   b5a5c:	f7fe bd82 	b.w	b4564 <network_listen>

000b5a60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5a60:	6840      	ldr	r0, [r0, #4]
   b5a62:	2200      	movs	r2, #0
   b5a64:	f7fe bd8e 	b.w	b4584 <network_set_listen_timeout>

000b5a68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5a68:	2200      	movs	r2, #0
   b5a6a:	6840      	ldr	r0, [r0, #4]
   b5a6c:	4611      	mov	r1, r2
   b5a6e:	f7fe bd91 	b.w	b4594 <network_get_listen_timeout>

000b5a72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5a72:	2200      	movs	r2, #0
   b5a74:	6840      	ldr	r0, [r0, #4]
   b5a76:	4611      	mov	r1, r2
   b5a78:	f7fe bd7c 	b.w	b4574 <network_listening>

000b5a7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a80:	b095      	sub	sp, #84	; 0x54
   b5a82:	4614      	mov	r4, r2
   b5a84:	460d      	mov	r5, r1
   b5a86:	4607      	mov	r7, r0
    IPAddress addr;
   b5a88:	f7ff ff76 	bl	b5978 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5a8c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5a8e:	221c      	movs	r2, #28
   b5a90:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5a92:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5a94:	f000 fc88 	bl	b63a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5a98:	2340      	movs	r3, #64	; 0x40
   b5a9a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	466b      	mov	r3, sp
   b5aa0:	aa0c      	add	r2, sp, #48	; 0x30
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	f7fe fc82 	bl	b43ac <netdb_getaddrinfo>
    if (!r) {
   b5aa8:	4604      	mov	r4, r0
   b5aaa:	2800      	cmp	r0, #0
   b5aac:	d14b      	bne.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5aae:	4602      	mov	r2, r0
   b5ab0:	2101      	movs	r1, #1
   b5ab2:	6868      	ldr	r0, [r5, #4]
   b5ab4:	f7fe fd3e 	bl	b4534 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ab8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5aba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5abc:	4622      	mov	r2, r4
   b5abe:	6868      	ldr	r0, [r5, #4]
   b5ac0:	f7fe fd38 	bl	b4534 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ac4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ac6:	4681      	mov	r9, r0
        bool ok = false;
   b5ac8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5aca:	2e00      	cmp	r6, #0
   b5acc:	d03b      	beq.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5ace:	2900      	cmp	r1, #0
   b5ad0:	d139      	bne.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5ad2:	6873      	ldr	r3, [r6, #4]
   b5ad4:	2b02      	cmp	r3, #2
   b5ad6:	d003      	beq.n	b5ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5ad8:	2b0a      	cmp	r3, #10
   b5ada:	d011      	beq.n	b5b00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5adc:	69f6      	ldr	r6, [r6, #28]
   b5ade:	e7f4      	b.n	b5aca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ae0:	f1b8 0f00 	cmp.w	r8, #0
   b5ae4:	d0fa      	beq.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5ae6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5ae8:	a806      	add	r0, sp, #24
   b5aea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5aec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5aee:	f7ff ff71 	bl	b59d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5af4:	1d3c      	adds	r4, r7, #4
   b5af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5af8:	682b      	ldr	r3, [r5, #0]
   b5afa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5afc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5afe:	e7ed      	b.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b00:	f1b9 0f00 	cmp.w	r9, #0
   b5b04:	d0ea      	beq.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b08:	2210      	movs	r2, #16
   b5b0a:	a801      	add	r0, sp, #4
   b5b0c:	f000 fc4c 	bl	b63a8 <memset>
                    a.v = 6;
   b5b10:	2306      	movs	r3, #6
   b5b12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b16:	ad01      	add	r5, sp, #4
   b5b18:	f104 0308 	add.w	r3, r4, #8
   b5b1c:	3418      	adds	r4, #24
   b5b1e:	6818      	ldr	r0, [r3, #0]
   b5b20:	6859      	ldr	r1, [r3, #4]
   b5b22:	462a      	mov	r2, r5
   b5b24:	c203      	stmia	r2!, {r0, r1}
   b5b26:	3308      	adds	r3, #8
   b5b28:	42a3      	cmp	r3, r4
   b5b2a:	4615      	mov	r5, r2
   b5b2c:	d1f7      	bne.n	b5b1e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b2e:	a901      	add	r1, sp, #4
   b5b30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b32:	ad07      	add	r5, sp, #28
   b5b34:	f7ff ff2e 	bl	b5994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b3a:	1d3c      	adds	r4, r7, #4
   b5b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b3e:	682b      	ldr	r3, [r5, #0]
   b5b40:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b42:	4649      	mov	r1, r9
   b5b44:	e7ca      	b.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5b46:	9800      	ldr	r0, [sp, #0]
   b5b48:	f7fe fc28 	bl	b439c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5b4c:	4638      	mov	r0, r7
   b5b4e:	b015      	add	sp, #84	; 0x54
   b5b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5b54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5b54:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5b56:	4a03      	ldr	r2, [pc, #12]	; (b5b64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5b58:	601a      	str	r2, [r3, #0]
   b5b5a:	2200      	movs	r2, #0
   b5b5c:	605a      	str	r2, [r3, #4]

} // spark
   b5b5e:	4770      	bx	lr
   b5b60:	2003e6ec 	.word	0x2003e6ec
   b5b64:	000b681c 	.word	0x000b681c

000b5b68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b6a:	4606      	mov	r6, r0
   b5b6c:	460d      	mov	r5, r1
  size_t n = 0;
   b5b6e:	188f      	adds	r7, r1, r2
   b5b70:	2400      	movs	r4, #0
  while (size--) {
   b5b72:	42bd      	cmp	r5, r7
   b5b74:	d00c      	beq.n	b5b90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5b76:	6833      	ldr	r3, [r6, #0]
   b5b78:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5b7c:	689b      	ldr	r3, [r3, #8]
   b5b7e:	4630      	mov	r0, r6
   b5b80:	4798      	blx	r3
     if (chunk>=0)
   b5b82:	1e03      	subs	r3, r0, #0
   b5b84:	db01      	blt.n	b5b8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5b86:	441c      	add	r4, r3
  while (size--) {
   b5b88:	e7f3      	b.n	b5b72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5b8a:	2c00      	cmp	r4, #0
   b5b8c:	bf08      	it	eq
   b5b8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5b90:	4620      	mov	r0, r4
   b5b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b94 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5b94:	b513      	push	{r0, r1, r4, lr}
   b5b96:	4604      	mov	r4, r0
    }
   b5b98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5b9a:	b159      	cbz	r1, b5bb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5b9c:	9101      	str	r1, [sp, #4]
   b5b9e:	f000 fc43 	bl	b6428 <strlen>
   b5ba2:	6823      	ldr	r3, [r4, #0]
   b5ba4:	9901      	ldr	r1, [sp, #4]
   b5ba6:	68db      	ldr	r3, [r3, #12]
   b5ba8:	4602      	mov	r2, r0
   b5baa:	4620      	mov	r0, r4
    }
   b5bac:	b002      	add	sp, #8
   b5bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5bb2:	4718      	bx	r3
    }
   b5bb4:	b002      	add	sp, #8
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	689b      	ldr	r3, [r3, #8]
   b5bbc:	4718      	bx	r3

000b5bbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5bbe:	b530      	push	{r4, r5, lr}
   b5bc0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5bc2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5bc4:	2a01      	cmp	r2, #1
  *str = '\0';
   b5bc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5bca:	bf98      	it	ls
   b5bcc:	220a      	movls	r2, #10
   b5bce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5bd0:	460d      	mov	r5, r1
   b5bd2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5bd6:	fb01 5312 	mls	r3, r1, r2, r5
   b5bda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5bde:	2b09      	cmp	r3, #9
   b5be0:	bf94      	ite	ls
   b5be2:	3330      	addls	r3, #48	; 0x30
   b5be4:	3337      	addhi	r3, #55	; 0x37
   b5be6:	b2db      	uxtb	r3, r3
  } while(n);
   b5be8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5bea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5bee:	d9ef      	bls.n	b5bd0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5bf0:	4621      	mov	r1, r4
   b5bf2:	f7ff ffcf 	bl	b5b94 <_ZN5Print5writeEPKc>
}
   b5bf6:	b00b      	add	sp, #44	; 0x2c
   b5bf8:	bd30      	pop	{r4, r5, pc}
	...

000b5bfc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5bfc:	4b01      	ldr	r3, [pc, #4]	; (b5c04 <_GLOBAL__sub_I_RGB+0x8>)
   b5bfe:	2200      	movs	r2, #0
   b5c00:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c02:	4770      	bx	lr
   b5c04:	2003e6f4 	.word	0x2003e6f4

000b5c08 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5c08:	b510      	push	{r4, lr}
   b5c0a:	4604      	mov	r4, r0
{
	free(buffer);
   b5c0c:	6800      	ldr	r0, [r0, #0]
   b5c0e:	f7fe fce1 	bl	b45d4 <free>
}
   b5c12:	4620      	mov	r0, r4
   b5c14:	bd10      	pop	{r4, pc}

000b5c16 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5c16:	b510      	push	{r4, lr}
   b5c18:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5c1a:	6800      	ldr	r0, [r0, #0]
   b5c1c:	b108      	cbz	r0, b5c22 <_ZN6String10invalidateEv+0xc>
   b5c1e:	f7fe fcd9 	bl	b45d4 <free>
	buffer = NULL;
   b5c22:	2300      	movs	r3, #0
	capacity = len = 0;
   b5c24:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5c28:	6023      	str	r3, [r4, #0]
}
   b5c2a:	bd10      	pop	{r4, pc}

000b5c2c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5c2c:	b538      	push	{r3, r4, r5, lr}
   b5c2e:	4604      	mov	r4, r0
   b5c30:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5c32:	6800      	ldr	r0, [r0, #0]
   b5c34:	3101      	adds	r1, #1
   b5c36:	f7fe fcd5 	bl	b45e4 <realloc>
	if (newbuffer) {
   b5c3a:	b110      	cbz	r0, b5c42 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5c3c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5c40:	2001      	movs	r0, #1
	}
	return 0;
}
   b5c42:	bd38      	pop	{r3, r4, r5, pc}

000b5c44 <_ZN6String7reserveEj>:
{
   b5c44:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5c46:	6803      	ldr	r3, [r0, #0]
{
   b5c48:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5c4a:	b123      	cbz	r3, b5c56 <_ZN6String7reserveEj+0x12>
   b5c4c:	6843      	ldr	r3, [r0, #4]
   b5c4e:	428b      	cmp	r3, r1
   b5c50:	d301      	bcc.n	b5c56 <_ZN6String7reserveEj+0x12>
   b5c52:	2001      	movs	r0, #1
}
   b5c54:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff ffe8 	bl	b5c2c <_ZN6String12changeBufferEj>
   b5c5c:	2800      	cmp	r0, #0
   b5c5e:	d0f9      	beq.n	b5c54 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5c60:	68a3      	ldr	r3, [r4, #8]
   b5c62:	2b00      	cmp	r3, #0
   b5c64:	d1f5      	bne.n	b5c52 <_ZN6String7reserveEj+0xe>
   b5c66:	6822      	ldr	r2, [r4, #0]
   b5c68:	7013      	strb	r3, [r2, #0]
   b5c6a:	e7f2      	b.n	b5c52 <_ZN6String7reserveEj+0xe>

000b5c6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c6e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5c70:	4611      	mov	r1, r2
   b5c72:	9201      	str	r2, [sp, #4]
{
   b5c74:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5c76:	f7ff ffe5 	bl	b5c44 <_ZN6String7reserveEj>
   b5c7a:	9a01      	ldr	r2, [sp, #4]
   b5c7c:	b928      	cbnz	r0, b5c8a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f7ff ffc9 	bl	b5c16 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5c84:	4620      	mov	r0, r4
   b5c86:	b003      	add	sp, #12
   b5c88:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5c8a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5c8c:	4629      	mov	r1, r5
   b5c8e:	6820      	ldr	r0, [r4, #0]
   b5c90:	f000 fb62 	bl	b6358 <memcpy>
	buffer[len] = 0;
   b5c94:	6822      	ldr	r2, [r4, #0]
   b5c96:	68a3      	ldr	r3, [r4, #8]
   b5c98:	2100      	movs	r1, #0
   b5c9a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5c9c:	e7f2      	b.n	b5c84 <_ZN6String4copyEPKcj+0x18>

000b5c9e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5c9e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5ca0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5ca2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5ca6:	4604      	mov	r4, r0
	len = 0;
   b5ca8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5caa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5cac:	b141      	cbz	r1, b5cc0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5cae:	4608      	mov	r0, r1
   b5cb0:	9101      	str	r1, [sp, #4]
   b5cb2:	f000 fbb9 	bl	b6428 <strlen>
   b5cb6:	9901      	ldr	r1, [sp, #4]
   b5cb8:	4602      	mov	r2, r0
   b5cba:	4620      	mov	r0, r4
   b5cbc:	f7ff ffd6 	bl	b5c6c <_ZN6String4copyEPKcj>
}
   b5cc0:	4620      	mov	r0, r4
   b5cc2:	b002      	add	sp, #8
   b5cc4:	bd10      	pop	{r4, pc}

000b5cc6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5cc6:	b513      	push	{r0, r1, r4, lr}
   b5cc8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5cca:	b159      	cbz	r1, b5ce4 <_ZN6StringaSEPKc+0x1e>
   b5ccc:	4608      	mov	r0, r1
   b5cce:	9101      	str	r1, [sp, #4]
   b5cd0:	f000 fbaa 	bl	b6428 <strlen>
   b5cd4:	9901      	ldr	r1, [sp, #4]
   b5cd6:	4602      	mov	r2, r0
   b5cd8:	4620      	mov	r0, r4
   b5cda:	f7ff ffc7 	bl	b5c6c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5cde:	4620      	mov	r0, r4
   b5ce0:	b002      	add	sp, #8
   b5ce2:	bd10      	pop	{r4, pc}
	else invalidate();
   b5ce4:	f7ff ff97 	bl	b5c16 <_ZN6String10invalidateEv>
   b5ce8:	e7f9      	b.n	b5cde <_ZN6StringaSEPKc+0x18>
	...

000b5cec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5cec:	4b05      	ldr	r3, [pc, #20]	; (b5d04 <_GLOBAL__sub_I_System+0x18>)
   b5cee:	2202      	movs	r2, #2
   b5cf0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5cf2:	4b05      	ldr	r3, [pc, #20]	; (b5d08 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5cf4:	4a05      	ldr	r2, [pc, #20]	; (b5d0c <_GLOBAL__sub_I_System+0x20>)
   b5cf6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5cf8:	2000      	movs	r0, #0
   b5cfa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5cfe:	f7fe bbd5 	b.w	b44ac <set_system_mode>
   b5d02:	bf00      	nop
   b5d04:	2003e710 	.word	0x2003e710
   b5d08:	2003e704 	.word	0x2003e704
   b5d0c:	ffff0000 	.word	0xffff0000

000b5d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5d10:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5d12:	681a      	ldr	r2, [r3, #0]
   b5d14:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5d16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5d18:	4770      	bx	lr
   b5d1a:	bf00      	nop
   b5d1c:	2003e638 	.word	0x2003e638
   b5d20:	2003e714 	.word	0x2003e714

000b5d24 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5d24:	4770      	bx	lr

000b5d26 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d26:	7441      	strb	r1, [r0, #17]
}
   b5d28:	4770      	bx	lr

000b5d2a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5d2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5d2c:	7c00      	ldrb	r0, [r0, #16]
   b5d2e:	f7fe fb6d 	bl	b440c <hal_usart_available_data_for_write>
}
   b5d32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d36:	bd08      	pop	{r3, pc}

000b5d38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5d38:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5d3a:	7c00      	ldrb	r0, [r0, #16]
   b5d3c:	f7fe fb46 	bl	b43cc <hal_usart_available>
}
   b5d40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d44:	bd08      	pop	{r3, pc}

000b5d46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5d46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5d48:	7c00      	ldrb	r0, [r0, #16]
   b5d4a:	f7fe fb4f 	bl	b43ec <hal_usart_peek>
}
   b5d4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d52:	bd08      	pop	{r3, pc}

000b5d54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5d54:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5d56:	7c00      	ldrb	r0, [r0, #16]
   b5d58:	f7fe fb40 	bl	b43dc <hal_usart_read>
}
   b5d5c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d60:	bd08      	pop	{r3, pc}

000b5d62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5d62:	7c00      	ldrb	r0, [r0, #16]
   b5d64:	f7fe bb4a 	b.w	b43fc <hal_usart_flush>

000b5d68 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d6a:	7c45      	ldrb	r5, [r0, #17]
{
   b5d6c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d6e:	b12d      	cbz	r5, b5d7c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5d70:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5d72:	b003      	add	sp, #12
   b5d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5d78:	f7fe bb20 	b.w	b43bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d7c:	7c00      	ldrb	r0, [r0, #16]
   b5d7e:	9101      	str	r1, [sp, #4]
   b5d80:	f7fe fb44 	bl	b440c <hal_usart_available_data_for_write>
   b5d84:	2800      	cmp	r0, #0
   b5d86:	9901      	ldr	r1, [sp, #4]
   b5d88:	dcf2      	bgt.n	b5d70 <_ZN11USARTSerial5writeEh+0x8>
}
   b5d8a:	4628      	mov	r0, r5
   b5d8c:	b003      	add	sp, #12
   b5d8e:	bd30      	pop	{r4, r5, pc}

000b5d90 <_ZN11USARTSerialD0Ev>:
   b5d90:	b510      	push	{r4, lr}
   b5d92:	2114      	movs	r1, #20
   b5d94:	4604      	mov	r4, r0
   b5d96:	f7fe f980 	bl	b409a <_ZdlPvj>
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	bd10      	pop	{r4, pc}
	...

000b5da0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5da0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5da6:	4604      	mov	r4, r0
   b5da8:	4608      	mov	r0, r1
   b5daa:	4611      	mov	r1, r2
   b5dac:	2200      	movs	r2, #0
   b5dae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5db2:	4b04      	ldr	r3, [pc, #16]	; (b5dc4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5db4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5db6:	2301      	movs	r3, #1
  _serial = serial;
   b5db8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5dba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5dbc:	f7fe fb2e 	bl	b441c <hal_usart_init_ex>
}
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	bd10      	pop	{r4, pc}
   b5dc4:	000b6874 	.word	0x000b6874

000b5dc8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5dc8:	7441      	strb	r1, [r0, #17]
}
   b5dca:	4770      	bx	lr

000b5dcc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5dcc:	4770      	bx	lr

000b5dce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5dce:	4770      	bx	lr

000b5dd0 <_ZN9USBSerial4readEv>:
{
   b5dd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5dd2:	2100      	movs	r1, #0
   b5dd4:	7c00      	ldrb	r0, [r0, #16]
   b5dd6:	f7fe fb41 	bl	b445c <HAL_USB_USART_Receive_Data>
}
   b5dda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5dde:	bd08      	pop	{r3, pc}

000b5de0 <_ZN9USBSerial4peekEv>:
{
   b5de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5de2:	2101      	movs	r1, #1
   b5de4:	7c00      	ldrb	r0, [r0, #16]
   b5de6:	f7fe fb39 	bl	b445c <HAL_USB_USART_Receive_Data>
}
   b5dea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5dee:	bd08      	pop	{r3, pc}

000b5df0 <_ZN9USBSerial17availableForWriteEv>:
{
   b5df0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5df2:	7c00      	ldrb	r0, [r0, #16]
   b5df4:	f7fe fb2a 	bl	b444c <HAL_USB_USART_Available_Data_For_Write>
}
   b5df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5dfc:	bd08      	pop	{r3, pc}

000b5dfe <_ZN9USBSerial9availableEv>:
{
   b5dfe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5e00:	7c00      	ldrb	r0, [r0, #16]
   b5e02:	f7fe fb1b 	bl	b443c <HAL_USB_USART_Available_Data>
}
   b5e06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e0a:	bd08      	pop	{r3, pc}

000b5e0c <_ZN9USBSerial5writeEh>:
{
   b5e0c:	b513      	push	{r0, r1, r4, lr}
   b5e0e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5e10:	7c00      	ldrb	r0, [r0, #16]
{
   b5e12:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5e14:	f7fe fb1a 	bl	b444c <HAL_USB_USART_Available_Data_For_Write>
   b5e18:	2800      	cmp	r0, #0
   b5e1a:	9901      	ldr	r1, [sp, #4]
   b5e1c:	dc01      	bgt.n	b5e22 <_ZN9USBSerial5writeEh+0x16>
   b5e1e:	7c60      	ldrb	r0, [r4, #17]
   b5e20:	b120      	cbz	r0, b5e2c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5e22:	7c20      	ldrb	r0, [r4, #16]
   b5e24:	f7fe fb22 	bl	b446c <HAL_USB_USART_Send_Data>
   b5e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5e2c:	b002      	add	sp, #8
   b5e2e:	bd10      	pop	{r4, pc}

000b5e30 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5e30:	7c00      	ldrb	r0, [r0, #16]
   b5e32:	f7fe bb23 	b.w	b447c <HAL_USB_USART_Flush_Data>

000b5e36 <_ZN9USBSerialD0Ev>:
   b5e36:	b510      	push	{r4, lr}
   b5e38:	2114      	movs	r1, #20
   b5e3a:	4604      	mov	r4, r0
   b5e3c:	f7fe f92d 	bl	b409a <_ZdlPvj>
   b5e40:	4620      	mov	r0, r4
   b5e42:	bd10      	pop	{r4, pc}

000b5e44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5e44:	b510      	push	{r4, lr}
   b5e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e4a:	4604      	mov	r4, r0
   b5e4c:	4608      	mov	r0, r1
   b5e4e:	2100      	movs	r1, #0
   b5e50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5e54:	4b04      	ldr	r3, [pc, #16]	; (b5e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5e56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e58:	2301      	movs	r3, #1
  _serial = serial;
   b5e5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5e5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5e5e:	4611      	mov	r1, r2
   b5e60:	f7fe fae4 	bl	b442c <HAL_USB_USART_Init>
}
   b5e64:	4620      	mov	r0, r4
   b5e66:	bd10      	pop	{r4, pc}
   b5e68:	000b68a4 	.word	0x000b68a4

000b5e6c <_Z19acquireSerialBufferv>:
{
   b5e6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5e6e:	2214      	movs	r2, #20
{
   b5e70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5e72:	2100      	movs	r1, #0
   b5e74:	f000 fa98 	bl	b63a8 <memset>
}
   b5e78:	4620      	mov	r0, r4
   b5e7a:	bd10      	pop	{r4, pc}

000b5e7c <_Z16_fetch_usbserialv>:
{
   b5e7c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e7e:	4c0f      	ldr	r4, [pc, #60]	; (b5ebc <_Z16_fetch_usbserialv+0x40>)
{
   b5e80:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5e82:	a803      	add	r0, sp, #12
   b5e84:	f7ff fff2 	bl	b5e6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e88:	7821      	ldrb	r1, [r4, #0]
   b5e8a:	f3bf 8f5b 	dmb	ish
   b5e8e:	f011 0101 	ands.w	r1, r1, #1
   b5e92:	d10f      	bne.n	b5eb4 <_Z16_fetch_usbserialv+0x38>
   b5e94:	4620      	mov	r0, r4
   b5e96:	9101      	str	r1, [sp, #4]
   b5e98:	f7fe f901 	bl	b409e <__cxa_guard_acquire>
   b5e9c:	9901      	ldr	r1, [sp, #4]
   b5e9e:	b148      	cbz	r0, b5eb4 <_Z16_fetch_usbserialv+0x38>
   b5ea0:	aa03      	add	r2, sp, #12
   b5ea2:	4807      	ldr	r0, [pc, #28]	; (b5ec0 <_Z16_fetch_usbserialv+0x44>)
   b5ea4:	f7ff ffce 	bl	b5e44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	f7fe f8fd 	bl	b40a8 <__cxa_guard_release>
   b5eae:	4805      	ldr	r0, [pc, #20]	; (b5ec4 <_Z16_fetch_usbserialv+0x48>)
   b5eb0:	f000 fa3c 	bl	b632c <atexit>
	return _usbserial;
}
   b5eb4:	4802      	ldr	r0, [pc, #8]	; (b5ec0 <_Z16_fetch_usbserialv+0x44>)
   b5eb6:	b008      	add	sp, #32
   b5eb8:	bd10      	pop	{r4, pc}
   b5eba:	bf00      	nop
   b5ebc:	2003e718 	.word	0x2003e718
   b5ec0:	2003e71c 	.word	0x2003e71c
   b5ec4:	000b5dcd 	.word	0x000b5dcd

000b5ec8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5ec8:	2200      	movs	r2, #0
   b5eca:	6840      	ldr	r0, [r0, #4]
   b5ecc:	4611      	mov	r1, r2
   b5ece:	f7fe bb31 	b.w	b4534 <network_ready>

000b5ed2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5ed2:	2200      	movs	r2, #0
   b5ed4:	6840      	ldr	r0, [r0, #4]
   b5ed6:	4611      	mov	r1, r2
   b5ed8:	f7fe bb4c 	b.w	b4574 <network_listening>

000b5edc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5edc:	2200      	movs	r2, #0
   b5ede:	6840      	ldr	r0, [r0, #4]
   b5ee0:	4611      	mov	r1, r2
   b5ee2:	f7fe bb57 	b.w	b4594 <network_get_listen_timeout>

000b5ee6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5ee6:	6840      	ldr	r0, [r0, #4]
   b5ee8:	2200      	movs	r2, #0
   b5eea:	f7fe bb4b 	b.w	b4584 <network_set_listen_timeout>

000b5eee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5eee:	6840      	ldr	r0, [r0, #4]
   b5ef0:	2200      	movs	r2, #0
   b5ef2:	f081 0101 	eor.w	r1, r1, #1
   b5ef6:	f7fe bb35 	b.w	b4564 <network_listen>

000b5efa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5efa:	2300      	movs	r3, #0
   b5efc:	6840      	ldr	r0, [r0, #4]
   b5efe:	461a      	mov	r2, r3
   b5f00:	4619      	mov	r1, r3
   b5f02:	f7fe bb27 	b.w	b4554 <network_off>

000b5f06 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f06:	2300      	movs	r3, #0
   b5f08:	6840      	ldr	r0, [r0, #4]
   b5f0a:	461a      	mov	r2, r3
   b5f0c:	4619      	mov	r1, r3
   b5f0e:	f7fe bb19 	b.w	b4544 <network_on>

000b5f12 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f12:	2200      	movs	r2, #0
   b5f14:	6840      	ldr	r0, [r0, #4]
   b5f16:	4611      	mov	r1, r2
   b5f18:	f7fe bafc 	b.w	b4514 <network_connecting>

000b5f1c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f1c:	6840      	ldr	r0, [r0, #4]
   b5f1e:	2200      	movs	r2, #0
   b5f20:	2102      	movs	r1, #2
   b5f22:	f7fe baff 	b.w	b4524 <network_disconnect>

000b5f26 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f26:	2300      	movs	r3, #0
   b5f28:	6840      	ldr	r0, [r0, #4]
   b5f2a:	461a      	mov	r2, r3
   b5f2c:	f7fe baea 	b.w	b4504 <network_connect>

000b5f30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5f30:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5f32:	2204      	movs	r2, #4
   b5f34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f36:	4a02      	ldr	r2, [pc, #8]	; (b5f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f38:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f3a:	4770      	bx	lr
   b5f3c:	2003e730 	.word	0x2003e730
   b5f40:	000b68d4 	.word	0x000b68d4

000b5f44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f44:	4b01      	ldr	r3, [pc, #4]	; (b5f4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f46:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f48:	4770      	bx	lr
   b5f4a:	bf00      	nop
   b5f4c:	2003e63c 	.word	0x2003e63c

000b5f50 <serialEventRun>:
{
   b5f50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f52:	4b0b      	ldr	r3, [pc, #44]	; (b5f80 <serialEventRun+0x30>)
   b5f54:	b143      	cbz	r3, b5f68 <serialEventRun+0x18>
   b5f56:	f7ff ff91 	bl	b5e7c <_Z16_fetch_usbserialv>
   b5f5a:	6803      	ldr	r3, [r0, #0]
   b5f5c:	691b      	ldr	r3, [r3, #16]
   b5f5e:	4798      	blx	r3
   b5f60:	2800      	cmp	r0, #0
   b5f62:	dd01      	ble.n	b5f68 <serialEventRun+0x18>
        serialEvent();
   b5f64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5f68:	4b06      	ldr	r3, [pc, #24]	; (b5f84 <serialEventRun+0x34>)
   b5f6a:	b143      	cbz	r3, b5f7e <serialEventRun+0x2e>
   b5f6c:	f000 f8a2 	bl	b60b4 <_Z22__fetch_global_Serial1v>
   b5f70:	6803      	ldr	r3, [r0, #0]
   b5f72:	691b      	ldr	r3, [r3, #16]
   b5f74:	4798      	blx	r3
   b5f76:	2800      	cmp	r0, #0
   b5f78:	dd01      	ble.n	b5f7e <serialEventRun+0x2e>
        serialEvent1();
   b5f7a:	f3af 8000 	nop.w
}
   b5f7e:	bd08      	pop	{r3, pc}
	...

000b5f88 <_post_loop>:
{
   b5f88:	b508      	push	{r3, lr}
	serialEventRun();
   b5f8a:	f7ff ffe1 	bl	b5f50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5f8e:	f7fe f9f5 	bl	b437c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5f92:	4b01      	ldr	r3, [pc, #4]	; (b5f98 <_post_loop+0x10>)
   b5f94:	6018      	str	r0, [r3, #0]
}
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	2003e740 	.word	0x2003e740

000b5f9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f9c:	4805      	ldr	r0, [pc, #20]	; (b5fb4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f9e:	4a06      	ldr	r2, [pc, #24]	; (b5fb8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5fa0:	4906      	ldr	r1, [pc, #24]	; (b5fbc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5fa2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5fa4:	1a12      	subs	r2, r2, r0
   b5fa6:	f000 f9d7 	bl	b6358 <memcpy>
    __backup_sram_signature = signature;
   b5faa:	4b05      	ldr	r3, [pc, #20]	; (b5fc0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5fac:	4a05      	ldr	r2, [pc, #20]	; (b5fc4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5fae:	601a      	str	r2, [r3, #0]
}
   b5fb0:	bd08      	pop	{r3, pc}
   b5fb2:	bf00      	nop
   b5fb4:	2003f400 	.word	0x2003f400
   b5fb8:	2003f404 	.word	0x2003f404
   b5fbc:	000b6ac4 	.word	0x000b6ac4
   b5fc0:	2003f400 	.word	0x2003f400
   b5fc4:	9a271c1e 	.word	0x9a271c1e

000b5fc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5fc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5fca:	2300      	movs	r3, #0
   b5fcc:	9300      	str	r3, [sp, #0]
   b5fce:	461a      	mov	r2, r3
   b5fd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5fd4:	f7fe fa84 	bl	b44e0 <system_ctrl_set_result>
}
   b5fd8:	b003      	add	sp, #12
   b5fda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5fe0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5fe0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5fe2:	8843      	ldrh	r3, [r0, #2]
   b5fe4:	2b0a      	cmp	r3, #10
   b5fe6:	d008      	beq.n	b5ffa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5fe8:	2b50      	cmp	r3, #80	; 0x50
   b5fea:	d10b      	bne.n	b6004 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5fec:	4b09      	ldr	r3, [pc, #36]	; (b6014 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5fee:	681b      	ldr	r3, [r3, #0]
   b5ff0:	b14b      	cbz	r3, b6006 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5ff2:	b003      	add	sp, #12
   b5ff4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ff8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ffa:	f7ff ffe5 	bl	b5fc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ffe:	b003      	add	sp, #12
   b6000:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6004:	2300      	movs	r3, #0
   b6006:	9300      	str	r3, [sp, #0]
   b6008:	461a      	mov	r2, r3
   b600a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b600e:	f7fe fa67 	bl	b44e0 <system_ctrl_set_result>
}
   b6012:	e7f4      	b.n	b5ffe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6014:	2003e73c 	.word	0x2003e73c

000b6018 <module_user_init_hook>:
{
   b6018:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b601a:	4812      	ldr	r0, [pc, #72]	; (b6064 <module_user_init_hook+0x4c>)
   b601c:	2100      	movs	r1, #0
   b601e:	f7fe faf9 	bl	b4614 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6022:	4b11      	ldr	r3, [pc, #68]	; (b6068 <module_user_init_hook+0x50>)
   b6024:	681a      	ldr	r2, [r3, #0]
   b6026:	4b11      	ldr	r3, [pc, #68]	; (b606c <module_user_init_hook+0x54>)
   b6028:	429a      	cmp	r2, r3
   b602a:	4b11      	ldr	r3, [pc, #68]	; (b6070 <module_user_init_hook+0x58>)
   b602c:	bf0c      	ite	eq
   b602e:	2201      	moveq	r2, #1
   b6030:	2200      	movne	r2, #0
   b6032:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6034:	d001      	beq.n	b603a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6036:	f7ff ffb1 	bl	b5f9c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b603a:	f7fe f98f 	bl	b435c <HAL_RNG_GetRandomNumber>
   b603e:	4604      	mov	r4, r0
    srand(seed);
   b6040:	f000 f9ba 	bl	b63b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6044:	4b0b      	ldr	r3, [pc, #44]	; (b6074 <module_user_init_hook+0x5c>)
   b6046:	b113      	cbz	r3, b604e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6048:	4620      	mov	r0, r4
   b604a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b604e:	2100      	movs	r1, #0
   b6050:	4808      	ldr	r0, [pc, #32]	; (b6074 <module_user_init_hook+0x5c>)
   b6052:	f7fe fa4f 	bl	b44f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b605a:	4807      	ldr	r0, [pc, #28]	; (b6078 <module_user_init_hook+0x60>)
   b605c:	2100      	movs	r1, #0
   b605e:	f7fe ba35 	b.w	b44cc <system_ctrl_set_app_request_handler>
   b6062:	bf00      	nop
   b6064:	000b5f45 	.word	0x000b5f45
   b6068:	2003f400 	.word	0x2003f400
   b606c:	9a271c1e 	.word	0x9a271c1e
   b6070:	2003e738 	.word	0x2003e738
   b6074:	00000000 	.word	0x00000000
   b6078:	000b5fe1 	.word	0x000b5fe1

000b607c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b607c:	4770      	bx	lr
	...

000b6080 <_Z20acquireSerial1Bufferv>:
{
   b6080:	b538      	push	{r3, r4, r5, lr}
   b6082:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6084:	2514      	movs	r5, #20
   b6086:	462a      	mov	r2, r5
   b6088:	2100      	movs	r1, #0
   b608a:	f000 f98d 	bl	b63a8 <memset>
   b608e:	8025      	strh	r5, [r4, #0]
   b6090:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6092:	4907      	ldr	r1, [pc, #28]	; (b60b0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6094:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6096:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6098:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b609a:	f000 f82f 	bl	b60fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b609e:	4904      	ldr	r1, [pc, #16]	; (b60b0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b60a0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60a2:	4628      	mov	r0, r5
   b60a4:	f000 f82a 	bl	b60fc <_ZnajRKSt9nothrow_t>
    };
   b60a8:	60e0      	str	r0, [r4, #12]
}
   b60aa:	4620      	mov	r0, r4
   b60ac:	bd38      	pop	{r3, r4, r5, pc}
   b60ae:	bf00      	nop
   b60b0:	000b6908 	.word	0x000b6908

000b60b4 <_Z22__fetch_global_Serial1v>:
{
   b60b4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60b6:	4d0e      	ldr	r5, [pc, #56]	; (b60f0 <_Z22__fetch_global_Serial1v+0x3c>)
   b60b8:	7829      	ldrb	r1, [r5, #0]
   b60ba:	f3bf 8f5b 	dmb	ish
   b60be:	f011 0401 	ands.w	r4, r1, #1
{
   b60c2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60c4:	d111      	bne.n	b60ea <_Z22__fetch_global_Serial1v+0x36>
   b60c6:	4628      	mov	r0, r5
   b60c8:	f7fd ffe9 	bl	b409e <__cxa_guard_acquire>
   b60cc:	b168      	cbz	r0, b60ea <_Z22__fetch_global_Serial1v+0x36>
   b60ce:	a801      	add	r0, sp, #4
   b60d0:	f7ff ffd6 	bl	b6080 <_Z20acquireSerial1Bufferv>
   b60d4:	aa01      	add	r2, sp, #4
   b60d6:	4621      	mov	r1, r4
   b60d8:	4806      	ldr	r0, [pc, #24]	; (b60f4 <_Z22__fetch_global_Serial1v+0x40>)
   b60da:	f7ff fe61 	bl	b5da0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b60de:	4628      	mov	r0, r5
   b60e0:	f7fd ffe2 	bl	b40a8 <__cxa_guard_release>
   b60e4:	4804      	ldr	r0, [pc, #16]	; (b60f8 <_Z22__fetch_global_Serial1v+0x44>)
   b60e6:	f000 f921 	bl	b632c <atexit>
    return serial1;
}
   b60ea:	4802      	ldr	r0, [pc, #8]	; (b60f4 <_Z22__fetch_global_Serial1v+0x40>)
   b60ec:	b007      	add	sp, #28
   b60ee:	bd30      	pop	{r4, r5, pc}
   b60f0:	2003e744 	.word	0x2003e744
   b60f4:	2003e748 	.word	0x2003e748
   b60f8:	000b607d 	.word	0x000b607d

000b60fc <_ZnajRKSt9nothrow_t>:
   b60fc:	f7fd bfcb 	b.w	b4096 <_Znaj>

000b6100 <_ZSt25__throw_bad_function_callv>:
   b6100:	b508      	push	{r3, lr}
   b6102:	f7fe fa77 	bl	b45f4 <abort>
	...

000b6108 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6108:	4901      	ldr	r1, [pc, #4]	; (b6110 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b610a:	f000 b8f9 	b.w	b6300 <_ZNKSt9type_infoeqERKS_>
   b610e:	bf00      	nop
   b6110:	000b6924 	.word	0x000b6924

000b6114 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6116:	2400      	movs	r4, #0
   b6118:	2310      	movs	r3, #16
   b611a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b611e:	6803      	ldr	r3, [r0, #0]
   b6120:	4615      	mov	r5, r2
   b6122:	699e      	ldr	r6, [r3, #24]
   b6124:	6812      	ldr	r2, [r2, #0]
   b6126:	466b      	mov	r3, sp
   b6128:	e9cd 4400 	strd	r4, r4, [sp]
   b612c:	47b0      	blx	r6
   b612e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6132:	f003 0306 	and.w	r3, r3, #6
   b6136:	2b06      	cmp	r3, #6
   b6138:	bf03      	ittte	eq
   b613a:	9b00      	ldreq	r3, [sp, #0]
   b613c:	602b      	streq	r3, [r5, #0]
   b613e:	2001      	moveq	r0, #1
   b6140:	4620      	movne	r0, r4
   b6142:	b004      	add	sp, #16
   b6144:	bd70      	pop	{r4, r5, r6, pc}

000b6146 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6146:	9800      	ldr	r0, [sp, #0]
   b6148:	4290      	cmp	r0, r2
   b614a:	bf14      	ite	ne
   b614c:	2001      	movne	r0, #1
   b614e:	2006      	moveq	r0, #6
   b6150:	4770      	bx	lr
	...

000b6154 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6154:	b510      	push	{r4, lr}
   b6156:	4b03      	ldr	r3, [pc, #12]	; (b6164 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6158:	6003      	str	r3, [r0, #0]
   b615a:	4604      	mov	r4, r0
   b615c:	f000 f8cd 	bl	b62fa <_ZNSt9type_infoD1Ev>
   b6160:	4620      	mov	r0, r4
   b6162:	bd10      	pop	{r4, pc}
   b6164:	000b6964 	.word	0x000b6964

000b6168 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6168:	b510      	push	{r4, lr}
   b616a:	4604      	mov	r4, r0
   b616c:	f7ff fff2 	bl	b6154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6170:	4620      	mov	r0, r4
   b6172:	2108      	movs	r1, #8
   b6174:	f7fd ff91 	bl	b409a <_ZdlPvj>
   b6178:	4620      	mov	r0, r4
   b617a:	bd10      	pop	{r4, pc}

000b617c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6180:	461f      	mov	r7, r3
   b6182:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6186:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b618a:	4598      	cmp	r8, r3
   b618c:	4606      	mov	r6, r0
   b618e:	4615      	mov	r5, r2
   b6190:	d107      	bne.n	b61a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6192:	9907      	ldr	r1, [sp, #28]
   b6194:	f000 f8b4 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b6198:	b118      	cbz	r0, b61a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b619a:	7165      	strb	r5, [r4, #5]
   b619c:	2000      	movs	r0, #0
   b619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b61a2:	4639      	mov	r1, r7
   b61a4:	4630      	mov	r0, r6
   b61a6:	f000 f8ab 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b61aa:	2800      	cmp	r0, #0
   b61ac:	d0f6      	beq.n	b619c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b61ae:	2301      	movs	r3, #1
   b61b0:	f8c4 8000 	str.w	r8, [r4]
   b61b4:	7125      	strb	r5, [r4, #4]
   b61b6:	71a3      	strb	r3, [r4, #6]
   b61b8:	e7f0      	b.n	b619c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b61ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b61ba:	b538      	push	{r3, r4, r5, lr}
   b61bc:	4615      	mov	r5, r2
   b61be:	461c      	mov	r4, r3
   b61c0:	f000 f89e 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b61c4:	b120      	cbz	r0, b61d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b61c6:	2308      	movs	r3, #8
   b61c8:	60e3      	str	r3, [r4, #12]
   b61ca:	2306      	movs	r3, #6
   b61cc:	6025      	str	r5, [r4, #0]
   b61ce:	7123      	strb	r3, [r4, #4]
   b61d0:	bd38      	pop	{r3, r4, r5, pc}

000b61d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b61d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b61d4:	4605      	mov	r5, r0
   b61d6:	460c      	mov	r4, r1
   b61d8:	9201      	str	r2, [sp, #4]
   b61da:	461e      	mov	r6, r3
   b61dc:	f000 f890 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b61e0:	b950      	cbnz	r0, b61f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b61e2:	2e03      	cmp	r6, #3
   b61e4:	d808      	bhi.n	b61f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b61e6:	6823      	ldr	r3, [r4, #0]
   b61e8:	9a01      	ldr	r2, [sp, #4]
   b61ea:	695b      	ldr	r3, [r3, #20]
   b61ec:	4629      	mov	r1, r5
   b61ee:	4620      	mov	r0, r4
   b61f0:	b002      	add	sp, #8
   b61f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b61f6:	4718      	bx	r3
   b61f8:	b002      	add	sp, #8
   b61fa:	bd70      	pop	{r4, r5, r6, pc}

000b61fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b61fc:	b510      	push	{r4, lr}
   b61fe:	4b03      	ldr	r3, [pc, #12]	; (b620c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6200:	6003      	str	r3, [r0, #0]
   b6202:	4604      	mov	r4, r0
   b6204:	f7ff ffa6 	bl	b6154 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6208:	4620      	mov	r0, r4
   b620a:	bd10      	pop	{r4, pc}
   b620c:	000b69c4 	.word	0x000b69c4

000b6210 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6210:	b510      	push	{r4, lr}
   b6212:	4604      	mov	r4, r0
   b6214:	f7ff fff2 	bl	b61fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6218:	4620      	mov	r0, r4
   b621a:	210c      	movs	r1, #12
   b621c:	f7fd ff3d 	bl	b409a <_ZdlPvj>
   b6220:	4620      	mov	r0, r4
   b6222:	bd10      	pop	{r4, pc}

000b6224 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6226:	9f08      	ldr	r7, [sp, #32]
   b6228:	4297      	cmp	r7, r2
   b622a:	4605      	mov	r5, r0
   b622c:	460e      	mov	r6, r1
   b622e:	4614      	mov	r4, r2
   b6230:	d00a      	beq.n	b6248 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6232:	68a8      	ldr	r0, [r5, #8]
   b6234:	6802      	ldr	r2, [r0, #0]
   b6236:	9708      	str	r7, [sp, #32]
   b6238:	6a15      	ldr	r5, [r2, #32]
   b623a:	4631      	mov	r1, r6
   b623c:	4622      	mov	r2, r4
   b623e:	46ac      	mov	ip, r5
   b6240:	b003      	add	sp, #12
   b6242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6246:	4760      	bx	ip
   b6248:	4619      	mov	r1, r3
   b624a:	9301      	str	r3, [sp, #4]
   b624c:	f000 f858 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b6250:	9b01      	ldr	r3, [sp, #4]
   b6252:	2800      	cmp	r0, #0
   b6254:	d0ed      	beq.n	b6232 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6256:	2006      	movs	r0, #6
   b6258:	b003      	add	sp, #12
   b625a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b625c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b625c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6260:	460d      	mov	r5, r1
   b6262:	4619      	mov	r1, r3
   b6264:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6268:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b626c:	4681      	mov	r9, r0
   b626e:	4617      	mov	r7, r2
   b6270:	4698      	mov	r8, r3
   b6272:	f000 f845 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b6276:	b190      	cbz	r0, b629e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6278:	2d00      	cmp	r5, #0
   b627a:	6034      	str	r4, [r6, #0]
   b627c:	7137      	strb	r7, [r6, #4]
   b627e:	db09      	blt.n	b6294 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6280:	1961      	adds	r1, r4, r5
   b6282:	458a      	cmp	sl, r1
   b6284:	bf0c      	ite	eq
   b6286:	2106      	moveq	r1, #6
   b6288:	2101      	movne	r1, #1
   b628a:	71b1      	strb	r1, [r6, #6]
   b628c:	2000      	movs	r0, #0
   b628e:	b001      	add	sp, #4
   b6290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6294:	3502      	adds	r5, #2
   b6296:	d1f9      	bne.n	b628c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6298:	2301      	movs	r3, #1
   b629a:	71b3      	strb	r3, [r6, #6]
   b629c:	e7f6      	b.n	b628c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b629e:	4554      	cmp	r4, sl
   b62a0:	d106      	bne.n	b62b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b62a2:	4659      	mov	r1, fp
   b62a4:	4648      	mov	r0, r9
   b62a6:	f000 f82b 	bl	b6300 <_ZNKSt9type_infoeqERKS_>
   b62aa:	b108      	cbz	r0, b62b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b62ac:	7177      	strb	r7, [r6, #5]
   b62ae:	e7ed      	b.n	b628c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b62b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b62b4:	6803      	ldr	r3, [r0, #0]
   b62b6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b62ba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b62be:	69dc      	ldr	r4, [r3, #28]
   b62c0:	463a      	mov	r2, r7
   b62c2:	4643      	mov	r3, r8
   b62c4:	4629      	mov	r1, r5
   b62c6:	46a4      	mov	ip, r4
   b62c8:	b001      	add	sp, #4
   b62ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62ce:	4760      	bx	ip

000b62d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b62d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62d4:	4607      	mov	r7, r0
   b62d6:	460c      	mov	r4, r1
   b62d8:	4615      	mov	r5, r2
   b62da:	461e      	mov	r6, r3
   b62dc:	f7ff ff6d 	bl	b61ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b62e0:	b948      	cbnz	r0, b62f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b62e2:	68b8      	ldr	r0, [r7, #8]
   b62e4:	6803      	ldr	r3, [r0, #0]
   b62e6:	699f      	ldr	r7, [r3, #24]
   b62e8:	462a      	mov	r2, r5
   b62ea:	4633      	mov	r3, r6
   b62ec:	4621      	mov	r1, r4
   b62ee:	46bc      	mov	ip, r7
   b62f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b62f4:	4760      	bx	ip
   b62f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b62fa <_ZNSt9type_infoD1Ev>:
   b62fa:	4770      	bx	lr

000b62fc <_ZNKSt9type_info14__is_pointer_pEv>:
   b62fc:	2000      	movs	r0, #0
   b62fe:	4770      	bx	lr

000b6300 <_ZNKSt9type_infoeqERKS_>:
   b6300:	4281      	cmp	r1, r0
   b6302:	b508      	push	{r3, lr}
   b6304:	d00e      	beq.n	b6324 <_ZNKSt9type_infoeqERKS_+0x24>
   b6306:	6840      	ldr	r0, [r0, #4]
   b6308:	7803      	ldrb	r3, [r0, #0]
   b630a:	2b2a      	cmp	r3, #42	; 0x2a
   b630c:	d00c      	beq.n	b6328 <_ZNKSt9type_infoeqERKS_+0x28>
   b630e:	6849      	ldr	r1, [r1, #4]
   b6310:	780b      	ldrb	r3, [r1, #0]
   b6312:	2b2a      	cmp	r3, #42	; 0x2a
   b6314:	bf08      	it	eq
   b6316:	3101      	addeq	r1, #1
   b6318:	f000 f87c 	bl	b6414 <strcmp>
   b631c:	fab0 f080 	clz	r0, r0
   b6320:	0940      	lsrs	r0, r0, #5
   b6322:	bd08      	pop	{r3, pc}
   b6324:	2001      	movs	r0, #1
   b6326:	e7fc      	b.n	b6322 <_ZNKSt9type_infoeqERKS_+0x22>
   b6328:	2000      	movs	r0, #0
   b632a:	e7fa      	b.n	b6322 <_ZNKSt9type_infoeqERKS_+0x22>

000b632c <atexit>:
   b632c:	2300      	movs	r3, #0
   b632e:	4601      	mov	r1, r0
   b6330:	461a      	mov	r2, r3
   b6332:	4618      	mov	r0, r3
   b6334:	f000 b88c 	b.w	b6450 <__register_exitproc>

000b6338 <memcmp>:
   b6338:	b510      	push	{r4, lr}
   b633a:	3901      	subs	r1, #1
   b633c:	4402      	add	r2, r0
   b633e:	4290      	cmp	r0, r2
   b6340:	d101      	bne.n	b6346 <memcmp+0xe>
   b6342:	2000      	movs	r0, #0
   b6344:	e005      	b.n	b6352 <memcmp+0x1a>
   b6346:	7803      	ldrb	r3, [r0, #0]
   b6348:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b634c:	42a3      	cmp	r3, r4
   b634e:	d001      	beq.n	b6354 <memcmp+0x1c>
   b6350:	1b18      	subs	r0, r3, r4
   b6352:	bd10      	pop	{r4, pc}
   b6354:	3001      	adds	r0, #1
   b6356:	e7f2      	b.n	b633e <memcmp+0x6>

000b6358 <memcpy>:
   b6358:	440a      	add	r2, r1
   b635a:	4291      	cmp	r1, r2
   b635c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6360:	d100      	bne.n	b6364 <memcpy+0xc>
   b6362:	4770      	bx	lr
   b6364:	b510      	push	{r4, lr}
   b6366:	f811 4b01 	ldrb.w	r4, [r1], #1
   b636a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b636e:	4291      	cmp	r1, r2
   b6370:	d1f9      	bne.n	b6366 <memcpy+0xe>
   b6372:	bd10      	pop	{r4, pc}

000b6374 <memmove>:
   b6374:	4288      	cmp	r0, r1
   b6376:	b510      	push	{r4, lr}
   b6378:	eb01 0402 	add.w	r4, r1, r2
   b637c:	d902      	bls.n	b6384 <memmove+0x10>
   b637e:	4284      	cmp	r4, r0
   b6380:	4623      	mov	r3, r4
   b6382:	d807      	bhi.n	b6394 <memmove+0x20>
   b6384:	1e43      	subs	r3, r0, #1
   b6386:	42a1      	cmp	r1, r4
   b6388:	d008      	beq.n	b639c <memmove+0x28>
   b638a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b638e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6392:	e7f8      	b.n	b6386 <memmove+0x12>
   b6394:	4402      	add	r2, r0
   b6396:	4601      	mov	r1, r0
   b6398:	428a      	cmp	r2, r1
   b639a:	d100      	bne.n	b639e <memmove+0x2a>
   b639c:	bd10      	pop	{r4, pc}
   b639e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b63a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b63a6:	e7f7      	b.n	b6398 <memmove+0x24>

000b63a8 <memset>:
   b63a8:	4402      	add	r2, r0
   b63aa:	4603      	mov	r3, r0
   b63ac:	4293      	cmp	r3, r2
   b63ae:	d100      	bne.n	b63b2 <memset+0xa>
   b63b0:	4770      	bx	lr
   b63b2:	f803 1b01 	strb.w	r1, [r3], #1
   b63b6:	e7f9      	b.n	b63ac <memset+0x4>

000b63b8 <srand>:
   b63b8:	b538      	push	{r3, r4, r5, lr}
   b63ba:	4b10      	ldr	r3, [pc, #64]	; (b63fc <srand+0x44>)
   b63bc:	681d      	ldr	r5, [r3, #0]
   b63be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63c0:	4604      	mov	r4, r0
   b63c2:	b9b3      	cbnz	r3, b63f2 <srand+0x3a>
   b63c4:	2018      	movs	r0, #24
   b63c6:	f7fe f8fd 	bl	b45c4 <malloc>
   b63ca:	4602      	mov	r2, r0
   b63cc:	63a8      	str	r0, [r5, #56]	; 0x38
   b63ce:	b920      	cbnz	r0, b63da <srand+0x22>
   b63d0:	4b0b      	ldr	r3, [pc, #44]	; (b6400 <srand+0x48>)
   b63d2:	480c      	ldr	r0, [pc, #48]	; (b6404 <srand+0x4c>)
   b63d4:	2142      	movs	r1, #66	; 0x42
   b63d6:	f7fe f915 	bl	b4604 <__assert_func>
   b63da:	490b      	ldr	r1, [pc, #44]	; (b6408 <srand+0x50>)
   b63dc:	4b0b      	ldr	r3, [pc, #44]	; (b640c <srand+0x54>)
   b63de:	e9c0 1300 	strd	r1, r3, [r0]
   b63e2:	4b0b      	ldr	r3, [pc, #44]	; (b6410 <srand+0x58>)
   b63e4:	6083      	str	r3, [r0, #8]
   b63e6:	230b      	movs	r3, #11
   b63e8:	8183      	strh	r3, [r0, #12]
   b63ea:	2100      	movs	r1, #0
   b63ec:	2001      	movs	r0, #1
   b63ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b63f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63f4:	2200      	movs	r2, #0
   b63f6:	611c      	str	r4, [r3, #16]
   b63f8:	615a      	str	r2, [r3, #20]
   b63fa:	bd38      	pop	{r3, r4, r5, pc}
   b63fc:	2003e63c 	.word	0x2003e63c
   b6400:	000b69fd 	.word	0x000b69fd
   b6404:	000b6a14 	.word	0x000b6a14
   b6408:	abcd330e 	.word	0xabcd330e
   b640c:	e66d1234 	.word	0xe66d1234
   b6410:	0005deec 	.word	0x0005deec

000b6414 <strcmp>:
   b6414:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6418:	f811 3b01 	ldrb.w	r3, [r1], #1
   b641c:	2a01      	cmp	r2, #1
   b641e:	bf28      	it	cs
   b6420:	429a      	cmpcs	r2, r3
   b6422:	d0f7      	beq.n	b6414 <strcmp>
   b6424:	1ad0      	subs	r0, r2, r3
   b6426:	4770      	bx	lr

000b6428 <strlen>:
   b6428:	4603      	mov	r3, r0
   b642a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b642e:	2a00      	cmp	r2, #0
   b6430:	d1fb      	bne.n	b642a <strlen+0x2>
   b6432:	1a18      	subs	r0, r3, r0
   b6434:	3801      	subs	r0, #1
   b6436:	4770      	bx	lr

000b6438 <strnlen>:
   b6438:	b510      	push	{r4, lr}
   b643a:	4602      	mov	r2, r0
   b643c:	4401      	add	r1, r0
   b643e:	428a      	cmp	r2, r1
   b6440:	4613      	mov	r3, r2
   b6442:	d003      	beq.n	b644c <strnlen+0x14>
   b6444:	781c      	ldrb	r4, [r3, #0]
   b6446:	3201      	adds	r2, #1
   b6448:	2c00      	cmp	r4, #0
   b644a:	d1f8      	bne.n	b643e <strnlen+0x6>
   b644c:	1a18      	subs	r0, r3, r0
   b644e:	bd10      	pop	{r4, pc}

000b6450 <__register_exitproc>:
   b6450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6454:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6510 <__register_exitproc+0xc0>
   b6458:	4606      	mov	r6, r0
   b645a:	f8d8 0000 	ldr.w	r0, [r8]
   b645e:	461f      	mov	r7, r3
   b6460:	460d      	mov	r5, r1
   b6462:	4691      	mov	r9, r2
   b6464:	f000 f856 	bl	b6514 <__retarget_lock_acquire_recursive>
   b6468:	4b25      	ldr	r3, [pc, #148]	; (b6500 <__register_exitproc+0xb0>)
   b646a:	681c      	ldr	r4, [r3, #0]
   b646c:	b934      	cbnz	r4, b647c <__register_exitproc+0x2c>
   b646e:	4c25      	ldr	r4, [pc, #148]	; (b6504 <__register_exitproc+0xb4>)
   b6470:	601c      	str	r4, [r3, #0]
   b6472:	4b25      	ldr	r3, [pc, #148]	; (b6508 <__register_exitproc+0xb8>)
   b6474:	b113      	cbz	r3, b647c <__register_exitproc+0x2c>
   b6476:	681b      	ldr	r3, [r3, #0]
   b6478:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b647c:	6863      	ldr	r3, [r4, #4]
   b647e:	2b1f      	cmp	r3, #31
   b6480:	dd07      	ble.n	b6492 <__register_exitproc+0x42>
   b6482:	f8d8 0000 	ldr.w	r0, [r8]
   b6486:	f000 f847 	bl	b6518 <__retarget_lock_release_recursive>
   b648a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6492:	b34e      	cbz	r6, b64e8 <__register_exitproc+0x98>
   b6494:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6498:	b988      	cbnz	r0, b64be <__register_exitproc+0x6e>
   b649a:	4b1c      	ldr	r3, [pc, #112]	; (b650c <__register_exitproc+0xbc>)
   b649c:	b923      	cbnz	r3, b64a8 <__register_exitproc+0x58>
   b649e:	f8d8 0000 	ldr.w	r0, [r8]
   b64a2:	f000 f838 	bl	b6516 <__retarget_lock_release>
   b64a6:	e7f0      	b.n	b648a <__register_exitproc+0x3a>
   b64a8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b64ac:	f7fe f88a 	bl	b45c4 <malloc>
   b64b0:	2800      	cmp	r0, #0
   b64b2:	d0f4      	beq.n	b649e <__register_exitproc+0x4e>
   b64b4:	2300      	movs	r3, #0
   b64b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b64ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b64be:	6863      	ldr	r3, [r4, #4]
   b64c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b64c4:	2201      	movs	r2, #1
   b64c6:	409a      	lsls	r2, r3
   b64c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b64cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b64d0:	4313      	orrs	r3, r2
   b64d2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b64d6:	2e02      	cmp	r6, #2
   b64d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b64dc:	bf02      	ittt	eq
   b64de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b64e2:	4313      	orreq	r3, r2
   b64e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b64e8:	6863      	ldr	r3, [r4, #4]
   b64ea:	f8d8 0000 	ldr.w	r0, [r8]
   b64ee:	1c5a      	adds	r2, r3, #1
   b64f0:	3302      	adds	r3, #2
   b64f2:	6062      	str	r2, [r4, #4]
   b64f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b64f8:	f000 f80e 	bl	b6518 <__retarget_lock_release_recursive>
   b64fc:	2000      	movs	r0, #0
   b64fe:	e7c6      	b.n	b648e <__register_exitproc+0x3e>
   b6500:	2003e7e8 	.word	0x2003e7e8
   b6504:	2003e75c 	.word	0x2003e75c
   b6508:	00000000 	.word	0x00000000
   b650c:	000b45c5 	.word	0x000b45c5
   b6510:	2003e6a0 	.word	0x2003e6a0

000b6514 <__retarget_lock_acquire_recursive>:
   b6514:	4770      	bx	lr

000b6516 <__retarget_lock_release>:
   b6516:	4770      	bx	lr

000b6518 <__retarget_lock_release_recursive>:
   b6518:	4770      	bx	lr

000b651a <link_code_end>:
	...

000b651c <dynalib_user>:
   b651c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b652c:	0000 0000 3735 3566 6465 3733 642d 6534     ....57f5ed37-d4e
   b653c:	2d39 6234 3737 382d 3139 2d37 3563 3466     9-4b77-8917-c5f4
   b654c:	3563 6535 3135 3964 6600 6364 3466 3361     c55e51d9.fdcf4a3
   b655c:	2d66 6633 6465 342d 6465 2d32 3438 3665     f-3fed-4ed2-84e6
   b656c:	302d 6234 6262 6139 3065 6434 0034 7075     -04bbb9ae04d4.up
   b657c:	6974 656d 6300 3963 6337 3032 2d63 3835     time.cc97c20c-58
   b658c:	3232 342d 3038 2d30 6461 3565 312d 3666     22-4800-ade5-1f6
   b659c:	3136 3264 3331 6533 0065 7473 6572 676e     61d2133ee.streng
   b65ac:	6874 6400 6232 3632 6662 2d33 3739 3239     th.d2b26bf3-9792
   b65bc:	342d 6632 2d63 6539 6138 342d 6631 3136     -42fc-9e8a-41f61
   b65cc:	3730 6664 3430 0063 7266 6565 654d 6f6d     07df04c.freeMemo
   b65dc:	7972 4100 7373 7265 6974 6e6f 6146 6c69     ry.AssertionFail
   b65ec:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   b65fc:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   b660c:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   b661c:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   b662c:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   b663c:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   b664c:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   b665c:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   b666c:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   b667c:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   b668c:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   b669c:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   b66ac:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   b66bc:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   b66cc:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   b66dc:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   b66ec:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   b66fc:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   b670c:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   b671c:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...

000b672c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6734:	462b 000b 468d 000b 4773 000b 46b7 000b     +F...F..sG...F..
   b6744:	462d 000b                                   -F..

000b6748 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6750:	4627 000b 469b 000b 4629 000b 46bd 000b     'F...F..)F...F..
   b6760:	464d 000b                                   MF..

000b6764 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b676c:	4625 000b 46a9 000b 4e39 000b 46c3 000b     %F...F..9N...F..
   b677c:	466d 000b                                   mF..

000b6780 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b678c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b679e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b679e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b67ae <_ZN8particle7BleUuid9BASE_UUIDE>:
   b67ae:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b67c0 <_ZTVN5spark13EthernetClassE>:
	...
   b67c8:	58e7 000b 58dd 000b 58d3 000b 58c9 000b     .X...X...X...X..
   b67d8:	58bd 000b 58b1 000b 5a45 000b 5a4d 000b     .X...X..EZ..MZ..
   b67e8:	58a5 000b 589d 000b 5893 000b 5889 000b     .X...X...X...X..
   b67f8:	5a7d 000b                                   }Z..

000b67fc <_ZTV9IPAddress>:
	...
   b6804:	5915 000b 5905 000b 5907 000b 7061 0070     .Y...Y...Y..app.

000b6814 <_ZTVN5spark12NetworkClassE>:
	...
   b681c:	5a05 000b 5a0f 000b 5a19 000b 5a23 000b     .Z...Z...Z..#Z..
   b682c:	5a2d 000b 5a39 000b 5a45 000b 5a4d 000b     -Z..9Z..EZ..MZ..
   b683c:	5a55 000b 5a61 000b 5a69 000b 5a73 000b     UZ..aZ..iZ..sZ..
   b684c:	5a7d 000b 5925 252d 2d6d 6425 2554 3a48     }Z..%Y-%m-%dT%H:
   b685c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b686c <_ZTV11USARTSerial>:
	...
   b6874:	5d25 000b 5d91 000b 5d69 000b 5b69 000b     %]...]..i]..i[..
   b6884:	5d39 000b 5d55 000b 5d47 000b 5d63 000b     9]..U]..G]..c]..
   b6894:	5d27 000b 5d2b 000b                         ']..+]..

000b689c <_ZTV9USBSerial>:
	...
   b68a4:	5dcf 000b 5e37 000b 5e0d 000b 5b69 000b     .]..7^...^..i[..
   b68b4:	5dff 000b 5dd1 000b 5de1 000b 5e31 000b     .]...]...]..1^..
   b68c4:	5df1 000b 5dc9 000b                         .]...]..

000b68cc <_ZTVN5spark9WiFiClassE>:
	...
   b68d4:	5f27 000b 5f1d 000b 5f13 000b 5ec9 000b     '_..._..._...^..
   b68e4:	5f07 000b 5efb 000b 5a45 000b 5a4d 000b     ._...^..EZ..MZ..
   b68f4:	5eef 000b 5ee7 000b 5edd 000b 5ed3 000b     .^...^...^...^..
   b6904:	5a7d 000b                                   }Z..

000b6908 <_ZSt7nothrow>:
	...

000b6909 <_ZTSSt19_Sp_make_shared_tag>:
   b6909:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6919:	6572 5f64 6174 0067 0000                     red_tag....

000b6924 <_ZTISt19_Sp_make_shared_tag>:
   b6924:	6964 000b 6909 000b                         di...i..

000b692c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b692c:	69c4 000b 6938 000b 69e8 000b               .i..8i...i..

000b6938 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6938:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6948:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6958:	0045 0000                                   E...

000b695c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b695c:	0000 0000 692c 000b 6155 000b 6169 000b     ....,i..Ua..ia..
   b696c:	62fd 000b 62fd 000b 61d3 000b 6115 000b     .b...b...a...a..
   b697c:	61bb 000b 617d 000b 6147 000b               .a..}a..Ga..

000b6988 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6988:	69c4 000b 6994 000b 692c 000b               .i...i..,i..

000b6994 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6994:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b69a4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b69b4:	666e 456f 0000 0000                         nfoE....

000b69bc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b69bc:	0000 0000 6988 000b 61fd 000b 6211 000b     .....i...a...b..
   b69cc:	62fd 000b 62fd 000b 61d3 000b 6115 000b     .b...b...a...a..
   b69dc:	62d1 000b 625d 000b 6225 000b               .b..]b..%b..

000b69e8 <_ZTISt9type_info>:
   b69e8:	6964 000b 69f0 000b                         di...i..

000b69f0 <_ZTSSt9type_info>:
   b69f0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6a00:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6a10:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b6a20:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b6a30:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b6a40:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b6a50:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b6a60:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b6a6d <link_const_variable_data_end>:
   b6a6d:	00          	.byte	0x00
	...

000b6a70 <link_constructors_location>:
   b6a70:	000b41bd 	.word	0x000b41bd
   b6a74:	000b5879 	.word	0x000b5879
   b6a78:	000b58f1 	.word	0x000b58f1
   b6a7c:	000b59f5 	.word	0x000b59f5
   b6a80:	000b5b55 	.word	0x000b5b55
   b6a84:	000b5bfd 	.word	0x000b5bfd
   b6a88:	000b5ced 	.word	0x000b5ced
   b6a8c:	000b5d11 	.word	0x000b5d11
   b6a90:	000b5f31 	.word	0x000b5f31

000b6a94 <link_constructors_end>:
	...
