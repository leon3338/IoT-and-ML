
/Users/andrewleonard/Desktop/LabAndProjects/LightSensor/target/4.0.0/argon/LightSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002720  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6740  000b6740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b6764  000b6764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b676c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  2003e63c  000b6770  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  2003e6a8  2003e6a8  0002e6a8  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b67dc  000b67dc  000267dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6804  000b6804  00026804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0010b28a  00000000  00000000  00026808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011d52  00000000  00000000  00131a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000384f8  00000000  00000000  001437e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002a18  00000000  00000000  0017bcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a0b0  00000000  00000000  0017e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000363c2  00000000  00000000  001887a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ad5a  00000000  00000000  001beb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00133dd3  00000000  00000000  001f98c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000780c  00000000  00000000  0032d694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 f98d 	bl	b6350 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f995 	bl	b636c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e63c 	.word	0x2003e63c
   b404c:	000b6770 	.word	0x000b6770
   b4050:	2003e6a8 	.word	0x2003e6a8
   b4054:	2003e6a8 	.word	0x2003e6a8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fa3f 	bl	b54e4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6718 	.word	0x000b6718
   b4080:	000b673c 	.word	0x000b673c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b815 	b.w	b40b2 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f819 	bl	b40c0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 b9df 	b.w	b5454 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 ba19 	b.w	b44cc <malloc>

000b409a <_Znaj>:
   b409a:	f000 ba17 	b.w	b44cc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 ba1d 	b.w	b44dc <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <setup>:
double currentLightLevel;

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
pinMode(A0, INPUT);
   b40b2:	2100      	movs	r1, #0
   b40b4:	2013      	movs	r0, #19
   b40b6:	f001 ba85 	b.w	b55c4 <pinMode>
   b40ba:	0000      	movs	r0, r0
   b40bc:	0000      	movs	r0, r0
	...

000b40c0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b40c0:	b510      	push	{r4, lr}
  // The core of your code will likely live here.
double lightAnalogVal = analogRead(A0);
   b40c2:	2013      	movs	r0, #19
void loop() {
   b40c4:	b08a      	sub	sp, #40	; 0x28
double lightAnalogVal = analogRead(A0);
   b40c6:	f001 fa8e 	bl	b55e6 <analogRead>
   b40ca:	f001 fc77 	bl	b59bc <__aeabi_i2d>
currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   b40ce:	ed9f 3b20 	vldr	d3, [pc, #128]	; b4150 <loop+0x90>
   b40d2:	ed9f 4b21 	vldr	d4, [pc, #132]	; b4158 <loop+0x98>
   b40d6:	eeb0 1a43 	vmov.f32	s2, s6
   b40da:	eef0 1a63 	vmov.f32	s3, s7
   b40de:	ed9f 2b20 	vldr	d2, [pc, #128]	; b4160 <loop+0xa0>
   b40e2:	ec41 0b10 	vmov	d0, r0, r1
   b40e6:	f000 fa29 	bl	b453c <_Z3mapddddd>
   b40ea:	4b1f      	ldr	r3, [pc, #124]	; (b4168 <loop+0xa8>)

if (currentLightLevel > 50) {
   b40ec:	ec51 0b10 	vmov	r0, r1, d0
currentLightLevel = map(lightAnalogVal, 0.0, 4095.0, 0.0, 100.0);
   b40f0:	ed83 0b00 	vstr	d0, [r3]
if (currentLightLevel > 50) {
   b40f4:	2200      	movs	r2, #0
   b40f6:	4b1d      	ldr	r3, [pc, #116]	; (b416c <loop+0xac>)
   b40f8:	ed8d 0b02 	vstr	d0, [sp, #8]
   b40fc:	f001 ff58 	bl	b5fb0 <__aeabi_dcmpgt>
   b4100:	ed9d 0b02 	vldr	d0, [sp, #8]
   b4104:	b310      	cbz	r0, b414c <loop+0x8c>
Particle.publish("light-meter/level", String(currentLightLevel), PRIVATE);
   b4106:	2106      	movs	r1, #6
   b4108:	a806      	add	r0, sp, #24
   b410a:	f001 f80a 	bl	b5122 <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b410e:	4b18      	ldr	r3, [pc, #96]	; (b4170 <loop+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4110:	9a06      	ldr	r2, [sp, #24]
   b4112:	781b      	ldrb	r3, [r3, #0]
   b4114:	f88d 3000 	strb.w	r3, [sp]
   b4118:	4916      	ldr	r1, [pc, #88]	; (b4174 <loop+0xb4>)
   b411a:	233c      	movs	r3, #60	; 0x3c
   b411c:	a804      	add	r0, sp, #16
   b411e:	f000 fbcf 	bl	b48c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4122:	9c05      	ldr	r4, [sp, #20]
   b4124:	b17c      	cbz	r4, b4146 <loop+0x86>
      if (--_M_use_count == 0)
   b4126:	6863      	ldr	r3, [r4, #4]
   b4128:	3b01      	subs	r3, #1
   b412a:	6063      	str	r3, [r4, #4]
   b412c:	b95b      	cbnz	r3, b4146 <loop+0x86>
          _M_dispose();
   b412e:	6823      	ldr	r3, [r4, #0]
   b4130:	4620      	mov	r0, r4
   b4132:	689b      	ldr	r3, [r3, #8]
   b4134:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4136:	68a3      	ldr	r3, [r4, #8]
   b4138:	3b01      	subs	r3, #1
   b413a:	60a3      	str	r3, [r4, #8]
   b413c:	b91b      	cbnz	r3, b4146 <loop+0x86>
            _M_destroy();
   b413e:	6823      	ldr	r3, [r4, #0]
   b4140:	4620      	mov	r0, r4
   b4142:	68db      	ldr	r3, [r3, #12]
   b4144:	4798      	blx	r3
   b4146:	a806      	add	r0, sp, #24
   b4148:	f000 ff8e 	bl	b5068 <_ZN6StringD1Ev>
}
   b414c:	b00a      	add	sp, #40	; 0x28
   b414e:	bd10      	pop	{r4, pc}
	...
   b415c:	40590000 	.word	0x40590000
   b4160:	00000000 	.word	0x00000000
   b4164:	40affe00 	.word	0x40affe00
   b4168:	2003e6b0 	.word	0x2003e6b0
   b416c:	40490000 	.word	0x40490000
   b4170:	2003e6a8 	.word	0x2003e6a8
   b4174:	000b6504 	.word	0x000b6504

000b4178 <_GLOBAL__sub_I_currentLightLevel>:
        val_(val) {
   b4178:	4b01      	ldr	r3, [pc, #4]	; (b4180 <_GLOBAL__sub_I_currentLightLevel+0x8>)
   b417a:	2201      	movs	r2, #1
   b417c:	701a      	strb	r2, [r3, #0]
   b417e:	4770      	bx	lr
   b4180:	2003e6a8 	.word	0x2003e6a8

000b4184 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4184:	b508      	push	{r3, lr}
   b4186:	4b02      	ldr	r3, [pc, #8]	; (b4190 <os_mutex_recursive_create+0xc>)
   b4188:	681b      	ldr	r3, [r3, #0]
   b418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b418c:	9301      	str	r3, [sp, #4]
   b418e:	bd08      	pop	{r3, pc}
   b4190:	00030248 	.word	0x00030248

000b4194 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4194:	b508      	push	{r3, lr}
   b4196:	4b02      	ldr	r3, [pc, #8]	; (b41a0 <HAL_RNG_GetRandomNumber+0xc>)
   b4198:	681b      	ldr	r3, [r3, #0]
   b419a:	685b      	ldr	r3, [r3, #4]
   b419c:	9301      	str	r3, [sp, #4]
   b419e:	bd08      	pop	{r3, pc}
   b41a0:	00030218 	.word	0x00030218

000b41a4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b41a4:	b508      	push	{r3, lr}
   b41a6:	4b02      	ldr	r3, [pc, #8]	; (b41b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b41a8:	681b      	ldr	r3, [r3, #0]
   b41aa:	695b      	ldr	r3, [r3, #20]
   b41ac:	9301      	str	r3, [sp, #4]
   b41ae:	bd08      	pop	{r3, pc}
   b41b0:	00030218 	.word	0x00030218

000b41b4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b41b4:	b508      	push	{r3, lr}
   b41b6:	4b02      	ldr	r3, [pc, #8]	; (b41c0 <HAL_Validate_Pin_Function+0xc>)
   b41b8:	681b      	ldr	r3, [r3, #0]
   b41ba:	685b      	ldr	r3, [r3, #4]
   b41bc:	9301      	str	r3, [sp, #4]
   b41be:	bd08      	pop	{r3, pc}
   b41c0:	0003022c 	.word	0x0003022c

000b41c4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b41c4:	b508      	push	{r3, lr}
   b41c6:	4b02      	ldr	r3, [pc, #8]	; (b41d0 <HAL_Pin_Mode+0xc>)
   b41c8:	681b      	ldr	r3, [r3, #0]
   b41ca:	689b      	ldr	r3, [r3, #8]
   b41cc:	9301      	str	r3, [sp, #4]
   b41ce:	bd08      	pop	{r3, pc}
   b41d0:	0003022c 	.word	0x0003022c

000b41d4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b41d4:	b508      	push	{r3, lr}
   b41d6:	4b02      	ldr	r3, [pc, #8]	; (b41e0 <hal_adc_read+0xc>)
   b41d8:	681b      	ldr	r3, [r3, #0]
   b41da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b41dc:	9301      	str	r3, [sp, #4]
   b41de:	bd08      	pop	{r3, pc}
   b41e0:	0003022c 	.word	0x0003022c

000b41e4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b41e4:	b508      	push	{r3, lr}
   b41e6:	4b02      	ldr	r3, [pc, #8]	; (b41f0 <hal_i2c_write+0xc>)
   b41e8:	681b      	ldr	r3, [r3, #0]
   b41ea:	6a1b      	ldr	r3, [r3, #32]
   b41ec:	9301      	str	r3, [sp, #4]
   b41ee:	bd08      	pop	{r3, pc}
   b41f0:	00030228 	.word	0x00030228

000b41f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b41f4:	b508      	push	{r3, lr}
   b41f6:	4b02      	ldr	r3, [pc, #8]	; (b4200 <hal_i2c_available+0xc>)
   b41f8:	681b      	ldr	r3, [r3, #0]
   b41fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b41fc:	9301      	str	r3, [sp, #4]
   b41fe:	bd08      	pop	{r3, pc}
   b4200:	00030228 	.word	0x00030228

000b4204 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4204:	b508      	push	{r3, lr}
   b4206:	4b02      	ldr	r3, [pc, #8]	; (b4210 <hal_i2c_read+0xc>)
   b4208:	681b      	ldr	r3, [r3, #0]
   b420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b420c:	9301      	str	r3, [sp, #4]
   b420e:	bd08      	pop	{r3, pc}
   b4210:	00030228 	.word	0x00030228

000b4214 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4214:	b508      	push	{r3, lr}
   b4216:	4b02      	ldr	r3, [pc, #8]	; (b4220 <hal_i2c_peek+0xc>)
   b4218:	681b      	ldr	r3, [r3, #0]
   b421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b421c:	9301      	str	r3, [sp, #4]
   b421e:	bd08      	pop	{r3, pc}
   b4220:	00030228 	.word	0x00030228

000b4224 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4224:	b508      	push	{r3, lr}
   b4226:	4b02      	ldr	r3, [pc, #8]	; (b4230 <hal_i2c_flush+0xc>)
   b4228:	681b      	ldr	r3, [r3, #0]
   b422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b422c:	9301      	str	r3, [sp, #4]
   b422e:	bd08      	pop	{r3, pc}
   b4230:	00030228 	.word	0x00030228

000b4234 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4234:	b508      	push	{r3, lr}
   b4236:	4b02      	ldr	r3, [pc, #8]	; (b4240 <hal_i2c_is_enabled+0xc>)
   b4238:	681b      	ldr	r3, [r3, #0]
   b423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b423c:	9301      	str	r3, [sp, #4]
   b423e:	bd08      	pop	{r3, pc}
   b4240:	00030228 	.word	0x00030228

000b4244 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4244:	b508      	push	{r3, lr}
   b4246:	4b02      	ldr	r3, [pc, #8]	; (b4250 <hal_i2c_init+0xc>)
   b4248:	681b      	ldr	r3, [r3, #0]
   b424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	bd08      	pop	{r3, pc}
   b4250:	00030228 	.word	0x00030228

000b4254 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4254:	b508      	push	{r3, lr}
   b4256:	4b02      	ldr	r3, [pc, #8]	; (b4260 <inet_inet_ntop+0xc>)
   b4258:	681b      	ldr	r3, [r3, #0]
   b425a:	695b      	ldr	r3, [r3, #20]
   b425c:	9301      	str	r3, [sp, #4]
   b425e:	bd08      	pop	{r3, pc}
   b4260:	00030264 	.word	0x00030264

000b4264 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <netdb_freeaddrinfo+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	689b      	ldr	r3, [r3, #8]
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	00030268 	.word	0x00030268

000b4274 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <netdb_getaddrinfo+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	68db      	ldr	r3, [r3, #12]
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	00030268 	.word	0x00030268

000b4284 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <hal_spi_init+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	69db      	ldr	r3, [r3, #28]
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	00030230 	.word	0x00030230

000b4294 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <hal_spi_is_enabled+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	6a1b      	ldr	r3, [r3, #32]
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	00030230 	.word	0x00030230

000b42a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <hal_usart_write+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	68db      	ldr	r3, [r3, #12]
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	0003023c 	.word	0x0003023c

000b42b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <hal_usart_available+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	691b      	ldr	r3, [r3, #16]
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	0003023c 	.word	0x0003023c

000b42c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <hal_usart_read+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	695b      	ldr	r3, [r3, #20]
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	0003023c 	.word	0x0003023c

000b42d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_usart_peek+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	699b      	ldr	r3, [r3, #24]
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	0003023c 	.word	0x0003023c

000b42e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_usart_flush+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	69db      	ldr	r3, [r3, #28]
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	0003023c 	.word	0x0003023c

000b42f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <hal_usart_is_enabled+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	6a1b      	ldr	r3, [r3, #32]
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	0003023c 	.word	0x0003023c

000b4304 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <hal_usart_available_data_for_write+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003023c 	.word	0x0003023c

000b4314 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <hal_usart_init_ex+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003023c 	.word	0x0003023c

000b4324 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <HAL_USB_USART_Init+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	681b      	ldr	r3, [r3, #0]
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003024c 	.word	0x0003024c

000b4334 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <HAL_USB_USART_Available_Data+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	691b      	ldr	r3, [r3, #16]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003024c 	.word	0x0003024c

000b4344 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	695b      	ldr	r3, [r3, #20]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003024c 	.word	0x0003024c

000b4354 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <HAL_USB_USART_Receive_Data+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	699b      	ldr	r3, [r3, #24]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	0003024c 	.word	0x0003024c

000b4364 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_USB_USART_Send_Data+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	69db      	ldr	r3, [r3, #28]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	0003024c 	.word	0x0003024c

000b4374 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <HAL_USB_USART_Flush_Data+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	6a1b      	ldr	r3, [r3, #32]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	0003024c 	.word	0x0003024c

000b4384 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <set_system_mode+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	685b      	ldr	r3, [r3, #4]
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	00030220 	.word	0x00030220

000b4394 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <application_thread_current+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	00030220 	.word	0x00030220

000b43a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <application_thread_invoke+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	00030220 	.word	0x00030220

000b43b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b03      	ldr	r3, [pc, #12]	; (b43c4 <system_ctrl_set_app_request_handler+0x10>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b43be:	9301      	str	r3, [sp, #4]
   b43c0:	bd08      	pop	{r3, pc}
   b43c2:	0000      	.short	0x0000
   b43c4:	00030220 	.word	0x00030220

000b43c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b03      	ldr	r3, [pc, #12]	; (b43d8 <system_ctrl_set_result+0x10>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b43d2:	9301      	str	r3, [sp, #4]
   b43d4:	bd08      	pop	{r3, pc}
   b43d6:	0000      	.short	0x0000
   b43d8:	00030220 	.word	0x00030220

000b43dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <spark_cloud_flag_connected+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	695b      	ldr	r3, [r3, #20]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030244 	.word	0x00030244

000b43ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <spark_send_event+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	6a1b      	ldr	r3, [r3, #32]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030244 	.word	0x00030244

000b43fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030244 	.word	0x00030244

000b440c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <network_connect+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	685b      	ldr	r3, [r3, #4]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030240 	.word	0x00030240

000b441c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <network_connecting+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	689b      	ldr	r3, [r3, #8]
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030240 	.word	0x00030240

000b442c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <network_disconnect+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	68db      	ldr	r3, [r3, #12]
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030240 	.word	0x00030240

000b443c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <network_ready+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	691b      	ldr	r3, [r3, #16]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030240 	.word	0x00030240

000b444c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <network_on+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	695b      	ldr	r3, [r3, #20]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030240 	.word	0x00030240

000b445c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <network_off+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	699b      	ldr	r3, [r3, #24]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030240 	.word	0x00030240

000b446c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <network_listen+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	69db      	ldr	r3, [r3, #28]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	00030240 	.word	0x00030240

000b447c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <network_listening+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	6a1b      	ldr	r3, [r3, #32]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030240 	.word	0x00030240

000b448c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <network_set_listen_timeout+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030240 	.word	0x00030240

000b449c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <network_get_listen_timeout+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030240 	.word	0x00030240

000b44ac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <network_is_on+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030240 	.word	0x00030240

000b44bc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <network_is_off+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030240 	.word	0x00030240

000b44cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <malloc+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	681b      	ldr	r3, [r3, #0]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	0003021c 	.word	0x0003021c

000b44dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <free+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	685b      	ldr	r3, [r3, #4]
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	0003021c 	.word	0x0003021c

000b44ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <realloc+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	689b      	ldr	r3, [r3, #8]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	0003021c 	.word	0x0003021c

000b44fc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <abort+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	0003021c 	.word	0x0003021c

000b450c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <_malloc_r+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	0003021c 	.word	0x0003021c

000b451c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <__assert_func+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	0003021c 	.word	0x0003021c

000b452c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <newlib_impure_ptr_callback+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003021c 	.word	0x0003021c

000b453c <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4540:	ec55 4b11 	vmov	r4, r5, d1
   b4544:	ec57 6b12 	vmov	r6, r7, d2
   b4548:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b454a:	ee11 2a10 	vmov	r2, s2
   b454e:	ee12 0a10 	vmov	r0, s4
   b4552:	462b      	mov	r3, r5
   b4554:	4639      	mov	r1, r7
{
   b4556:	ed8d 0b02 	vstr	d0, [sp, #8]
   b455a:	ed8d 4b00 	vstr	d4, [sp]
   b455e:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b4562:	f001 fcfd 	bl	b5f60 <__aeabi_dcmpeq>
   b4566:	ed9d 0b02 	vldr	d0, [sp, #8]
   b456a:	bb38      	cbnz	r0, b45bc <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b456c:	ec51 0b10 	vmov	r0, r1, d0
   b4570:	4622      	mov	r2, r4
   b4572:	462b      	mov	r3, r5
   b4574:	f001 f8d4 	bl	b5720 <__aeabi_dsub>
   b4578:	4652      	mov	r2, sl
   b457a:	4680      	mov	r8, r0
   b457c:	4689      	mov	r9, r1
   b457e:	465b      	mov	r3, fp
   b4580:	e9dd 0100 	ldrd	r0, r1, [sp]
   b4584:	f001 f8cc 	bl	b5720 <__aeabi_dsub>
   b4588:	4602      	mov	r2, r0
   b458a:	460b      	mov	r3, r1
   b458c:	4640      	mov	r0, r8
   b458e:	4649      	mov	r1, r9
   b4590:	f001 fa7e 	bl	b5a90 <__aeabi_dmul>
   b4594:	4622      	mov	r2, r4
   b4596:	4680      	mov	r8, r0
   b4598:	4689      	mov	r9, r1
   b459a:	462b      	mov	r3, r5
   b459c:	4630      	mov	r0, r6
   b459e:	4639      	mov	r1, r7
   b45a0:	f001 f8be 	bl	b5720 <__aeabi_dsub>
   b45a4:	4602      	mov	r2, r0
   b45a6:	460b      	mov	r3, r1
   b45a8:	4640      	mov	r0, r8
   b45aa:	4649      	mov	r1, r9
   b45ac:	f001 fb9a 	bl	b5ce4 <__aeabi_ddiv>
   b45b0:	4652      	mov	r2, sl
   b45b2:	465b      	mov	r3, fp
   b45b4:	f001 f8b6 	bl	b5724 <__adddf3>
   b45b8:	ec41 0b10 	vmov	d0, r0, r1
}
   b45bc:	b005      	add	sp, #20
   b45be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b45c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b45c2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b45c4:	6883      	ldr	r3, [r0, #8]
   b45c6:	4604      	mov	r4, r0
   b45c8:	b90b      	cbnz	r3, b45ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b45ca:	f001 f8a1 	bl	b5710 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b45ce:	68c3      	ldr	r3, [r0, #12]
   b45d0:	4798      	blx	r3
      if (_M_manager)
   b45d2:	68a3      	ldr	r3, [r4, #8]
   b45d4:	b11b      	cbz	r3, b45de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b45d6:	2203      	movs	r2, #3
   b45d8:	4621      	mov	r1, r4
   b45da:	4620      	mov	r0, r4
   b45dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b45de:	4620      	mov	r0, r4
   b45e0:	2110      	movs	r1, #16
}
   b45e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b45e6:	f7ff bd5a 	b.w	b409e <_ZdlPvj>

000b45ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b45ea:	b510      	push	{r4, lr}
      if (_M_manager)
   b45ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b45ee:	4604      	mov	r4, r0
      if (_M_manager)
   b45f0:	b113      	cbz	r3, b45f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b45f2:	2203      	movs	r2, #3
   b45f4:	4601      	mov	r1, r0
   b45f6:	4798      	blx	r3
    }
   b45f8:	4620      	mov	r0, r4
   b45fa:	bd10      	pop	{r4, pc}

000b45fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b45fc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b45fe:	6843      	ldr	r3, [r0, #4]
   b4600:	3b01      	subs	r3, #1
    {
   b4602:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4604:	6043      	str	r3, [r0, #4]
   b4606:	b963      	cbnz	r3, b4622 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4608:	6803      	ldr	r3, [r0, #0]
   b460a:	689b      	ldr	r3, [r3, #8]
   b460c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b460e:	68a3      	ldr	r3, [r4, #8]
   b4610:	3b01      	subs	r3, #1
   b4612:	60a3      	str	r3, [r4, #8]
   b4614:	b92b      	cbnz	r3, b4622 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4616:	6823      	ldr	r3, [r4, #0]
   b4618:	4620      	mov	r0, r4
   b461a:	68db      	ldr	r3, [r3, #12]
    }
   b461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4620:	4718      	bx	r3
    }
   b4622:	bd10      	pop	{r4, pc}

000b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4624:	b510      	push	{r4, lr}
   b4626:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4628:	6800      	ldr	r0, [r0, #0]
   b462a:	b108      	cbz	r0, b4630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b462c:	f7ff ffe6 	bl	b45fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4630:	4620      	mov	r0, r4
   b4632:	bd10      	pop	{r4, pc}

000b4634 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4634:	b513      	push	{r0, r1, r4, lr}
   b4636:	460b      	mov	r3, r1
   b4638:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b463a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b463e:	466c      	mov	r4, sp
   b4640:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4644:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4648:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b464c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4650:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4654:	b002      	add	sp, #8
   b4656:	bd10      	pop	{r4, pc}

000b4658 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4658:	4802      	ldr	r0, [pc, #8]	; (b4664 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b465a:	2300      	movs	r3, #0
   b465c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b465e:	f7ff bd91 	b.w	b4184 <os_mutex_recursive_create>
   b4662:	bf00      	nop
   b4664:	2003e6b8 	.word	0x2003e6b8

000b4668 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4668:	4770      	bx	lr

000b466a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b466a:	2000      	movs	r0, #0
   b466c:	4770      	bx	lr

000b466e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b466e:	b510      	push	{r4, lr}
   b4670:	2110      	movs	r1, #16
   b4672:	4604      	mov	r4, r0
   b4674:	f7ff fd13 	bl	b409e <_ZdlPvj>
   b4678:	4620      	mov	r0, r4
   b467a:	bd10      	pop	{r4, pc}

000b467c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b467c:	b508      	push	{r3, lr}
      { delete this; }
   b467e:	f7ff fff6 	bl	b466e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4682:	bd08      	pop	{r3, pc}

000b4684 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4684:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4686:	2200      	movs	r2, #0
   b4688:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b468c:	6002      	str	r2, [r0, #0]
   b468e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4690:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4692:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4694:	680c      	ldr	r4, [r1, #0]
   b4696:	8085      	strh	r5, [r0, #4]
   b4698:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b469a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b469c:	bd30      	pop	{r4, r5, pc}

000b469e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b469e:	b510      	push	{r4, lr}
   b46a0:	4604      	mov	r4, r0
    free((void*)msg_);
   b46a2:	6800      	ldr	r0, [r0, #0]
   b46a4:	f7ff ff1a 	bl	b44dc <free>
}
   b46a8:	4620      	mov	r0, r4
   b46aa:	bd10      	pop	{r4, pc}

000b46ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b46ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b46ae:	68c4      	ldr	r4, [r0, #12]
   b46b0:	b1f4      	cbz	r4, b46f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b46b2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b46b4:	2b02      	cmp	r3, #2
   b46b6:	d103      	bne.n	b46c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b46b8:	f104 000c 	add.w	r0, r4, #12
   b46bc:	f7ff ffef 	bl	b469e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b46c0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b46c2:	b135      	cbz	r5, b46d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b46c4:	4628      	mov	r0, r5
   b46c6:	f7ff ff90 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
   b46ca:	2110      	movs	r1, #16
   b46cc:	4628      	mov	r0, r5
   b46ce:	f7ff fce6 	bl	b409e <_ZdlPvj>
   b46d2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b46d4:	b135      	cbz	r5, b46e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b46d6:	4628      	mov	r0, r5
   b46d8:	f7ff ff87 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
   b46dc:	2110      	movs	r1, #16
   b46de:	4628      	mov	r0, r5
   b46e0:	f7ff fcdd 	bl	b409e <_ZdlPvj>
   b46e4:	4620      	mov	r0, r4
   b46e6:	2114      	movs	r1, #20
   b46e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b46ec:	f7ff bcd7 	b.w	b409e <_ZdlPvj>
   b46f0:	bd38      	pop	{r3, r4, r5, pc}

000b46f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b46f2:	680b      	ldr	r3, [r1, #0]
   b46f4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b46f6:	684b      	ldr	r3, [r1, #4]
   b46f8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b46fa:	b113      	cbz	r3, b4702 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b46fc:	685a      	ldr	r2, [r3, #4]
   b46fe:	3201      	adds	r2, #1
   b4700:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4702:	4770      	bx	lr

000b4704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4704:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4706:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4708:	4668      	mov	r0, sp
   b470a:	460d      	mov	r5, r1
   b470c:	f7ff fff1 	bl	b46f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4710:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4712:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4714:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4716:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4718:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b471a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b471c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b471e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4720:	f7ff ff80 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4724:	b135      	cbz	r5, b4734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4726:	1d28      	adds	r0, r5, #4
   b4728:	f7ff ff7c 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b472c:	2108      	movs	r1, #8
   b472e:	4628      	mov	r0, r5
   b4730:	f7ff fcb5 	bl	b409e <_ZdlPvj>
        return p;
    }
   b4734:	4620      	mov	r0, r4
   b4736:	b003      	add	sp, #12
   b4738:	bd30      	pop	{r4, r5, pc}

000b473a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b473a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b473c:	b510      	push	{r4, lr}
      if (_M_empty())
   b473e:	b90a      	cbnz	r2, b4744 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4740:	f000 ffe6 	bl	b5710 <_ZSt25__throw_bad_function_callv>
    }
   b4744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4748:	68c3      	ldr	r3, [r0, #12]
   b474a:	4718      	bx	r3

000b474c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b474c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b474e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4750:	f100 0110 	add.w	r1, r0, #16
   b4754:	f7ff fff1 	bl	b473a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4758:	bd08      	pop	{r3, pc}

000b475a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b475a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b475c:	b510      	push	{r4, lr}
      if (_M_empty())
   b475e:	b90a      	cbnz	r2, b4764 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4760:	f000 ffd6 	bl	b5710 <_ZSt25__throw_bad_function_callv>
    }
   b4764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4768:	68c3      	ldr	r3, [r0, #12]
   b476a:	4718      	bx	r3

000b476c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b476c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b476e:	6800      	ldr	r0, [r0, #0]
   b4770:	f100 0110 	add.w	r1, r0, #16
   b4774:	f7ff fff1 	bl	b475a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4778:	bd08      	pop	{r3, pc}
	...

000b477c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b477c:	b538      	push	{r3, r4, r5, lr}
   b477e:	2300      	movs	r3, #0
   b4780:	4604      	mov	r4, r0
   b4782:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4784:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4786:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4788:	f7ff fc85 	bl	b4096 <_Znwj>
   b478c:	b128      	cbz	r0, b479a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b478e:	2301      	movs	r3, #1
   b4790:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4794:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4796:	6003      	str	r3, [r0, #0]
   b4798:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b479a:	6020      	str	r0, [r4, #0]
	}
   b479c:	4620      	mov	r0, r4
   b479e:	bd38      	pop	{r3, r4, r5, pc}
   b47a0:	000b6520 	.word	0x000b6520

000b47a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b47a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b47a6:	2300      	movs	r3, #0
   b47a8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b47aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b47ac:	4604      	mov	r4, r0
   b47ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b47b0:	b12b      	cbz	r3, b47be <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b47b2:	2202      	movs	r2, #2
   b47b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b47b6:	68eb      	ldr	r3, [r5, #12]
   b47b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b47ba:	68ab      	ldr	r3, [r5, #8]
   b47bc:	60a3      	str	r3, [r4, #8]
    }
   b47be:	4620      	mov	r0, r4
   b47c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b47c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b47c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b47c6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b47c8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b47ca:	4668      	mov	r0, sp
   b47cc:	f7ff ff5a 	bl	b4684 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b47d0:	f04f 0302 	mov.w	r3, #2
   b47d4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b47d8:	2a00      	cmp	r2, #0
   b47da:	d103      	bne.n	b47e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b47dc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b47e0:	2900      	cmp	r1, #0
   b47e2:	d1f7      	bne.n	b47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b47e4:	d125      	bne.n	b4832 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b47e6:	f104 050c 	add.w	r5, r4, #12
   b47ea:	4669      	mov	r1, sp
   b47ec:	4628      	mov	r0, r5
   b47ee:	f7ff ff49 	bl	b4684 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b47f2:	f3bf 8f5b 	dmb	ish
   b47f6:	2301      	movs	r3, #1
   b47f8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b47fa:	2000      	movs	r0, #0
   b47fc:	f104 0308 	add.w	r3, r4, #8
   b4800:	f3bf 8f5b 	dmb	ish
   b4804:	e853 6f00 	ldrex	r6, [r3]
   b4808:	e843 0200 	strex	r2, r0, [r3]
   b480c:	2a00      	cmp	r2, #0
   b480e:	d1f9      	bne.n	b4804 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4810:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4814:	b16e      	cbz	r6, b4832 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4816:	f7ff fdbd 	bl	b4394 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b481a:	b178      	cbz	r0, b483c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b481c:	4629      	mov	r1, r5
   b481e:	4630      	mov	r0, r6
   b4820:	f7ff ff8b 	bl	b473a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4824:	4630      	mov	r0, r6
   b4826:	f7ff fee0 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b482a:	2110      	movs	r1, #16
   b482c:	4630      	mov	r0, r6
   b482e:	f7ff fc36 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b4832:	4668      	mov	r0, sp
   b4834:	f7ff ff33 	bl	b469e <_ZN8particle5ErrorD1Ev>
    }
   b4838:	b009      	add	sp, #36	; 0x24
   b483a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b483c:	4631      	mov	r1, r6
   b483e:	a802      	add	r0, sp, #8
   b4840:	f7ff ffb0 	bl	b47a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4844:	68e0      	ldr	r0, [r4, #12]
   b4846:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b484a:	b108      	cbz	r0, b4850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b484c:	f001 fdc4 	bl	b63d8 <strdup>
        type_(type) {
   b4850:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4852:	2010      	movs	r0, #16
   b4854:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4858:	f7ff fc1d 	bl	b4096 <_Znwj>
   b485c:	4605      	mov	r5, r0
   b485e:	b1e8      	cbz	r0, b489c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4860:	2700      	movs	r7, #0
   b4862:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4864:	2018      	movs	r0, #24
   b4866:	f7ff fc16 	bl	b4096 <_Znwj>
   b486a:	4604      	mov	r4, r0
   b486c:	b188      	cbz	r0, b4892 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b486e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4870:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4872:	a802      	add	r0, sp, #8
   b4874:	f7ff fede 	bl	b4634 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4878:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b487a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b487c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b487e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4880:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4882:	a906      	add	r1, sp, #24
   b4884:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4886:	60e3      	str	r3, [r4, #12]
   b4888:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b488c:	9205      	str	r2, [sp, #20]
   b488e:	f7ff fef9 	bl	b4684 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4892:	4b08      	ldr	r3, [pc, #32]	; (b48b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4894:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4896:	4b08      	ldr	r3, [pc, #32]	; (b48b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4898:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b489a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b489c:	a806      	add	r0, sp, #24
   b489e:	f7ff fefe 	bl	b469e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b48a2:	a802      	add	r0, sp, #8
   b48a4:	f7ff fea1 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b48a8:	2200      	movs	r2, #0
   b48aa:	4629      	mov	r1, r5
   b48ac:	4803      	ldr	r0, [pc, #12]	; (b48bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b48ae:	f7ff fd79 	bl	b43a4 <application_thread_invoke>
   b48b2:	e7b7      	b.n	b4824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b48b4:	000b474d 	.word	0x000b474d
   b48b8:	000b49d1 	.word	0x000b49d1
   b48bc:	000b45c3 	.word	0x000b45c3

000b48c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b48c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48c4:	b08b      	sub	sp, #44	; 0x2c
   b48c6:	4605      	mov	r5, r0
   b48c8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b48cc:	460f      	mov	r7, r1
   b48ce:	4690      	mov	r8, r2
   b48d0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b48d2:	f7ff fd83 	bl	b43dc <spark_cloud_flag_connected>
   b48d6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b48d8:	4683      	mov	fp, r0
   b48da:	bb38      	cbnz	r0, b492c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b48dc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b48e0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b48e2:	a905      	add	r1, sp, #20
   b48e4:	4630      	mov	r0, r6
   b48e6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b48ea:	f7ff fecb 	bl	b4684 <_ZN8particle5ErrorC1EOS0_>
   b48ee:	2014      	movs	r0, #20
   b48f0:	f7ff fbd1 	bl	b4096 <_Znwj>
   b48f4:	4604      	mov	r4, r0
   b48f6:	b148      	cbz	r0, b490c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b48f8:	2302      	movs	r3, #2
   b48fa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b48fc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b48fe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4902:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4904:	4631      	mov	r1, r6
   b4906:	300c      	adds	r0, #12
   b4908:	f7ff febc 	bl	b4684 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b490c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b490e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4910:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4914:	f7ff ff32 	bl	b477c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4918:	4630      	mov	r0, r6
   b491a:	f7ff fec0 	bl	b469e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b491e:	a805      	add	r0, sp, #20
   b4920:	f7ff febd 	bl	b469e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4924:	4628      	mov	r0, r5
   b4926:	b00b      	add	sp, #44	; 0x2c
   b4928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b492c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b492e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4930:	2014      	movs	r0, #20
   b4932:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4936:	9307      	str	r3, [sp, #28]
   b4938:	f7ff fbad 	bl	b4096 <_Znwj>
   b493c:	4601      	mov	r1, r0
   b493e:	b118      	cbz	r0, b4948 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4940:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4944:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4946:	7044      	strb	r4, [r0, #1]
   b4948:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b494a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b494c:	f7ff ff16 	bl	b477c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4950:	4b1e      	ldr	r3, [pc, #120]	; (b49cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4952:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4954:	2008      	movs	r0, #8
   b4956:	f7ff fb9e 	bl	b4096 <_Znwj>
   b495a:	4604      	mov	r4, r0
   b495c:	b110      	cbz	r0, b4964 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b495e:	a903      	add	r1, sp, #12
   b4960:	f7ff fec7 	bl	b46f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4964:	9600      	str	r6, [sp, #0]
   b4966:	fa5f f38a 	uxtb.w	r3, sl
   b496a:	464a      	mov	r2, r9
   b496c:	4641      	mov	r1, r8
   b496e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4970:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4972:	f7ff fd3b 	bl	b43ec <spark_send_event>
   b4976:	b9b8      	cbnz	r0, b49a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4978:	9b03      	ldr	r3, [sp, #12]
   b497a:	785b      	ldrb	r3, [r3, #1]
   b497c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4980:	b993      	cbnz	r3, b49a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4982:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4986:	a905      	add	r1, sp, #20
   b4988:	a803      	add	r0, sp, #12
   b498a:	9205      	str	r2, [sp, #20]
   b498c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4990:	f7ff ff18 	bl	b47c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4994:	a805      	add	r0, sp, #20
   b4996:	f7ff fe82 	bl	b469e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b499a:	a805      	add	r0, sp, #20
   b499c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b499e:	f7ff feb1 	bl	b4704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b49a2:	a806      	add	r0, sp, #24
   b49a4:	f7ff fe3e 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b49a8:	a903      	add	r1, sp, #12
   b49aa:	a805      	add	r0, sp, #20
   b49ac:	f7ff fea1 	bl	b46f2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b49b0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b49b2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b49b4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b49b6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b49b8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b49ba:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b49bc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b49be:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b49c0:	f7ff fe30 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b49c4:	a804      	add	r0, sp, #16
   b49c6:	f7ff fe2d 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b49ca:	e7ab      	b.n	b4924 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b49cc:	000b4a4d 	.word	0x000b4a4d

000b49d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b49d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b49d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49d4:	4605      	mov	r5, r0
	switch (__op)
   b49d6:	d103      	bne.n	b49e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b49d8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b49da:	6003      	str	r3, [r0, #0]
      }
   b49dc:	2000      	movs	r0, #0
   b49de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b49e0:	2a02      	cmp	r2, #2
   b49e2:	d010      	beq.n	b4a06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b49e4:	2a03      	cmp	r2, #3
   b49e6:	d1f9      	bne.n	b49dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b49e8:	6804      	ldr	r4, [r0, #0]
   b49ea:	2c00      	cmp	r4, #0
   b49ec:	d0f6      	beq.n	b49dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b49ee:	f104 0010 	add.w	r0, r4, #16
   b49f2:	f7ff fe54 	bl	b469e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b49f6:	4620      	mov	r0, r4
   b49f8:	f7ff fdf7 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b49fc:	2118      	movs	r1, #24
   b49fe:	4620      	mov	r0, r4
   b4a00:	f7ff fb4d 	bl	b409e <_ZdlPvj>
   b4a04:	e7ea      	b.n	b49dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a06:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4a08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a0a:	f7ff fb44 	bl	b4096 <_Znwj>
   b4a0e:	4604      	mov	r4, r0
   b4a10:	b150      	cbz	r0, b4a28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4a12:	4631      	mov	r1, r6
   b4a14:	f7ff fec6 	bl	b47a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4a18:	6930      	ldr	r0, [r6, #16]
   b4a1a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4a1e:	b108      	cbz	r0, b4a24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4a20:	f001 fcda 	bl	b63d8 <strdup>
        type_(type) {
   b4a24:	6120      	str	r0, [r4, #16]
   b4a26:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4a28:	602c      	str	r4, [r5, #0]
	}
   b4a2a:	e7d7      	b.n	b49dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4a2c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4a2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a2e:	2300      	movs	r3, #0
   b4a30:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a34:	4604      	mov	r4, r0
   b4a36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a38:	b12b      	cbz	r3, b4a46 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a3a:	2202      	movs	r2, #2
   b4a3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a3e:	68eb      	ldr	r3, [r5, #12]
   b4a40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a42:	68ab      	ldr	r3, [r5, #8]
   b4a44:	60a3      	str	r3, [r4, #8]
    }
   b4a46:	4620      	mov	r0, r4
   b4a48:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a4e:	b089      	sub	sp, #36	; 0x24
   b4a50:	4604      	mov	r4, r0
   b4a52:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4a54:	a801      	add	r0, sp, #4
   b4a56:	4611      	mov	r1, r2
   b4a58:	f7ff fe54 	bl	b4704 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4a5c:	b1a4      	cbz	r4, b4a88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4a5e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4a60:	b11d      	cbz	r5, b4a6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4a62:	4628      	mov	r0, r5
   b4a64:	f001 fcb8 	bl	b63d8 <strdup>
   b4a68:	4605      	mov	r5, r0
   b4a6a:	a801      	add	r0, sp, #4
   b4a6c:	a903      	add	r1, sp, #12
        type_(type) {
   b4a6e:	9503      	str	r5, [sp, #12]
   b4a70:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4a74:	f7ff fea6 	bl	b47c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4a78:	a803      	add	r0, sp, #12
   b4a7a:	f7ff fe10 	bl	b469e <_ZN8particle5ErrorD1Ev>
   b4a7e:	a802      	add	r0, sp, #8
   b4a80:	f7ff fdd0 	bl	b4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4a84:	b009      	add	sp, #36	; 0x24
   b4a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4a88:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4a8a:	2301      	movs	r3, #1
   b4a8c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4a90:	2a00      	cmp	r2, #0
   b4a92:	d103      	bne.n	b4a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4a94:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4a98:	2900      	cmp	r1, #0
   b4a9a:	d1f7      	bne.n	b4a8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4a9c:	d1ef      	bne.n	b4a7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4a9e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4aa0:	f3bf 8f5b 	dmb	ish
   b4aa4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4aa6:	1d2b      	adds	r3, r5, #4
   b4aa8:	f3bf 8f5b 	dmb	ish
   b4aac:	e853 6f00 	ldrex	r6, [r3]
   b4ab0:	e843 4200 	strex	r2, r4, [r3]
   b4ab4:	2a00      	cmp	r2, #0
   b4ab6:	d1f9      	bne.n	b4aac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4ab8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4abc:	2e00      	cmp	r6, #0
   b4abe:	d0de      	beq.n	b4a7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	f7ff fc67 	bl	b4394 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4ac6:	4607      	mov	r7, r0
   b4ac8:	b160      	cbz	r0, b4ae4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4aca:	f105 010c 	add.w	r1, r5, #12
   b4ace:	4630      	mov	r0, r6
   b4ad0:	f7ff fe43 	bl	b475a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4ad4:	4630      	mov	r0, r6
   b4ad6:	f7ff fd88 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4ada:	2110      	movs	r1, #16
   b4adc:	4630      	mov	r0, r6
   b4ade:	f7ff fade 	bl	b409e <_ZdlPvj>
   b4ae2:	e7cc      	b.n	b4a7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4ae4:	4631      	mov	r1, r6
   b4ae6:	a803      	add	r0, sp, #12
   b4ae8:	f7ff ffa0 	bl	b4a2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4aec:	7b2b      	ldrb	r3, [r5, #12]
   b4aee:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4af2:	2010      	movs	r0, #16
   b4af4:	f7ff facf 	bl	b4096 <_Znwj>
   b4af8:	4605      	mov	r5, r0
   b4afa:	b1d0      	cbz	r0, b4b32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4afc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4afe:	2014      	movs	r0, #20
   b4b00:	f7ff fac9 	bl	b4096 <_Znwj>
   b4b04:	4604      	mov	r4, r0
   b4b06:	b178      	cbz	r0, b4b28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4b08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4b0a:	4601      	mov	r1, r0
   b4b0c:	a803      	add	r0, sp, #12
   b4b0e:	f7ff fd91 	bl	b4634 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b12:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4b14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b16:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b18:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4b1a:	9205      	str	r2, [sp, #20]
   b4b1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b1e:	60e3      	str	r3, [r4, #12]
   b4b20:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4b24:	9206      	str	r2, [sp, #24]
   b4b26:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4b28:	4b06      	ldr	r3, [pc, #24]	; (b4b44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4b2a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4b2c:	4b06      	ldr	r3, [pc, #24]	; (b4b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b2e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4b30:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4b32:	a803      	add	r0, sp, #12
   b4b34:	f7ff fd59 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4b38:	2200      	movs	r2, #0
   b4b3a:	4629      	mov	r1, r5
   b4b3c:	4803      	ldr	r0, [pc, #12]	; (b4b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4b3e:	f7ff fc31 	bl	b43a4 <application_thread_invoke>
   b4b42:	e7c7      	b.n	b4ad4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4b44:	000b476d 	.word	0x000b476d
   b4b48:	000b4b51 	.word	0x000b4b51
   b4b4c:	000b45c3 	.word	0x000b45c3

000b4b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4b50:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4b52:	b570      	push	{r4, r5, r6, lr}
   b4b54:	4604      	mov	r4, r0
	switch (__op)
   b4b56:	d103      	bne.n	b4b60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4b58:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b5a:	6003      	str	r3, [r0, #0]
      }
   b4b5c:	2000      	movs	r0, #0
   b4b5e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4b60:	2a02      	cmp	r2, #2
   b4b62:	d00c      	beq.n	b4b7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4b64:	2a03      	cmp	r2, #3
   b4b66:	d1f9      	bne.n	b4b5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4b68:	6804      	ldr	r4, [r0, #0]
   b4b6a:	2c00      	cmp	r4, #0
   b4b6c:	d0f6      	beq.n	b4b5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f7ff fd3b 	bl	b45ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4b74:	2114      	movs	r1, #20
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff fa91 	bl	b409e <_ZdlPvj>
   b4b7c:	e7ee      	b.n	b4b5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4b7e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4b80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4b82:	f7ff fa88 	bl	b4096 <_Znwj>
   b4b86:	4605      	mov	r5, r0
   b4b88:	b120      	cbz	r0, b4b94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b4b8a:	4631      	mov	r1, r6
   b4b8c:	f7ff ff4e 	bl	b4a2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4b90:	7c33      	ldrb	r3, [r6, #16]
   b4b92:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4b94:	6025      	str	r5, [r4, #0]
	}
   b4b96:	e7e1      	b.n	b4b5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b4b98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b98:	2200      	movs	r2, #0
   b4b9a:	6840      	ldr	r0, [r0, #4]
   b4b9c:	4611      	mov	r1, r2
   b4b9e:	f7ff bc6d 	b.w	b447c <network_listening>

000b4ba2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ba2:	2200      	movs	r2, #0
   b4ba4:	6840      	ldr	r0, [r0, #4]
   b4ba6:	4611      	mov	r1, r2
   b4ba8:	f7ff bc78 	b.w	b449c <network_get_listen_timeout>

000b4bac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4bac:	6840      	ldr	r0, [r0, #4]
   b4bae:	2200      	movs	r2, #0
   b4bb0:	f7ff bc6c 	b.w	b448c <network_set_listen_timeout>

000b4bb4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4bb4:	6840      	ldr	r0, [r0, #4]
   b4bb6:	2200      	movs	r2, #0
   b4bb8:	f081 0101 	eor.w	r1, r1, #1
   b4bbc:	f7ff bc56 	b.w	b446c <network_listen>

000b4bc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4bc0:	2300      	movs	r3, #0
   b4bc2:	6840      	ldr	r0, [r0, #4]
   b4bc4:	461a      	mov	r2, r3
   b4bc6:	4619      	mov	r1, r3
   b4bc8:	f7ff bc48 	b.w	b445c <network_off>

000b4bcc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4bcc:	2300      	movs	r3, #0
   b4bce:	6840      	ldr	r0, [r0, #4]
   b4bd0:	461a      	mov	r2, r3
   b4bd2:	4619      	mov	r1, r3
   b4bd4:	f7ff bc3a 	b.w	b444c <network_on>

000b4bd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4bd8:	2200      	movs	r2, #0
   b4bda:	6840      	ldr	r0, [r0, #4]
   b4bdc:	4611      	mov	r1, r2
   b4bde:	f7ff bc2d 	b.w	b443c <network_ready>

000b4be2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4be2:	2200      	movs	r2, #0
   b4be4:	6840      	ldr	r0, [r0, #4]
   b4be6:	4611      	mov	r1, r2
   b4be8:	f7ff bc18 	b.w	b441c <network_connecting>

000b4bec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4bec:	6840      	ldr	r0, [r0, #4]
   b4bee:	2200      	movs	r2, #0
   b4bf0:	2102      	movs	r1, #2
   b4bf2:	f7ff bc1b 	b.w	b442c <network_disconnect>

000b4bf6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4bf6:	2300      	movs	r3, #0
   b4bf8:	6840      	ldr	r0, [r0, #4]
   b4bfa:	461a      	mov	r2, r3
   b4bfc:	f7ff bc06 	b.w	b440c <network_connect>

000b4c00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4c00:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4c02:	2203      	movs	r2, #3
   b4c04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4c06:	4a02      	ldr	r2, [pc, #8]	; (b4c10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4c08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4c0a:	4770      	bx	lr
   b4c0c:	2003e6bc 	.word	0x2003e6bc
   b4c10:	000b653c 	.word	0x000b653c

000b4c14 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4c14:	4770      	bx	lr

000b4c16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c18:	4606      	mov	r6, r0
   b4c1a:	4615      	mov	r5, r2
   b4c1c:	460c      	mov	r4, r1
   b4c1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4c20:	42bc      	cmp	r4, r7
   b4c22:	d006      	beq.n	b4c32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4c24:	6833      	ldr	r3, [r6, #0]
   b4c26:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4c2a:	689b      	ldr	r3, [r3, #8]
   b4c2c:	4630      	mov	r0, r6
   b4c2e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4c30:	e7f6      	b.n	b4c20 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4c32:	4628      	mov	r0, r5
   b4c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c36 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4c36:	7c00      	ldrb	r0, [r0, #16]
   b4c38:	2200      	movs	r2, #0
   b4c3a:	f7ff bad3 	b.w	b41e4 <hal_i2c_write>

000b4c3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4c3e:	7c00      	ldrb	r0, [r0, #16]
   b4c40:	2100      	movs	r1, #0
   b4c42:	f7ff bad7 	b.w	b41f4 <hal_i2c_available>

000b4c46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4c46:	7c00      	ldrb	r0, [r0, #16]
   b4c48:	2100      	movs	r1, #0
   b4c4a:	f7ff badb 	b.w	b4204 <hal_i2c_read>

000b4c4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4c4e:	7c00      	ldrb	r0, [r0, #16]
   b4c50:	2100      	movs	r1, #0
   b4c52:	f7ff badf 	b.w	b4214 <hal_i2c_peek>

000b4c56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4c56:	7c00      	ldrb	r0, [r0, #16]
   b4c58:	2100      	movs	r1, #0
   b4c5a:	f7ff bae3 	b.w	b4224 <hal_i2c_flush>

000b4c5e <_ZN7TwoWireD0Ev>:
   b4c5e:	b510      	push	{r4, lr}
   b4c60:	2114      	movs	r1, #20
   b4c62:	4604      	mov	r4, r0
   b4c64:	f7ff fa1b 	bl	b409e <_ZdlPvj>
   b4c68:	4620      	mov	r0, r4
   b4c6a:	bd10      	pop	{r4, pc}

000b4c6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4c6c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c72:	4604      	mov	r4, r0
   b4c74:	4608      	mov	r0, r1
   b4c76:	2100      	movs	r1, #0
   b4c78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4c7c:	4b03      	ldr	r3, [pc, #12]	; (b4c8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4c7e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4c80:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4c82:	4611      	mov	r1, r2
   b4c84:	f7ff fade 	bl	b4244 <hal_i2c_init>
}
   b4c88:	4620      	mov	r0, r4
   b4c8a:	bd10      	pop	{r4, pc}
   b4c8c:	000b6578 	.word	0x000b6578

000b4c90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4c90:	4770      	bx	lr

000b4c92 <_ZN9IPAddressD0Ev>:
   b4c92:	b510      	push	{r4, lr}
   b4c94:	2118      	movs	r1, #24
   b4c96:	4604      	mov	r4, r0
   b4c98:	f7ff fa01 	bl	b409e <_ZdlPvj>
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	bd10      	pop	{r4, pc}

000b4ca0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ca2:	7d03      	ldrb	r3, [r0, #20]
   b4ca4:	2b06      	cmp	r3, #6
{
   b4ca6:	b08d      	sub	sp, #52	; 0x34
   b4ca8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4caa:	f100 0704 	add.w	r7, r0, #4
   b4cae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4cb2:	d012      	beq.n	b4cda <_ZNK9IPAddress7printToER5Print+0x3a>
   b4cb4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4cb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4cbc:	220a      	movs	r2, #10
   b4cbe:	4630      	mov	r0, r6
   b4cc0:	f000 f943 	bl	b4f4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4cc4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4cc6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4cc8:	d019      	beq.n	b4cfe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4cca:	2c00      	cmp	r4, #0
   b4ccc:	d0f4      	beq.n	b4cb8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4cce:	212e      	movs	r1, #46	; 0x2e
   b4cd0:	4630      	mov	r0, r6
   b4cd2:	f000 f937 	bl	b4f44 <_ZN5Print5printEc>
   b4cd6:	4404      	add	r4, r0
   b4cd8:	e7ee      	b.n	b4cb8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cda:	232f      	movs	r3, #47	; 0x2f
   b4cdc:	466a      	mov	r2, sp
   b4cde:	4639      	mov	r1, r7
   b4ce0:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ce2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ce6:	f7ff fab5 	bl	b4254 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4cea:	4668      	mov	r0, sp
   b4cec:	f001 fb91 	bl	b6412 <strlen>
   b4cf0:	6833      	ldr	r3, [r6, #0]
   b4cf2:	4602      	mov	r2, r0
   b4cf4:	68db      	ldr	r3, [r3, #12]
   b4cf6:	4669      	mov	r1, sp
   b4cf8:	4630      	mov	r0, r6
   b4cfa:	4798      	blx	r3
   b4cfc:	4604      	mov	r4, r0
    }
    return n;
}
   b4cfe:	4620      	mov	r0, r4
   b4d00:	b00d      	add	sp, #52	; 0x34
   b4d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4d04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4d04:	b510      	push	{r4, lr}
   b4d06:	4b05      	ldr	r3, [pc, #20]	; (b4d1c <_ZN9IPAddressC1Ev+0x18>)
   b4d08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4d0a:	2211      	movs	r2, #17
   b4d0c:	f840 3b04 	str.w	r3, [r0], #4
   b4d10:	2100      	movs	r1, #0
   b4d12:	f001 fb2b 	bl	b636c <memset>
}
   b4d16:	4620      	mov	r0, r4
   b4d18:	bd10      	pop	{r4, pc}
   b4d1a:	bf00      	nop
   b4d1c:	000b65a0 	.word	0x000b65a0

000b4d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4d20:	4603      	mov	r3, r0
   b4d22:	4a07      	ldr	r2, [pc, #28]	; (b4d40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4d24:	b510      	push	{r4, lr}
   b4d26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4d2a:	f101 0210 	add.w	r2, r1, #16
   b4d2e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4d32:	f843 4b04 	str.w	r4, [r3], #4
   b4d36:	4291      	cmp	r1, r2
   b4d38:	d1f9      	bne.n	b4d2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4d3a:	780a      	ldrb	r2, [r1, #0]
   b4d3c:	701a      	strb	r2, [r3, #0]
}
   b4d3e:	bd10      	pop	{r4, pc}
   b4d40:	000b65a0 	.word	0x000b65a0

000b4d44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4d44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4d46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4d4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4d4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4d52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4d56:	2304      	movs	r3, #4
   b4d58:	6041      	str	r1, [r0, #4]
   b4d5a:	7503      	strb	r3, [r0, #20]
}
   b4d5c:	bd10      	pop	{r4, pc}
	...

000b4d60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4d60:	b507      	push	{r0, r1, r2, lr}
   b4d62:	4b06      	ldr	r3, [pc, #24]	; (b4d7c <_ZN9IPAddressC1EPKh+0x1c>)
   b4d64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4d66:	78cb      	ldrb	r3, [r1, #3]
   b4d68:	9300      	str	r3, [sp, #0]
   b4d6a:	788b      	ldrb	r3, [r1, #2]
   b4d6c:	784a      	ldrb	r2, [r1, #1]
   b4d6e:	7809      	ldrb	r1, [r1, #0]
   b4d70:	f7ff ffe8 	bl	b4d44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4d74:	b003      	add	sp, #12
   b4d76:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d7a:	bf00      	nop
   b4d7c:	000b65a0 	.word	0x000b65a0

000b4d80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4d80:	4b01      	ldr	r3, [pc, #4]	; (b4d88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4d82:	4a02      	ldr	r2, [pc, #8]	; (b4d8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4d84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4d86:	4770      	bx	lr
   b4d88:	2003e6c4 	.word	0x2003e6c4
   b4d8c:	000b65ac 	.word	0x000b65ac

000b4d90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4d90:	2300      	movs	r3, #0
   b4d92:	6840      	ldr	r0, [r0, #4]
   b4d94:	461a      	mov	r2, r3
   b4d96:	f7ff bb39 	b.w	b440c <network_connect>

000b4d9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4d9a:	6840      	ldr	r0, [r0, #4]
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	2102      	movs	r1, #2
   b4da0:	f7ff bb44 	b.w	b442c <network_disconnect>

000b4da4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4da4:	2200      	movs	r2, #0
   b4da6:	6840      	ldr	r0, [r0, #4]
   b4da8:	4611      	mov	r1, r2
   b4daa:	f7ff bb37 	b.w	b441c <network_connecting>

000b4dae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4dae:	2200      	movs	r2, #0
   b4db0:	6840      	ldr	r0, [r0, #4]
   b4db2:	4611      	mov	r1, r2
   b4db4:	f7ff bb42 	b.w	b443c <network_ready>

000b4db8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4db8:	2300      	movs	r3, #0
   b4dba:	6840      	ldr	r0, [r0, #4]
   b4dbc:	461a      	mov	r2, r3
   b4dbe:	4619      	mov	r1, r3
   b4dc0:	f7ff bb44 	b.w	b444c <network_on>

000b4dc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4dc4:	2300      	movs	r3, #0
   b4dc6:	6840      	ldr	r0, [r0, #4]
   b4dc8:	461a      	mov	r2, r3
   b4dca:	4619      	mov	r1, r3
   b4dcc:	f7ff bb46 	b.w	b445c <network_off>

000b4dd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4dd0:	6840      	ldr	r0, [r0, #4]
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	f7ff bb6a 	b.w	b44ac <network_is_on>

000b4dd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4dd8:	6840      	ldr	r0, [r0, #4]
   b4dda:	2100      	movs	r1, #0
   b4ddc:	f7ff bb6e 	b.w	b44bc <network_is_off>

000b4de0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4de0:	6840      	ldr	r0, [r0, #4]
   b4de2:	2200      	movs	r2, #0
   b4de4:	f081 0101 	eor.w	r1, r1, #1
   b4de8:	f7ff bb40 	b.w	b446c <network_listen>

000b4dec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4dec:	6840      	ldr	r0, [r0, #4]
   b4dee:	2200      	movs	r2, #0
   b4df0:	f7ff bb4c 	b.w	b448c <network_set_listen_timeout>

000b4df4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4df4:	2200      	movs	r2, #0
   b4df6:	6840      	ldr	r0, [r0, #4]
   b4df8:	4611      	mov	r1, r2
   b4dfa:	f7ff bb4f 	b.w	b449c <network_get_listen_timeout>

000b4dfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4dfe:	2200      	movs	r2, #0
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	4611      	mov	r1, r2
   b4e04:	f7ff bb3a 	b.w	b447c <network_listening>

000b4e08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e0c:	b095      	sub	sp, #84	; 0x54
   b4e0e:	4614      	mov	r4, r2
   b4e10:	460d      	mov	r5, r1
   b4e12:	4607      	mov	r7, r0
    IPAddress addr;
   b4e14:	f7ff ff76 	bl	b4d04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4e18:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4e1a:	221c      	movs	r2, #28
   b4e1c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4e1e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4e20:	f001 faa4 	bl	b636c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4e24:	2340      	movs	r3, #64	; 0x40
   b4e26:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4e28:	4620      	mov	r0, r4
   b4e2a:	466b      	mov	r3, sp
   b4e2c:	aa0c      	add	r2, sp, #48	; 0x30
   b4e2e:	2100      	movs	r1, #0
   b4e30:	f7ff fa20 	bl	b4274 <netdb_getaddrinfo>
    if (!r) {
   b4e34:	4604      	mov	r4, r0
   b4e36:	2800      	cmp	r0, #0
   b4e38:	d14b      	bne.n	b4ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e3a:	4602      	mov	r2, r0
   b4e3c:	2101      	movs	r1, #1
   b4e3e:	6868      	ldr	r0, [r5, #4]
   b4e40:	f7ff fafc 	bl	b443c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e44:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e46:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e48:	4622      	mov	r2, r4
   b4e4a:	6868      	ldr	r0, [r5, #4]
   b4e4c:	f7ff faf6 	bl	b443c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e50:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e52:	4681      	mov	r9, r0
        bool ok = false;
   b4e54:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e56:	2e00      	cmp	r6, #0
   b4e58:	d03b      	beq.n	b4ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4e5a:	2900      	cmp	r1, #0
   b4e5c:	d139      	bne.n	b4ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4e5e:	6873      	ldr	r3, [r6, #4]
   b4e60:	2b02      	cmp	r3, #2
   b4e62:	d003      	beq.n	b4e6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4e64:	2b0a      	cmp	r3, #10
   b4e66:	d011      	beq.n	b4e8c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e68:	69f6      	ldr	r6, [r6, #28]
   b4e6a:	e7f4      	b.n	b4e56 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4e6c:	f1b8 0f00 	cmp.w	r8, #0
   b4e70:	d0fa      	beq.n	b4e68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4e72:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4e74:	a806      	add	r0, sp, #24
   b4e76:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4e78:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4e7a:	f7ff ff71 	bl	b4d60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e80:	1d3c      	adds	r4, r7, #4
   b4e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e84:	682b      	ldr	r3, [r5, #0]
   b4e86:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e88:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4e8a:	e7ed      	b.n	b4e68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4e8c:	f1b9 0f00 	cmp.w	r9, #0
   b4e90:	d0ea      	beq.n	b4e68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4e92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4e94:	2210      	movs	r2, #16
   b4e96:	a801      	add	r0, sp, #4
   b4e98:	f001 fa68 	bl	b636c <memset>
                    a.v = 6;
   b4e9c:	2306      	movs	r3, #6
   b4e9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4ea2:	ad01      	add	r5, sp, #4
   b4ea4:	f104 0308 	add.w	r3, r4, #8
   b4ea8:	3418      	adds	r4, #24
   b4eaa:	6818      	ldr	r0, [r3, #0]
   b4eac:	6859      	ldr	r1, [r3, #4]
   b4eae:	462a      	mov	r2, r5
   b4eb0:	c203      	stmia	r2!, {r0, r1}
   b4eb2:	3308      	adds	r3, #8
   b4eb4:	42a3      	cmp	r3, r4
   b4eb6:	4615      	mov	r5, r2
   b4eb8:	d1f7      	bne.n	b4eaa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4eba:	a901      	add	r1, sp, #4
   b4ebc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ebe:	ad07      	add	r5, sp, #28
   b4ec0:	f7ff ff2e 	bl	b4d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ec6:	1d3c      	adds	r4, r7, #4
   b4ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4eca:	682b      	ldr	r3, [r5, #0]
   b4ecc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ece:	4649      	mov	r1, r9
   b4ed0:	e7ca      	b.n	b4e68 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4ed2:	9800      	ldr	r0, [sp, #0]
   b4ed4:	f7ff f9c6 	bl	b4264 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4ed8:	4638      	mov	r0, r7
   b4eda:	b015      	add	sp, #84	; 0x54
   b4edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4ee0:	4b02      	ldr	r3, [pc, #8]	; (b4eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4ee2:	4a03      	ldr	r2, [pc, #12]	; (b4ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4ee4:	601a      	str	r2, [r3, #0]
   b4ee6:	2200      	movs	r2, #0
   b4ee8:	605a      	str	r2, [r3, #4]

} // spark
   b4eea:	4770      	bx	lr
   b4eec:	2003e6c8 	.word	0x2003e6c8
   b4ef0:	000b65b8 	.word	0x000b65b8

000b4ef4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ef6:	4606      	mov	r6, r0
   b4ef8:	460d      	mov	r5, r1
  size_t n = 0;
   b4efa:	188f      	adds	r7, r1, r2
   b4efc:	2400      	movs	r4, #0
  while (size--) {
   b4efe:	42bd      	cmp	r5, r7
   b4f00:	d00c      	beq.n	b4f1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4f02:	6833      	ldr	r3, [r6, #0]
   b4f04:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f08:	689b      	ldr	r3, [r3, #8]
   b4f0a:	4630      	mov	r0, r6
   b4f0c:	4798      	blx	r3
     if (chunk>=0)
   b4f0e:	1e03      	subs	r3, r0, #0
   b4f10:	db01      	blt.n	b4f16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4f12:	441c      	add	r4, r3
  while (size--) {
   b4f14:	e7f3      	b.n	b4efe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4f16:	2c00      	cmp	r4, #0
   b4f18:	bf08      	it	eq
   b4f1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f20 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4f20:	b513      	push	{r0, r1, r4, lr}
   b4f22:	4604      	mov	r4, r0
    }
   b4f24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4f26:	b159      	cbz	r1, b4f40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4f28:	9101      	str	r1, [sp, #4]
   b4f2a:	f001 fa72 	bl	b6412 <strlen>
   b4f2e:	6823      	ldr	r3, [r4, #0]
   b4f30:	9901      	ldr	r1, [sp, #4]
   b4f32:	68db      	ldr	r3, [r3, #12]
   b4f34:	4602      	mov	r2, r0
   b4f36:	4620      	mov	r0, r4
    }
   b4f38:	b002      	add	sp, #8
   b4f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f3e:	4718      	bx	r3
    }
   b4f40:	b002      	add	sp, #8
   b4f42:	bd10      	pop	{r4, pc}

000b4f44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4f44:	6803      	ldr	r3, [r0, #0]
   b4f46:	689b      	ldr	r3, [r3, #8]
   b4f48:	4718      	bx	r3

000b4f4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4f4a:	b530      	push	{r4, r5, lr}
   b4f4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4f4e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4f50:	2a01      	cmp	r2, #1
  *str = '\0';
   b4f52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4f56:	bf98      	it	ls
   b4f58:	220a      	movls	r2, #10
   b4f5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4f5c:	460d      	mov	r5, r1
   b4f5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4f62:	fb01 5312 	mls	r3, r1, r2, r5
   b4f66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f6a:	2b09      	cmp	r3, #9
   b4f6c:	bf94      	ite	ls
   b4f6e:	3330      	addls	r3, #48	; 0x30
   b4f70:	3337      	addhi	r3, #55	; 0x37
   b4f72:	b2db      	uxtb	r3, r3
  } while(n);
   b4f74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f7a:	d9ef      	bls.n	b4f5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f7c:	4621      	mov	r1, r4
   b4f7e:	f7ff ffcf 	bl	b4f20 <_ZN5Print5writeEPKc>
}
   b4f82:	b00b      	add	sp, #44	; 0x2c
   b4f84:	bd30      	pop	{r4, r5, pc}
	...

000b4f88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4f88:	4b01      	ldr	r3, [pc, #4]	; (b4f90 <_GLOBAL__sub_I_RGB+0x8>)
   b4f8a:	2200      	movs	r2, #0
   b4f8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f8e:	4770      	bx	lr
   b4f90:	2003e6d0 	.word	0x2003e6d0

000b4f94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4f94:	b510      	push	{r4, lr}
   b4f96:	4604      	mov	r4, r0
   b4f98:	4608      	mov	r0, r1
{
    _spi = spi;
   b4f9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4f9c:	f7ff f972 	bl	b4284 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4fa0:	2300      	movs	r3, #0
   b4fa2:	6063      	str	r3, [r4, #4]
}
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b4fa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fac:	ec57 6b10 	vmov	r6, r7, d0
   b4fb0:	4680      	mov	r8, r0
   b4fb2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b4fb4:	ee10 0a10 	vmov	r0, s0
   b4fb8:	2200      	movs	r2, #0
   b4fba:	2300      	movs	r3, #0
   b4fbc:	4639      	mov	r1, r7
   b4fbe:	f000 ffd9 	bl	b5f74 <__aeabi_dcmplt>
   b4fc2:	b128      	cbz	r0, b4fd0 <_Z4dtoadhPc+0x28>
        val = -val;
   b4fc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b4fc8:	461f      	mov	r7, r3
        *sout++ = '-';
   b4fca:	232d      	movs	r3, #45	; 0x2d
   b4fcc:	f804 3b01 	strb.w	r3, [r4], #1
   b4fd0:	2300      	movs	r3, #0
    }
    long scale = 1;
   b4fd2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b4fd6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b4fd8:	b2d9      	uxtb	r1, r3
   b4fda:	4588      	cmp	r8, r1
   b4fdc:	d903      	bls.n	b4fe6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b4fde:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b4fe2:	3301      	adds	r3, #1
   b4fe4:	e7f8      	b.n	b4fd8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b4fe6:	4648      	mov	r0, r9
   b4fe8:	f000 fce8 	bl	b59bc <__aeabi_i2d>
   b4fec:	4632      	mov	r2, r6
   b4fee:	463b      	mov	r3, r7
   b4ff0:	f000 fd4e 	bl	b5a90 <__aeabi_dmul>
   b4ff4:	4606      	mov	r6, r0
   b4ff6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b4ff8:	f001 f81c 	bl	b6034 <__aeabi_d2ulz>
   b4ffc:	468a      	mov	sl, r1
   b4ffe:	4605      	mov	r5, r0
   b5000:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b5002:	f000 fd0f 	bl	b5a24 <__aeabi_ul2d>
   b5006:	4602      	mov	r2, r0
   b5008:	460b      	mov	r3, r1
   b500a:	4630      	mov	r0, r6
   b500c:	4639      	mov	r1, r7
   b500e:	f000 fb87 	bl	b5720 <__aeabi_dsub>
   b5012:	4b14      	ldr	r3, [pc, #80]	; (b5064 <_Z4dtoadhPc+0xbc>)
   b5014:	2200      	movs	r2, #0
   b5016:	f000 ffc1 	bl	b5f9c <__aeabi_dcmpge>
   b501a:	b110      	cbz	r0, b5022 <_Z4dtoadhPc+0x7a>
        fixed++;
   b501c:	3501      	adds	r5, #1
   b501e:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b5022:	464a      	mov	r2, r9
   b5024:	4628      	mov	r0, r5
   b5026:	17d3      	asrs	r3, r2, #31
   b5028:	4659      	mov	r1, fp
   b502a:	f000 ffeb 	bl	b6004 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b502e:	2301      	movs	r3, #1
   b5030:	4615      	mov	r5, r2
   b5032:	4621      	mov	r1, r4
   b5034:	220a      	movs	r2, #10
   b5036:	f000 f9c6 	bl	b53c6 <ultoa>
    if (prec) {
   b503a:	f1b8 0f00 	cmp.w	r8, #0
   b503e:	d00e      	beq.n	b505e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b5040:	4620      	mov	r0, r4
   b5042:	f001 f9e6 	bl	b6412 <strlen>
        *sout++ = '.';
   b5046:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b5048:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b504a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b504c:	220a      	movs	r2, #10
   b504e:	4643      	mov	r3, r8
   b5050:	3101      	adds	r1, #1
   b5052:	4628      	mov	r0, r5
    }
}
   b5054:	b001      	add	sp, #4
   b5056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b505a:	f000 b9b4 	b.w	b53c6 <ultoa>
}
   b505e:	b001      	add	sp, #4
   b5060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5064:	3fe00000 	.word	0x3fe00000

000b5068 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5068:	b510      	push	{r4, lr}
   b506a:	4604      	mov	r4, r0
{
	free(buffer);
   b506c:	6800      	ldr	r0, [r0, #0]
   b506e:	f7ff fa35 	bl	b44dc <free>
}
   b5072:	4620      	mov	r0, r4
   b5074:	bd10      	pop	{r4, pc}

000b5076 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5076:	b510      	push	{r4, lr}
   b5078:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b507a:	6800      	ldr	r0, [r0, #0]
   b507c:	b108      	cbz	r0, b5082 <_ZN6String10invalidateEv+0xc>
   b507e:	f7ff fa2d 	bl	b44dc <free>
	buffer = NULL;
   b5082:	2300      	movs	r3, #0
	capacity = len = 0;
   b5084:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5088:	6023      	str	r3, [r4, #0]
}
   b508a:	bd10      	pop	{r4, pc}

000b508c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b508c:	b538      	push	{r3, r4, r5, lr}
   b508e:	4604      	mov	r4, r0
   b5090:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5092:	6800      	ldr	r0, [r0, #0]
   b5094:	3101      	adds	r1, #1
   b5096:	f7ff fa29 	bl	b44ec <realloc>
	if (newbuffer) {
   b509a:	b110      	cbz	r0, b50a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b509c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b50a0:	2001      	movs	r0, #1
	}
	return 0;
}
   b50a2:	bd38      	pop	{r3, r4, r5, pc}

000b50a4 <_ZN6String7reserveEj>:
{
   b50a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b50a6:	6803      	ldr	r3, [r0, #0]
{
   b50a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b50aa:	b123      	cbz	r3, b50b6 <_ZN6String7reserveEj+0x12>
   b50ac:	6843      	ldr	r3, [r0, #4]
   b50ae:	428b      	cmp	r3, r1
   b50b0:	d301      	bcc.n	b50b6 <_ZN6String7reserveEj+0x12>
   b50b2:	2001      	movs	r0, #1
}
   b50b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b50b6:	4620      	mov	r0, r4
   b50b8:	f7ff ffe8 	bl	b508c <_ZN6String12changeBufferEj>
   b50bc:	2800      	cmp	r0, #0
   b50be:	d0f9      	beq.n	b50b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b50c0:	68a3      	ldr	r3, [r4, #8]
   b50c2:	2b00      	cmp	r3, #0
   b50c4:	d1f5      	bne.n	b50b2 <_ZN6String7reserveEj+0xe>
   b50c6:	6822      	ldr	r2, [r4, #0]
   b50c8:	7013      	strb	r3, [r2, #0]
   b50ca:	e7f2      	b.n	b50b2 <_ZN6String7reserveEj+0xe>

000b50cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b50cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b50d0:	4611      	mov	r1, r2
   b50d2:	9201      	str	r2, [sp, #4]
{
   b50d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b50d6:	f7ff ffe5 	bl	b50a4 <_ZN6String7reserveEj>
   b50da:	9a01      	ldr	r2, [sp, #4]
   b50dc:	b928      	cbnz	r0, b50ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b50de:	4620      	mov	r0, r4
   b50e0:	f7ff ffc9 	bl	b5076 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b50e4:	4620      	mov	r0, r4
   b50e6:	b003      	add	sp, #12
   b50e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b50ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b50ec:	4629      	mov	r1, r5
   b50ee:	6820      	ldr	r0, [r4, #0]
   b50f0:	f001 f92e 	bl	b6350 <memcpy>
	buffer[len] = 0;
   b50f4:	6822      	ldr	r2, [r4, #0]
   b50f6:	68a3      	ldr	r3, [r4, #8]
   b50f8:	2100      	movs	r1, #0
   b50fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b50fc:	e7f2      	b.n	b50e4 <_ZN6String4copyEPKcj+0x18>

000b50fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b50fe:	b513      	push	{r0, r1, r4, lr}
   b5100:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5102:	b159      	cbz	r1, b511c <_ZN6StringaSEPKc+0x1e>
   b5104:	4608      	mov	r0, r1
   b5106:	9101      	str	r1, [sp, #4]
   b5108:	f001 f983 	bl	b6412 <strlen>
   b510c:	9901      	ldr	r1, [sp, #4]
   b510e:	4602      	mov	r2, r0
   b5110:	4620      	mov	r0, r4
   b5112:	f7ff ffdb 	bl	b50cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5116:	4620      	mov	r0, r4
   b5118:	b002      	add	sp, #8
   b511a:	bd10      	pop	{r4, pc}
	else invalidate();
   b511c:	f7ff ffab 	bl	b5076 <_ZN6String10invalidateEv>
   b5120:	e7f9      	b.n	b5116 <_ZN6StringaSEPKc+0x18>

000b5122 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   b5122:	b510      	push	{r4, lr}
   b5124:	4604      	mov	r4, r0
   b5126:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5128:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   b512a:	4608      	mov	r0, r1
	capacity = 0;
   b512c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5130:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5132:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   b5134:	a901      	add	r1, sp, #4
   b5136:	b2c0      	uxtb	r0, r0
   b5138:	f7ff ff36 	bl	b4fa8 <_Z4dtoadhPc>
        *this = buf;
   b513c:	a901      	add	r1, sp, #4
   b513e:	4620      	mov	r0, r4
   b5140:	f7ff ffdd 	bl	b50fe <_ZN6StringaSEPKc>
}
   b5144:	4620      	mov	r0, r4
   b5146:	b00a      	add	sp, #40	; 0x28
   b5148:	bd10      	pop	{r4, pc}
	...

000b514c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b514c:	4b05      	ldr	r3, [pc, #20]	; (b5164 <_GLOBAL__sub_I_System+0x18>)
   b514e:	2202      	movs	r2, #2
   b5150:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5152:	4b05      	ldr	r3, [pc, #20]	; (b5168 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5154:	4a05      	ldr	r2, [pc, #20]	; (b516c <_GLOBAL__sub_I_System+0x20>)
   b5156:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5158:	2000      	movs	r0, #0
   b515a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b515e:	f7ff b911 	b.w	b4384 <set_system_mode>
   b5162:	bf00      	nop
   b5164:	2003e6ec 	.word	0x2003e6ec
   b5168:	2003e6e0 	.word	0x2003e6e0
   b516c:	ffff0000 	.word	0xffff0000

000b5170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5170:	4b02      	ldr	r3, [pc, #8]	; (b517c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5172:	681a      	ldr	r2, [r3, #0]
   b5174:	4b02      	ldr	r3, [pc, #8]	; (b5180 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5176:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5178:	4770      	bx	lr
   b517a:	bf00      	nop
   b517c:	2003e63c 	.word	0x2003e63c
   b5180:	2003e6f0 	.word	0x2003e6f0

000b5184 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5184:	4770      	bx	lr

000b5186 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5186:	7441      	strb	r1, [r0, #17]
}
   b5188:	4770      	bx	lr

000b518a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b518a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b518c:	7c00      	ldrb	r0, [r0, #16]
   b518e:	f7ff f8b9 	bl	b4304 <hal_usart_available_data_for_write>
}
   b5192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5196:	bd08      	pop	{r3, pc}

000b5198 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5198:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b519a:	7c00      	ldrb	r0, [r0, #16]
   b519c:	f7ff f88a 	bl	b42b4 <hal_usart_available>
}
   b51a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b51a4:	bd08      	pop	{r3, pc}

000b51a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b51a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b51a8:	7c00      	ldrb	r0, [r0, #16]
   b51aa:	f7ff f893 	bl	b42d4 <hal_usart_peek>
}
   b51ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b51b2:	bd08      	pop	{r3, pc}

000b51b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b51b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b51b6:	7c00      	ldrb	r0, [r0, #16]
   b51b8:	f7ff f884 	bl	b42c4 <hal_usart_read>
}
   b51bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b51c0:	bd08      	pop	{r3, pc}

000b51c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b51c2:	7c00      	ldrb	r0, [r0, #16]
   b51c4:	f7ff b88e 	b.w	b42e4 <hal_usart_flush>

000b51c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b51c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51ca:	7c45      	ldrb	r5, [r0, #17]
{
   b51cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51ce:	b12d      	cbz	r5, b51dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b51d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b51d2:	b003      	add	sp, #12
   b51d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b51d8:	f7ff b864 	b.w	b42a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b51dc:	7c00      	ldrb	r0, [r0, #16]
   b51de:	9101      	str	r1, [sp, #4]
   b51e0:	f7ff f890 	bl	b4304 <hal_usart_available_data_for_write>
   b51e4:	2800      	cmp	r0, #0
   b51e6:	9901      	ldr	r1, [sp, #4]
   b51e8:	dcf2      	bgt.n	b51d0 <_ZN11USARTSerial5writeEh+0x8>
}
   b51ea:	4628      	mov	r0, r5
   b51ec:	b003      	add	sp, #12
   b51ee:	bd30      	pop	{r4, r5, pc}

000b51f0 <_ZN11USARTSerialD0Ev>:
   b51f0:	b510      	push	{r4, lr}
   b51f2:	2114      	movs	r1, #20
   b51f4:	4604      	mov	r4, r0
   b51f6:	f7fe ff52 	bl	b409e <_ZdlPvj>
   b51fa:	4620      	mov	r0, r4
   b51fc:	bd10      	pop	{r4, pc}
	...

000b5200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5200:	b510      	push	{r4, lr}
   b5202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5206:	4604      	mov	r4, r0
   b5208:	4608      	mov	r0, r1
   b520a:	4611      	mov	r1, r2
   b520c:	2200      	movs	r2, #0
   b520e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5212:	4b04      	ldr	r3, [pc, #16]	; (b5224 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5214:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5216:	2301      	movs	r3, #1
  _serial = serial;
   b5218:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b521a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b521c:	f7ff f87a 	bl	b4314 <hal_usart_init_ex>
}
   b5220:	4620      	mov	r0, r4
   b5222:	bd10      	pop	{r4, pc}
   b5224:	000b6610 	.word	0x000b6610

000b5228 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5228:	7441      	strb	r1, [r0, #17]
}
   b522a:	4770      	bx	lr

000b522c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b522c:	4770      	bx	lr

000b522e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b522e:	4770      	bx	lr

000b5230 <_ZN9USBSerial4readEv>:
{
   b5230:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5232:	2100      	movs	r1, #0
   b5234:	7c00      	ldrb	r0, [r0, #16]
   b5236:	f7ff f88d 	bl	b4354 <HAL_USB_USART_Receive_Data>
}
   b523a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b523e:	bd08      	pop	{r3, pc}

000b5240 <_ZN9USBSerial4peekEv>:
{
   b5240:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5242:	2101      	movs	r1, #1
   b5244:	7c00      	ldrb	r0, [r0, #16]
   b5246:	f7ff f885 	bl	b4354 <HAL_USB_USART_Receive_Data>
}
   b524a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b524e:	bd08      	pop	{r3, pc}

000b5250 <_ZN9USBSerial17availableForWriteEv>:
{
   b5250:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5252:	7c00      	ldrb	r0, [r0, #16]
   b5254:	f7ff f876 	bl	b4344 <HAL_USB_USART_Available_Data_For_Write>
}
   b5258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b525c:	bd08      	pop	{r3, pc}

000b525e <_ZN9USBSerial9availableEv>:
{
   b525e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5260:	7c00      	ldrb	r0, [r0, #16]
   b5262:	f7ff f867 	bl	b4334 <HAL_USB_USART_Available_Data>
}
   b5266:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b526a:	bd08      	pop	{r3, pc}

000b526c <_ZN9USBSerial5writeEh>:
{
   b526c:	b513      	push	{r0, r1, r4, lr}
   b526e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5270:	7c00      	ldrb	r0, [r0, #16]
{
   b5272:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5274:	f7ff f866 	bl	b4344 <HAL_USB_USART_Available_Data_For_Write>
   b5278:	2800      	cmp	r0, #0
   b527a:	9901      	ldr	r1, [sp, #4]
   b527c:	dc01      	bgt.n	b5282 <_ZN9USBSerial5writeEh+0x16>
   b527e:	7c60      	ldrb	r0, [r4, #17]
   b5280:	b120      	cbz	r0, b528c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5282:	7c20      	ldrb	r0, [r4, #16]
   b5284:	f7ff f86e 	bl	b4364 <HAL_USB_USART_Send_Data>
   b5288:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b528c:	b002      	add	sp, #8
   b528e:	bd10      	pop	{r4, pc}

000b5290 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5290:	7c00      	ldrb	r0, [r0, #16]
   b5292:	f7ff b86f 	b.w	b4374 <HAL_USB_USART_Flush_Data>

000b5296 <_ZN9USBSerialD0Ev>:
   b5296:	b510      	push	{r4, lr}
   b5298:	2114      	movs	r1, #20
   b529a:	4604      	mov	r4, r0
   b529c:	f7fe feff 	bl	b409e <_ZdlPvj>
   b52a0:	4620      	mov	r0, r4
   b52a2:	bd10      	pop	{r4, pc}

000b52a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b52a4:	b510      	push	{r4, lr}
   b52a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52aa:	4604      	mov	r4, r0
   b52ac:	4608      	mov	r0, r1
   b52ae:	2100      	movs	r1, #0
   b52b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b52b4:	4b04      	ldr	r3, [pc, #16]	; (b52c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b52b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b52b8:	2301      	movs	r3, #1
  _serial = serial;
   b52ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b52be:	4611      	mov	r1, r2
   b52c0:	f7ff f830 	bl	b4324 <HAL_USB_USART_Init>
}
   b52c4:	4620      	mov	r0, r4
   b52c6:	bd10      	pop	{r4, pc}
   b52c8:	000b6640 	.word	0x000b6640

000b52cc <_Z19acquireSerialBufferv>:
{
   b52cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b52ce:	2214      	movs	r2, #20
{
   b52d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b52d2:	2100      	movs	r1, #0
   b52d4:	f001 f84a 	bl	b636c <memset>
}
   b52d8:	4620      	mov	r0, r4
   b52da:	bd10      	pop	{r4, pc}

000b52dc <_Z16_fetch_usbserialv>:
{
   b52dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52de:	4c0f      	ldr	r4, [pc, #60]	; (b531c <_Z16_fetch_usbserialv+0x40>)
{
   b52e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b52e2:	a803      	add	r0, sp, #12
   b52e4:	f7ff fff2 	bl	b52cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52e8:	7821      	ldrb	r1, [r4, #0]
   b52ea:	f3bf 8f5b 	dmb	ish
   b52ee:	f011 0101 	ands.w	r1, r1, #1
   b52f2:	d10f      	bne.n	b5314 <_Z16_fetch_usbserialv+0x38>
   b52f4:	4620      	mov	r0, r4
   b52f6:	9101      	str	r1, [sp, #4]
   b52f8:	f7fe fed3 	bl	b40a2 <__cxa_guard_acquire>
   b52fc:	9901      	ldr	r1, [sp, #4]
   b52fe:	b148      	cbz	r0, b5314 <_Z16_fetch_usbserialv+0x38>
   b5300:	aa03      	add	r2, sp, #12
   b5302:	4807      	ldr	r0, [pc, #28]	; (b5320 <_Z16_fetch_usbserialv+0x44>)
   b5304:	f7ff ffce 	bl	b52a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5308:	4620      	mov	r0, r4
   b530a:	f7fe fecf 	bl	b40ac <__cxa_guard_release>
   b530e:	4805      	ldr	r0, [pc, #20]	; (b5324 <_Z16_fetch_usbserialv+0x48>)
   b5310:	f001 f818 	bl	b6344 <atexit>
	return _usbserial;
}
   b5314:	4802      	ldr	r0, [pc, #8]	; (b5320 <_Z16_fetch_usbserialv+0x44>)
   b5316:	b008      	add	sp, #32
   b5318:	bd10      	pop	{r4, pc}
   b531a:	bf00      	nop
   b531c:	2003e6f4 	.word	0x2003e6f4
   b5320:	2003e6f8 	.word	0x2003e6f8
   b5324:	000b522d 	.word	0x000b522d

000b5328 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5328:	2200      	movs	r2, #0
   b532a:	6840      	ldr	r0, [r0, #4]
   b532c:	4611      	mov	r1, r2
   b532e:	f7ff b885 	b.w	b443c <network_ready>

000b5332 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5332:	2200      	movs	r2, #0
   b5334:	6840      	ldr	r0, [r0, #4]
   b5336:	4611      	mov	r1, r2
   b5338:	f7ff b8a0 	b.w	b447c <network_listening>

000b533c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b533c:	2200      	movs	r2, #0
   b533e:	6840      	ldr	r0, [r0, #4]
   b5340:	4611      	mov	r1, r2
   b5342:	f7ff b8ab 	b.w	b449c <network_get_listen_timeout>

000b5346 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5346:	6840      	ldr	r0, [r0, #4]
   b5348:	2200      	movs	r2, #0
   b534a:	f7ff b89f 	b.w	b448c <network_set_listen_timeout>

000b534e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b534e:	6840      	ldr	r0, [r0, #4]
   b5350:	2200      	movs	r2, #0
   b5352:	f081 0101 	eor.w	r1, r1, #1
   b5356:	f7ff b889 	b.w	b446c <network_listen>

000b535a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b535a:	2300      	movs	r3, #0
   b535c:	6840      	ldr	r0, [r0, #4]
   b535e:	461a      	mov	r2, r3
   b5360:	4619      	mov	r1, r3
   b5362:	f7ff b87b 	b.w	b445c <network_off>

000b5366 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5366:	2300      	movs	r3, #0
   b5368:	6840      	ldr	r0, [r0, #4]
   b536a:	461a      	mov	r2, r3
   b536c:	4619      	mov	r1, r3
   b536e:	f7ff b86d 	b.w	b444c <network_on>

000b5372 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5372:	2200      	movs	r2, #0
   b5374:	6840      	ldr	r0, [r0, #4]
   b5376:	4611      	mov	r1, r2
   b5378:	f7ff b850 	b.w	b441c <network_connecting>

000b537c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b537c:	6840      	ldr	r0, [r0, #4]
   b537e:	2200      	movs	r2, #0
   b5380:	2102      	movs	r1, #2
   b5382:	f7ff b853 	b.w	b442c <network_disconnect>

000b5386 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5386:	2300      	movs	r3, #0
   b5388:	6840      	ldr	r0, [r0, #4]
   b538a:	461a      	mov	r2, r3
   b538c:	f7ff b83e 	b.w	b440c <network_connect>

000b5390 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5390:	4b02      	ldr	r3, [pc, #8]	; (b539c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5392:	2204      	movs	r2, #4
   b5394:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5396:	4a02      	ldr	r2, [pc, #8]	; (b53a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5398:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b539a:	4770      	bx	lr
   b539c:	2003e70c 	.word	0x2003e70c
   b53a0:	000b6670 	.word	0x000b6670

000b53a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b53a4:	b510      	push	{r4, lr}
   b53a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b53a8:	f001 f833 	bl	b6412 <strlen>
   b53ac:	3801      	subs	r0, #1
   b53ae:	1823      	adds	r3, r4, r0
   b53b0:	4620      	mov	r0, r4
	while(i<j){
   b53b2:	4283      	cmp	r3, r0
   b53b4:	d906      	bls.n	b53c4 <_Z11str_reversePc+0x20>
		c = *i;
   b53b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b53b8:	7819      	ldrb	r1, [r3, #0]
   b53ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b53be:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b53c2:	e7f6      	b.n	b53b2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b53c4:	bd10      	pop	{r4, pc}

000b53c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b53c6:	b570      	push	{r4, r5, r6, lr}
   b53c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b53ca:	1e91      	subs	r1, r2, #2
   b53cc:	2922      	cmp	r1, #34	; 0x22
   b53ce:	d81d      	bhi.n	b540c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b53d0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b53d2:	b930      	cbnz	r0, b53e2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b53d4:	4423      	add	r3, r4
            *ptr++ = '0';
   b53d6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b53d8:	429d      	cmp	r5, r3
   b53da:	d210      	bcs.n	b53fe <ultoa+0x38>
            *ptr++ = '0';
   b53dc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b53e0:	e7fa      	b.n	b53d8 <ultoa+0x12>
            result.quot = a/radix;
   b53e2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b53e6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b53ea:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b53ec:	2809      	cmp	r0, #9
                *ptr += '0';
   b53ee:	bf94      	ite	ls
   b53f0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b53f2:	3157      	addhi	r1, #87	; 0x57
   b53f4:	b2c9      	uxtb	r1, r1
   b53f6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b53fa:	4630      	mov	r0, r6
	while(a){
   b53fc:	e7e9      	b.n	b53d2 <ultoa+0xc>

	*ptr = '\0';
   b53fe:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5400:	4620      	mov	r0, r4
	*ptr = '\0';
   b5402:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5404:	f7ff ffce 	bl	b53a4 <_Z11str_reversePc>
	return buffer;
   b5408:	4620      	mov	r0, r4
}
   b540a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b540c:	2000      	movs	r0, #0
   b540e:	e7fc      	b.n	b540a <ultoa+0x44>

000b5410 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5410:	4b01      	ldr	r3, [pc, #4]	; (b5418 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5412:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5414:	4770      	bx	lr
   b5416:	bf00      	nop
   b5418:	2003e640 	.word	0x2003e640

000b541c <serialEventRun>:
{
   b541c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b541e:	4b0b      	ldr	r3, [pc, #44]	; (b544c <serialEventRun+0x30>)
   b5420:	b143      	cbz	r3, b5434 <serialEventRun+0x18>
   b5422:	f7ff ff5b 	bl	b52dc <_Z16_fetch_usbserialv>
   b5426:	6803      	ldr	r3, [r0, #0]
   b5428:	691b      	ldr	r3, [r3, #16]
   b542a:	4798      	blx	r3
   b542c:	2800      	cmp	r0, #0
   b542e:	dd01      	ble.n	b5434 <serialEventRun+0x18>
        serialEvent();
   b5430:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5434:	4b06      	ldr	r3, [pc, #24]	; (b5450 <serialEventRun+0x34>)
   b5436:	b143      	cbz	r3, b544a <serialEventRun+0x2e>
   b5438:	f000 f944 	bl	b56c4 <_Z22__fetch_global_Serial1v>
   b543c:	6803      	ldr	r3, [r0, #0]
   b543e:	691b      	ldr	r3, [r3, #16]
   b5440:	4798      	blx	r3
   b5442:	2800      	cmp	r0, #0
   b5444:	dd01      	ble.n	b544a <serialEventRun+0x2e>
        serialEvent1();
   b5446:	f3af 8000 	nop.w
}
   b544a:	bd08      	pop	{r3, pc}
	...

000b5454 <_post_loop>:
{
   b5454:	b508      	push	{r3, lr}
	serialEventRun();
   b5456:	f7ff ffe1 	bl	b541c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b545a:	f7fe fea3 	bl	b41a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b545e:	4b01      	ldr	r3, [pc, #4]	; (b5464 <_post_loop+0x10>)
   b5460:	6018      	str	r0, [r3, #0]
}
   b5462:	bd08      	pop	{r3, pc}
   b5464:	2003e728 	.word	0x2003e728

000b5468 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5468:	4805      	ldr	r0, [pc, #20]	; (b5480 <_Z33system_initialize_user_backup_ramv+0x18>)
   b546a:	4a06      	ldr	r2, [pc, #24]	; (b5484 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b546c:	4906      	ldr	r1, [pc, #24]	; (b5488 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b546e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5470:	1a12      	subs	r2, r2, r0
   b5472:	f000 ff6d 	bl	b6350 <memcpy>
    __backup_sram_signature = signature;
   b5476:	4b05      	ldr	r3, [pc, #20]	; (b548c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5478:	4a05      	ldr	r2, [pc, #20]	; (b5490 <_Z33system_initialize_user_backup_ramv+0x28>)
   b547a:	601a      	str	r2, [r3, #0]
}
   b547c:	bd08      	pop	{r3, pc}
   b547e:	bf00      	nop
   b5480:	2003f400 	.word	0x2003f400
   b5484:	2003f404 	.word	0x2003f404
   b5488:	000b676c 	.word	0x000b676c
   b548c:	2003f400 	.word	0x2003f400
   b5490:	9a271c1e 	.word	0x9a271c1e

000b5494 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5494:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5496:	2300      	movs	r3, #0
   b5498:	9300      	str	r3, [sp, #0]
   b549a:	461a      	mov	r2, r3
   b549c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b54a0:	f7fe ff92 	bl	b43c8 <system_ctrl_set_result>
}
   b54a4:	b003      	add	sp, #12
   b54a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b54ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b54ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b54ae:	8843      	ldrh	r3, [r0, #2]
   b54b0:	2b0a      	cmp	r3, #10
   b54b2:	d008      	beq.n	b54c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b54b4:	2b50      	cmp	r3, #80	; 0x50
   b54b6:	d10b      	bne.n	b54d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b54b8:	4b09      	ldr	r3, [pc, #36]	; (b54e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b54ba:	681b      	ldr	r3, [r3, #0]
   b54bc:	b14b      	cbz	r3, b54d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b54be:	b003      	add	sp, #12
   b54c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b54c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b54c6:	f7ff ffe5 	bl	b5494 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b54ca:	b003      	add	sp, #12
   b54cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b54d0:	2300      	movs	r3, #0
   b54d2:	9300      	str	r3, [sp, #0]
   b54d4:	461a      	mov	r2, r3
   b54d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b54da:	f7fe ff75 	bl	b43c8 <system_ctrl_set_result>
}
   b54de:	e7f4      	b.n	b54ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b54e0:	2003e718 	.word	0x2003e718

000b54e4 <module_user_init_hook>:
{
   b54e4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b54e6:	4812      	ldr	r0, [pc, #72]	; (b5530 <module_user_init_hook+0x4c>)
   b54e8:	2100      	movs	r1, #0
   b54ea:	f7ff f81f 	bl	b452c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b54ee:	4b11      	ldr	r3, [pc, #68]	; (b5534 <module_user_init_hook+0x50>)
   b54f0:	681a      	ldr	r2, [r3, #0]
   b54f2:	4b11      	ldr	r3, [pc, #68]	; (b5538 <module_user_init_hook+0x54>)
   b54f4:	429a      	cmp	r2, r3
   b54f6:	4b11      	ldr	r3, [pc, #68]	; (b553c <module_user_init_hook+0x58>)
   b54f8:	bf0c      	ite	eq
   b54fa:	2201      	moveq	r2, #1
   b54fc:	2200      	movne	r2, #0
   b54fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5500:	d001      	beq.n	b5506 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5502:	f7ff ffb1 	bl	b5468 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5506:	f7fe fe45 	bl	b4194 <HAL_RNG_GetRandomNumber>
   b550a:	4604      	mov	r4, r0
    srand(seed);
   b550c:	f000 ff36 	bl	b637c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5510:	4b0b      	ldr	r3, [pc, #44]	; (b5540 <module_user_init_hook+0x5c>)
   b5512:	b113      	cbz	r3, b551a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5514:	4620      	mov	r0, r4
   b5516:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b551a:	2100      	movs	r1, #0
   b551c:	4808      	ldr	r0, [pc, #32]	; (b5540 <module_user_init_hook+0x5c>)
   b551e:	f7fe ff6d 	bl	b43fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5526:	4807      	ldr	r0, [pc, #28]	; (b5544 <module_user_init_hook+0x60>)
   b5528:	2100      	movs	r1, #0
   b552a:	f7fe bf43 	b.w	b43b4 <system_ctrl_set_app_request_handler>
   b552e:	bf00      	nop
   b5530:	000b5411 	.word	0x000b5411
   b5534:	2003f400 	.word	0x2003f400
   b5538:	9a271c1e 	.word	0x9a271c1e
   b553c:	2003e714 	.word	0x2003e714
   b5540:	00000000 	.word	0x00000000
   b5544:	000b54ad 	.word	0x000b54ad

000b5548 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5548:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b554a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b554c:	d902      	bls.n	b5554 <pinAvailable+0xc>
    return false;
   b554e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5550:	b002      	add	sp, #8
   b5552:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5554:	f1a0 030b 	sub.w	r3, r0, #11
   b5558:	2b02      	cmp	r3, #2
   b555a:	d81a      	bhi.n	b5592 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b555c:	4c17      	ldr	r4, [pc, #92]	; (b55bc <pinAvailable+0x74>)
   b555e:	7821      	ldrb	r1, [r4, #0]
   b5560:	f3bf 8f5b 	dmb	ish
   b5564:	f011 0101 	ands.w	r1, r1, #1
   b5568:	d10b      	bne.n	b5582 <pinAvailable+0x3a>
   b556a:	4620      	mov	r0, r4
   b556c:	9101      	str	r1, [sp, #4]
   b556e:	f7fe fd98 	bl	b40a2 <__cxa_guard_acquire>
   b5572:	9901      	ldr	r1, [sp, #4]
   b5574:	b128      	cbz	r0, b5582 <pinAvailable+0x3a>
   b5576:	4812      	ldr	r0, [pc, #72]	; (b55c0 <pinAvailable+0x78>)
   b5578:	f7ff fd0c 	bl	b4f94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b557c:	4620      	mov	r0, r4
   b557e:	f7fe fd95 	bl	b40ac <__cxa_guard_release>
   b5582:	4b0f      	ldr	r3, [pc, #60]	; (b55c0 <pinAvailable+0x78>)
   b5584:	7818      	ldrb	r0, [r3, #0]
   b5586:	f7fe fe85 	bl	b4294 <hal_spi_is_enabled>
   b558a:	2800      	cmp	r0, #0
   b558c:	d1df      	bne.n	b554e <pinAvailable+0x6>
  return true; // 'pin' is available
   b558e:	2001      	movs	r0, #1
   b5590:	e7de      	b.n	b5550 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5592:	2801      	cmp	r0, #1
   b5594:	d809      	bhi.n	b55aa <pinAvailable+0x62>
   b5596:	f000 f855 	bl	b5644 <_Z19__fetch_global_Wirev>
   b559a:	2100      	movs	r1, #0
   b559c:	7c00      	ldrb	r0, [r0, #16]
   b559e:	f7fe fe49 	bl	b4234 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b55a2:	f080 0001 	eor.w	r0, r0, #1
   b55a6:	b2c0      	uxtb	r0, r0
   b55a8:	e7d2      	b.n	b5550 <pinAvailable+0x8>
   b55aa:	3809      	subs	r0, #9
   b55ac:	2801      	cmp	r0, #1
   b55ae:	d8ee      	bhi.n	b558e <pinAvailable+0x46>
   b55b0:	f000 f888 	bl	b56c4 <_Z22__fetch_global_Serial1v>
   b55b4:	7c00      	ldrb	r0, [r0, #16]
   b55b6:	f7fe fe9d 	bl	b42f4 <hal_usart_is_enabled>
   b55ba:	e7f2      	b.n	b55a2 <pinAvailable+0x5a>
   b55bc:	2003e71c 	.word	0x2003e71c
   b55c0:	2003e720 	.word	0x2003e720

000b55c4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b55c4:	2823      	cmp	r0, #35	; 0x23
{
   b55c6:	b538      	push	{r3, r4, r5, lr}
   b55c8:	4604      	mov	r4, r0
   b55ca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b55cc:	d80a      	bhi.n	b55e4 <pinMode+0x20>
   b55ce:	29ff      	cmp	r1, #255	; 0xff
   b55d0:	d008      	beq.n	b55e4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b55d2:	f7ff ffb9 	bl	b5548 <pinAvailable>
   b55d6:	b128      	cbz	r0, b55e4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b55d8:	4629      	mov	r1, r5
   b55da:	4620      	mov	r0, r4
}
   b55dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b55e0:	f7fe bdf0 	b.w	b41c4 <HAL_Pin_Mode>
}
   b55e4:	bd38      	pop	{r3, r4, r5, pc}

000b55e6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b55e6:	280d      	cmp	r0, #13
{
   b55e8:	b510      	push	{r4, lr}
   b55ea:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b55ec:	bf9c      	itt	ls
   b55ee:	340e      	addls	r4, #14
   b55f0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b55f2:	4620      	mov	r0, r4
   b55f4:	f7ff ffa8 	bl	b5548 <pinAvailable>
   b55f8:	b150      	cbz	r0, b5610 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b55fa:	2103      	movs	r1, #3
   b55fc:	4620      	mov	r0, r4
   b55fe:	f7fe fdd9 	bl	b41b4 <HAL_Validate_Pin_Function>
   b5602:	2803      	cmp	r0, #3
   b5604:	d104      	bne.n	b5610 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5606:	4620      	mov	r0, r4
}
   b5608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b560c:	f7fe bde2 	b.w	b41d4 <hal_adc_read>
}
   b5610:	2000      	movs	r0, #0
   b5612:	bd10      	pop	{r4, pc}

000b5614 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5614:	4770      	bx	lr
	...

000b5618 <_Z17acquireWireBufferv>:
{
   b5618:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b561a:	2520      	movs	r5, #32
   b561c:	2314      	movs	r3, #20
{
   b561e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5620:	6003      	str	r3, [r0, #0]
   b5622:	6085      	str	r5, [r0, #8]
   b5624:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5626:	4906      	ldr	r1, [pc, #24]	; (b5640 <_Z17acquireWireBufferv+0x28>)
   b5628:	4628      	mov	r0, r5
   b562a:	f000 f86f 	bl	b570c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b562e:	4904      	ldr	r1, [pc, #16]	; (b5640 <_Z17acquireWireBufferv+0x28>)
	};
   b5630:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5632:	4628      	mov	r0, r5
   b5634:	f000 f86a 	bl	b570c <_ZnajRKSt9nothrow_t>
	};
   b5638:	60e0      	str	r0, [r4, #12]
}
   b563a:	4620      	mov	r0, r4
   b563c:	bd38      	pop	{r3, r4, r5, pc}
   b563e:	bf00      	nop
   b5640:	000b66a4 	.word	0x000b66a4

000b5644 <_Z19__fetch_global_Wirev>:
{
   b5644:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5646:	4d0e      	ldr	r5, [pc, #56]	; (b5680 <_Z19__fetch_global_Wirev+0x3c>)
   b5648:	7829      	ldrb	r1, [r5, #0]
   b564a:	f3bf 8f5b 	dmb	ish
   b564e:	f011 0401 	ands.w	r4, r1, #1
{
   b5652:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5654:	d111      	bne.n	b567a <_Z19__fetch_global_Wirev+0x36>
   b5656:	4628      	mov	r0, r5
   b5658:	f7fe fd23 	bl	b40a2 <__cxa_guard_acquire>
   b565c:	b168      	cbz	r0, b567a <_Z19__fetch_global_Wirev+0x36>
   b565e:	a801      	add	r0, sp, #4
   b5660:	f7ff ffda 	bl	b5618 <_Z17acquireWireBufferv>
   b5664:	aa01      	add	r2, sp, #4
   b5666:	4621      	mov	r1, r4
   b5668:	4806      	ldr	r0, [pc, #24]	; (b5684 <_Z19__fetch_global_Wirev+0x40>)
   b566a:	f7ff faff 	bl	b4c6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b566e:	4628      	mov	r0, r5
   b5670:	f7fe fd1c 	bl	b40ac <__cxa_guard_release>
   b5674:	4804      	ldr	r0, [pc, #16]	; (b5688 <_Z19__fetch_global_Wirev+0x44>)
   b5676:	f000 fe65 	bl	b6344 <atexit>
	return wire;
}
   b567a:	4802      	ldr	r0, [pc, #8]	; (b5684 <_Z19__fetch_global_Wirev+0x40>)
   b567c:	b007      	add	sp, #28
   b567e:	bd30      	pop	{r4, r5, pc}
   b5680:	2003e72c 	.word	0x2003e72c
   b5684:	2003e730 	.word	0x2003e730
   b5688:	000b5615 	.word	0x000b5615

000b568c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b568c:	4770      	bx	lr
	...

000b5690 <_Z20acquireSerial1Bufferv>:
{
   b5690:	b538      	push	{r3, r4, r5, lr}
   b5692:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5694:	2514      	movs	r5, #20
   b5696:	462a      	mov	r2, r5
   b5698:	2100      	movs	r1, #0
   b569a:	f000 fe67 	bl	b636c <memset>
   b569e:	8025      	strh	r5, [r4, #0]
   b56a0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56a2:	4907      	ldr	r1, [pc, #28]	; (b56c0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b56a4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56a6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b56a8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56aa:	f000 f82f 	bl	b570c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56ae:	4904      	ldr	r1, [pc, #16]	; (b56c0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b56b0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56b2:	4628      	mov	r0, r5
   b56b4:	f000 f82a 	bl	b570c <_ZnajRKSt9nothrow_t>
    };
   b56b8:	60e0      	str	r0, [r4, #12]
}
   b56ba:	4620      	mov	r0, r4
   b56bc:	bd38      	pop	{r3, r4, r5, pc}
   b56be:	bf00      	nop
   b56c0:	000b66a4 	.word	0x000b66a4

000b56c4 <_Z22__fetch_global_Serial1v>:
{
   b56c4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b56c6:	4d0e      	ldr	r5, [pc, #56]	; (b5700 <_Z22__fetch_global_Serial1v+0x3c>)
   b56c8:	7829      	ldrb	r1, [r5, #0]
   b56ca:	f3bf 8f5b 	dmb	ish
   b56ce:	f011 0401 	ands.w	r4, r1, #1
{
   b56d2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b56d4:	d111      	bne.n	b56fa <_Z22__fetch_global_Serial1v+0x36>
   b56d6:	4628      	mov	r0, r5
   b56d8:	f7fe fce3 	bl	b40a2 <__cxa_guard_acquire>
   b56dc:	b168      	cbz	r0, b56fa <_Z22__fetch_global_Serial1v+0x36>
   b56de:	a801      	add	r0, sp, #4
   b56e0:	f7ff ffd6 	bl	b5690 <_Z20acquireSerial1Bufferv>
   b56e4:	aa01      	add	r2, sp, #4
   b56e6:	4621      	mov	r1, r4
   b56e8:	4806      	ldr	r0, [pc, #24]	; (b5704 <_Z22__fetch_global_Serial1v+0x40>)
   b56ea:	f7ff fd89 	bl	b5200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b56ee:	4628      	mov	r0, r5
   b56f0:	f7fe fcdc 	bl	b40ac <__cxa_guard_release>
   b56f4:	4804      	ldr	r0, [pc, #16]	; (b5708 <_Z22__fetch_global_Serial1v+0x44>)
   b56f6:	f000 fe25 	bl	b6344 <atexit>
    return serial1;
}
   b56fa:	4802      	ldr	r0, [pc, #8]	; (b5704 <_Z22__fetch_global_Serial1v+0x40>)
   b56fc:	b007      	add	sp, #28
   b56fe:	bd30      	pop	{r4, r5, pc}
   b5700:	2003e744 	.word	0x2003e744
   b5704:	2003e748 	.word	0x2003e748
   b5708:	000b568d 	.word	0x000b568d

000b570c <_ZnajRKSt9nothrow_t>:
   b570c:	f7fe bcc5 	b.w	b409a <_Znaj>

000b5710 <_ZSt25__throw_bad_function_callv>:
   b5710:	b508      	push	{r3, lr}
   b5712:	f7fe fef3 	bl	b44fc <abort>
	...

000b5718 <__aeabi_drsub>:
   b5718:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b571c:	e002      	b.n	b5724 <__adddf3>
   b571e:	bf00      	nop

000b5720 <__aeabi_dsub>:
   b5720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5724 <__adddf3>:
   b5724:	b530      	push	{r4, r5, lr}
   b5726:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b572a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b572e:	ea94 0f05 	teq	r4, r5
   b5732:	bf08      	it	eq
   b5734:	ea90 0f02 	teqeq	r0, r2
   b5738:	bf1f      	itttt	ne
   b573a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b573e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5742:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5746:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b574a:	f000 80e2 	beq.w	b5912 <__adddf3+0x1ee>
   b574e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5752:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5756:	bfb8      	it	lt
   b5758:	426d      	neglt	r5, r5
   b575a:	dd0c      	ble.n	b5776 <__adddf3+0x52>
   b575c:	442c      	add	r4, r5
   b575e:	ea80 0202 	eor.w	r2, r0, r2
   b5762:	ea81 0303 	eor.w	r3, r1, r3
   b5766:	ea82 0000 	eor.w	r0, r2, r0
   b576a:	ea83 0101 	eor.w	r1, r3, r1
   b576e:	ea80 0202 	eor.w	r2, r0, r2
   b5772:	ea81 0303 	eor.w	r3, r1, r3
   b5776:	2d36      	cmp	r5, #54	; 0x36
   b5778:	bf88      	it	hi
   b577a:	bd30      	pophi	{r4, r5, pc}
   b577c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5780:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5784:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5788:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b578c:	d002      	beq.n	b5794 <__adddf3+0x70>
   b578e:	4240      	negs	r0, r0
   b5790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5794:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5798:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b579c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b57a0:	d002      	beq.n	b57a8 <__adddf3+0x84>
   b57a2:	4252      	negs	r2, r2
   b57a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b57a8:	ea94 0f05 	teq	r4, r5
   b57ac:	f000 80a7 	beq.w	b58fe <__adddf3+0x1da>
   b57b0:	f1a4 0401 	sub.w	r4, r4, #1
   b57b4:	f1d5 0e20 	rsbs	lr, r5, #32
   b57b8:	db0d      	blt.n	b57d6 <__adddf3+0xb2>
   b57ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   b57be:	fa22 f205 	lsr.w	r2, r2, r5
   b57c2:	1880      	adds	r0, r0, r2
   b57c4:	f141 0100 	adc.w	r1, r1, #0
   b57c8:	fa03 f20e 	lsl.w	r2, r3, lr
   b57cc:	1880      	adds	r0, r0, r2
   b57ce:	fa43 f305 	asr.w	r3, r3, r5
   b57d2:	4159      	adcs	r1, r3
   b57d4:	e00e      	b.n	b57f4 <__adddf3+0xd0>
   b57d6:	f1a5 0520 	sub.w	r5, r5, #32
   b57da:	f10e 0e20 	add.w	lr, lr, #32
   b57de:	2a01      	cmp	r2, #1
   b57e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b57e4:	bf28      	it	cs
   b57e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b57ea:	fa43 f305 	asr.w	r3, r3, r5
   b57ee:	18c0      	adds	r0, r0, r3
   b57f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b57f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b57f8:	d507      	bpl.n	b580a <__adddf3+0xe6>
   b57fa:	f04f 0e00 	mov.w	lr, #0
   b57fe:	f1dc 0c00 	rsbs	ip, ip, #0
   b5802:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5806:	eb6e 0101 	sbc.w	r1, lr, r1
   b580a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b580e:	d31b      	bcc.n	b5848 <__adddf3+0x124>
   b5810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5814:	d30c      	bcc.n	b5830 <__adddf3+0x10c>
   b5816:	0849      	lsrs	r1, r1, #1
   b5818:	ea5f 0030 	movs.w	r0, r0, rrx
   b581c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5820:	f104 0401 	add.w	r4, r4, #1
   b5824:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5828:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b582c:	f080 809a 	bcs.w	b5964 <__adddf3+0x240>
   b5830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5834:	bf08      	it	eq
   b5836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b583a:	f150 0000 	adcs.w	r0, r0, #0
   b583e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5842:	ea41 0105 	orr.w	r1, r1, r5
   b5846:	bd30      	pop	{r4, r5, pc}
   b5848:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b584c:	4140      	adcs	r0, r0
   b584e:	eb41 0101 	adc.w	r1, r1, r1
   b5852:	3c01      	subs	r4, #1
   b5854:	bf28      	it	cs
   b5856:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b585a:	d2e9      	bcs.n	b5830 <__adddf3+0x10c>
   b585c:	f091 0f00 	teq	r1, #0
   b5860:	bf04      	itt	eq
   b5862:	4601      	moveq	r1, r0
   b5864:	2000      	moveq	r0, #0
   b5866:	fab1 f381 	clz	r3, r1
   b586a:	bf08      	it	eq
   b586c:	3320      	addeq	r3, #32
   b586e:	f1a3 030b 	sub.w	r3, r3, #11
   b5872:	f1b3 0220 	subs.w	r2, r3, #32
   b5876:	da0c      	bge.n	b5892 <__adddf3+0x16e>
   b5878:	320c      	adds	r2, #12
   b587a:	dd08      	ble.n	b588e <__adddf3+0x16a>
   b587c:	f102 0c14 	add.w	ip, r2, #20
   b5880:	f1c2 020c 	rsb	r2, r2, #12
   b5884:	fa01 f00c 	lsl.w	r0, r1, ip
   b5888:	fa21 f102 	lsr.w	r1, r1, r2
   b588c:	e00c      	b.n	b58a8 <__adddf3+0x184>
   b588e:	f102 0214 	add.w	r2, r2, #20
   b5892:	bfd8      	it	le
   b5894:	f1c2 0c20 	rsble	ip, r2, #32
   b5898:	fa01 f102 	lsl.w	r1, r1, r2
   b589c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b58a0:	bfdc      	itt	le
   b58a2:	ea41 010c 	orrle.w	r1, r1, ip
   b58a6:	4090      	lslle	r0, r2
   b58a8:	1ae4      	subs	r4, r4, r3
   b58aa:	bfa2      	ittt	ge
   b58ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b58b0:	4329      	orrge	r1, r5
   b58b2:	bd30      	popge	{r4, r5, pc}
   b58b4:	ea6f 0404 	mvn.w	r4, r4
   b58b8:	3c1f      	subs	r4, #31
   b58ba:	da1c      	bge.n	b58f6 <__adddf3+0x1d2>
   b58bc:	340c      	adds	r4, #12
   b58be:	dc0e      	bgt.n	b58de <__adddf3+0x1ba>
   b58c0:	f104 0414 	add.w	r4, r4, #20
   b58c4:	f1c4 0220 	rsb	r2, r4, #32
   b58c8:	fa20 f004 	lsr.w	r0, r0, r4
   b58cc:	fa01 f302 	lsl.w	r3, r1, r2
   b58d0:	ea40 0003 	orr.w	r0, r0, r3
   b58d4:	fa21 f304 	lsr.w	r3, r1, r4
   b58d8:	ea45 0103 	orr.w	r1, r5, r3
   b58dc:	bd30      	pop	{r4, r5, pc}
   b58de:	f1c4 040c 	rsb	r4, r4, #12
   b58e2:	f1c4 0220 	rsb	r2, r4, #32
   b58e6:	fa20 f002 	lsr.w	r0, r0, r2
   b58ea:	fa01 f304 	lsl.w	r3, r1, r4
   b58ee:	ea40 0003 	orr.w	r0, r0, r3
   b58f2:	4629      	mov	r1, r5
   b58f4:	bd30      	pop	{r4, r5, pc}
   b58f6:	fa21 f004 	lsr.w	r0, r1, r4
   b58fa:	4629      	mov	r1, r5
   b58fc:	bd30      	pop	{r4, r5, pc}
   b58fe:	f094 0f00 	teq	r4, #0
   b5902:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5906:	bf06      	itte	eq
   b5908:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b590c:	3401      	addeq	r4, #1
   b590e:	3d01      	subne	r5, #1
   b5910:	e74e      	b.n	b57b0 <__adddf3+0x8c>
   b5912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5916:	bf18      	it	ne
   b5918:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b591c:	d029      	beq.n	b5972 <__adddf3+0x24e>
   b591e:	ea94 0f05 	teq	r4, r5
   b5922:	bf08      	it	eq
   b5924:	ea90 0f02 	teqeq	r0, r2
   b5928:	d005      	beq.n	b5936 <__adddf3+0x212>
   b592a:	ea54 0c00 	orrs.w	ip, r4, r0
   b592e:	bf04      	itt	eq
   b5930:	4619      	moveq	r1, r3
   b5932:	4610      	moveq	r0, r2
   b5934:	bd30      	pop	{r4, r5, pc}
   b5936:	ea91 0f03 	teq	r1, r3
   b593a:	bf1e      	ittt	ne
   b593c:	2100      	movne	r1, #0
   b593e:	2000      	movne	r0, #0
   b5940:	bd30      	popne	{r4, r5, pc}
   b5942:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5946:	d105      	bne.n	b5954 <__adddf3+0x230>
   b5948:	0040      	lsls	r0, r0, #1
   b594a:	4149      	adcs	r1, r1
   b594c:	bf28      	it	cs
   b594e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5952:	bd30      	pop	{r4, r5, pc}
   b5954:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5958:	bf3c      	itt	cc
   b595a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b595e:	bd30      	popcc	{r4, r5, pc}
   b5960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5964:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b596c:	f04f 0000 	mov.w	r0, #0
   b5970:	bd30      	pop	{r4, r5, pc}
   b5972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5976:	bf1a      	itte	ne
   b5978:	4619      	movne	r1, r3
   b597a:	4610      	movne	r0, r2
   b597c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5980:	bf1c      	itt	ne
   b5982:	460b      	movne	r3, r1
   b5984:	4602      	movne	r2, r0
   b5986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b598a:	bf06      	itte	eq
   b598c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5990:	ea91 0f03 	teqeq	r1, r3
   b5994:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5998:	bd30      	pop	{r4, r5, pc}
   b599a:	bf00      	nop

000b599c <__aeabi_ui2d>:
   b599c:	f090 0f00 	teq	r0, #0
   b59a0:	bf04      	itt	eq
   b59a2:	2100      	moveq	r1, #0
   b59a4:	4770      	bxeq	lr
   b59a6:	b530      	push	{r4, r5, lr}
   b59a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b59ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b59b0:	f04f 0500 	mov.w	r5, #0
   b59b4:	f04f 0100 	mov.w	r1, #0
   b59b8:	e750      	b.n	b585c <__adddf3+0x138>
   b59ba:	bf00      	nop

000b59bc <__aeabi_i2d>:
   b59bc:	f090 0f00 	teq	r0, #0
   b59c0:	bf04      	itt	eq
   b59c2:	2100      	moveq	r1, #0
   b59c4:	4770      	bxeq	lr
   b59c6:	b530      	push	{r4, r5, lr}
   b59c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b59cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b59d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b59d4:	bf48      	it	mi
   b59d6:	4240      	negmi	r0, r0
   b59d8:	f04f 0100 	mov.w	r1, #0
   b59dc:	e73e      	b.n	b585c <__adddf3+0x138>
   b59de:	bf00      	nop

000b59e0 <__aeabi_f2d>:
   b59e0:	0042      	lsls	r2, r0, #1
   b59e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b59e6:	ea4f 0131 	mov.w	r1, r1, rrx
   b59ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b59ee:	bf1f      	itttt	ne
   b59f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b59f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b59f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b59fc:	4770      	bxne	lr
   b59fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5a02:	bf08      	it	eq
   b5a04:	4770      	bxeq	lr
   b5a06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5a0a:	bf04      	itt	eq
   b5a0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5a10:	4770      	bxeq	lr
   b5a12:	b530      	push	{r4, r5, lr}
   b5a14:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5a20:	e71c      	b.n	b585c <__adddf3+0x138>
   b5a22:	bf00      	nop

000b5a24 <__aeabi_ul2d>:
   b5a24:	ea50 0201 	orrs.w	r2, r0, r1
   b5a28:	bf08      	it	eq
   b5a2a:	4770      	bxeq	lr
   b5a2c:	b530      	push	{r4, r5, lr}
   b5a2e:	f04f 0500 	mov.w	r5, #0
   b5a32:	e00a      	b.n	b5a4a <__aeabi_l2d+0x16>

000b5a34 <__aeabi_l2d>:
   b5a34:	ea50 0201 	orrs.w	r2, r0, r1
   b5a38:	bf08      	it	eq
   b5a3a:	4770      	bxeq	lr
   b5a3c:	b530      	push	{r4, r5, lr}
   b5a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5a42:	d502      	bpl.n	b5a4a <__aeabi_l2d+0x16>
   b5a44:	4240      	negs	r0, r0
   b5a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5a56:	f43f aed8 	beq.w	b580a <__adddf3+0xe6>
   b5a5a:	f04f 0203 	mov.w	r2, #3
   b5a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5a62:	bf18      	it	ne
   b5a64:	3203      	addne	r2, #3
   b5a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5a6a:	bf18      	it	ne
   b5a6c:	3203      	addne	r2, #3
   b5a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5a72:	f1c2 0320 	rsb	r3, r2, #32
   b5a76:	fa00 fc03 	lsl.w	ip, r0, r3
   b5a7a:	fa20 f002 	lsr.w	r0, r0, r2
   b5a7e:	fa01 fe03 	lsl.w	lr, r1, r3
   b5a82:	ea40 000e 	orr.w	r0, r0, lr
   b5a86:	fa21 f102 	lsr.w	r1, r1, r2
   b5a8a:	4414      	add	r4, r2
   b5a8c:	e6bd      	b.n	b580a <__adddf3+0xe6>
   b5a8e:	bf00      	nop

000b5a90 <__aeabi_dmul>:
   b5a90:	b570      	push	{r4, r5, r6, lr}
   b5a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5a9e:	bf1d      	ittte	ne
   b5aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5aa4:	ea94 0f0c 	teqne	r4, ip
   b5aa8:	ea95 0f0c 	teqne	r5, ip
   b5aac:	f000 f8de 	bleq	b5c6c <__aeabi_dmul+0x1dc>
   b5ab0:	442c      	add	r4, r5
   b5ab2:	ea81 0603 	eor.w	r6, r1, r3
   b5ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5ac2:	bf18      	it	ne
   b5ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5ad0:	d038      	beq.n	b5b44 <__aeabi_dmul+0xb4>
   b5ad2:	fba0 ce02 	umull	ip, lr, r0, r2
   b5ad6:	f04f 0500 	mov.w	r5, #0
   b5ada:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5ae6:	f04f 0600 	mov.w	r6, #0
   b5aea:	fbe1 5603 	umlal	r5, r6, r1, r3
   b5aee:	f09c 0f00 	teq	ip, #0
   b5af2:	bf18      	it	ne
   b5af4:	f04e 0e01 	orrne.w	lr, lr, #1
   b5af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b5afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5b04:	d204      	bcs.n	b5b10 <__aeabi_dmul+0x80>
   b5b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b5b0a:	416d      	adcs	r5, r5
   b5b0c:	eb46 0606 	adc.w	r6, r6, r6
   b5b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b5b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5b28:	bf88      	it	hi
   b5b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5b2e:	d81e      	bhi.n	b5b6e <__aeabi_dmul+0xde>
   b5b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5b34:	bf08      	it	eq
   b5b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b5b3a:	f150 0000 	adcs.w	r0, r0, #0
   b5b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5b42:	bd70      	pop	{r4, r5, r6, pc}
   b5b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5b48:	ea46 0101 	orr.w	r1, r6, r1
   b5b4c:	ea40 0002 	orr.w	r0, r0, r2
   b5b50:	ea81 0103 	eor.w	r1, r1, r3
   b5b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5b58:	bfc2      	ittt	gt
   b5b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5b62:	bd70      	popgt	{r4, r5, r6, pc}
   b5b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5b68:	f04f 0e00 	mov.w	lr, #0
   b5b6c:	3c01      	subs	r4, #1
   b5b6e:	f300 80ab 	bgt.w	b5cc8 <__aeabi_dmul+0x238>
   b5b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5b76:	bfde      	ittt	le
   b5b78:	2000      	movle	r0, #0
   b5b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5b7e:	bd70      	pople	{r4, r5, r6, pc}
   b5b80:	f1c4 0400 	rsb	r4, r4, #0
   b5b84:	3c20      	subs	r4, #32
   b5b86:	da35      	bge.n	b5bf4 <__aeabi_dmul+0x164>
   b5b88:	340c      	adds	r4, #12
   b5b8a:	dc1b      	bgt.n	b5bc4 <__aeabi_dmul+0x134>
   b5b8c:	f104 0414 	add.w	r4, r4, #20
   b5b90:	f1c4 0520 	rsb	r5, r4, #32
   b5b94:	fa00 f305 	lsl.w	r3, r0, r5
   b5b98:	fa20 f004 	lsr.w	r0, r0, r4
   b5b9c:	fa01 f205 	lsl.w	r2, r1, r5
   b5ba0:	ea40 0002 	orr.w	r0, r0, r2
   b5ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5bb0:	fa21 f604 	lsr.w	r6, r1, r4
   b5bb4:	eb42 0106 	adc.w	r1, r2, r6
   b5bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5bbc:	bf08      	it	eq
   b5bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5bc2:	bd70      	pop	{r4, r5, r6, pc}
   b5bc4:	f1c4 040c 	rsb	r4, r4, #12
   b5bc8:	f1c4 0520 	rsb	r5, r4, #32
   b5bcc:	fa00 f304 	lsl.w	r3, r0, r4
   b5bd0:	fa20 f005 	lsr.w	r0, r0, r5
   b5bd4:	fa01 f204 	lsl.w	r2, r1, r4
   b5bd8:	ea40 0002 	orr.w	r0, r0, r2
   b5bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5be4:	f141 0100 	adc.w	r1, r1, #0
   b5be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5bec:	bf08      	it	eq
   b5bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5bf2:	bd70      	pop	{r4, r5, r6, pc}
   b5bf4:	f1c4 0520 	rsb	r5, r4, #32
   b5bf8:	fa00 f205 	lsl.w	r2, r0, r5
   b5bfc:	ea4e 0e02 	orr.w	lr, lr, r2
   b5c00:	fa20 f304 	lsr.w	r3, r0, r4
   b5c04:	fa01 f205 	lsl.w	r2, r1, r5
   b5c08:	ea43 0302 	orr.w	r3, r3, r2
   b5c0c:	fa21 f004 	lsr.w	r0, r1, r4
   b5c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5c14:	fa21 f204 	lsr.w	r2, r1, r4
   b5c18:	ea20 0002 	bic.w	r0, r0, r2
   b5c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5c24:	bf08      	it	eq
   b5c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5c2a:	bd70      	pop	{r4, r5, r6, pc}
   b5c2c:	f094 0f00 	teq	r4, #0
   b5c30:	d10f      	bne.n	b5c52 <__aeabi_dmul+0x1c2>
   b5c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5c36:	0040      	lsls	r0, r0, #1
   b5c38:	eb41 0101 	adc.w	r1, r1, r1
   b5c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5c40:	bf08      	it	eq
   b5c42:	3c01      	subeq	r4, #1
   b5c44:	d0f7      	beq.n	b5c36 <__aeabi_dmul+0x1a6>
   b5c46:	ea41 0106 	orr.w	r1, r1, r6
   b5c4a:	f095 0f00 	teq	r5, #0
   b5c4e:	bf18      	it	ne
   b5c50:	4770      	bxne	lr
   b5c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5c56:	0052      	lsls	r2, r2, #1
   b5c58:	eb43 0303 	adc.w	r3, r3, r3
   b5c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5c60:	bf08      	it	eq
   b5c62:	3d01      	subeq	r5, #1
   b5c64:	d0f7      	beq.n	b5c56 <__aeabi_dmul+0x1c6>
   b5c66:	ea43 0306 	orr.w	r3, r3, r6
   b5c6a:	4770      	bx	lr
   b5c6c:	ea94 0f0c 	teq	r4, ip
   b5c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5c74:	bf18      	it	ne
   b5c76:	ea95 0f0c 	teqne	r5, ip
   b5c7a:	d00c      	beq.n	b5c96 <__aeabi_dmul+0x206>
   b5c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c80:	bf18      	it	ne
   b5c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5c86:	d1d1      	bne.n	b5c2c <__aeabi_dmul+0x19c>
   b5c88:	ea81 0103 	eor.w	r1, r1, r3
   b5c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5c90:	f04f 0000 	mov.w	r0, #0
   b5c94:	bd70      	pop	{r4, r5, r6, pc}
   b5c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c9a:	bf06      	itte	eq
   b5c9c:	4610      	moveq	r0, r2
   b5c9e:	4619      	moveq	r1, r3
   b5ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5ca4:	d019      	beq.n	b5cda <__aeabi_dmul+0x24a>
   b5ca6:	ea94 0f0c 	teq	r4, ip
   b5caa:	d102      	bne.n	b5cb2 <__aeabi_dmul+0x222>
   b5cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5cb0:	d113      	bne.n	b5cda <__aeabi_dmul+0x24a>
   b5cb2:	ea95 0f0c 	teq	r5, ip
   b5cb6:	d105      	bne.n	b5cc4 <__aeabi_dmul+0x234>
   b5cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5cbc:	bf1c      	itt	ne
   b5cbe:	4610      	movne	r0, r2
   b5cc0:	4619      	movne	r1, r3
   b5cc2:	d10a      	bne.n	b5cda <__aeabi_dmul+0x24a>
   b5cc4:	ea81 0103 	eor.w	r1, r1, r3
   b5cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5cd4:	f04f 0000 	mov.w	r0, #0
   b5cd8:	bd70      	pop	{r4, r5, r6, pc}
   b5cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5ce2:	bd70      	pop	{r4, r5, r6, pc}

000b5ce4 <__aeabi_ddiv>:
   b5ce4:	b570      	push	{r4, r5, r6, lr}
   b5ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5cf2:	bf1d      	ittte	ne
   b5cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5cf8:	ea94 0f0c 	teqne	r4, ip
   b5cfc:	ea95 0f0c 	teqne	r5, ip
   b5d00:	f000 f8a7 	bleq	b5e52 <__aeabi_ddiv+0x16e>
   b5d04:	eba4 0405 	sub.w	r4, r4, r5
   b5d08:	ea81 0e03 	eor.w	lr, r1, r3
   b5d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5d14:	f000 8088 	beq.w	b5e28 <__aeabi_ddiv+0x144>
   b5d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5d3c:	429d      	cmp	r5, r3
   b5d3e:	bf08      	it	eq
   b5d40:	4296      	cmpeq	r6, r2
   b5d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5d4a:	d202      	bcs.n	b5d52 <__aeabi_ddiv+0x6e>
   b5d4c:	085b      	lsrs	r3, r3, #1
   b5d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d52:	1ab6      	subs	r6, r6, r2
   b5d54:	eb65 0503 	sbc.w	r5, r5, r3
   b5d58:	085b      	lsrs	r3, r3, #1
   b5d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5d66:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d6e:	bf22      	ittt	cs
   b5d70:	1ab6      	subcs	r6, r6, r2
   b5d72:	4675      	movcs	r5, lr
   b5d74:	ea40 000c 	orrcs.w	r0, r0, ip
   b5d78:	085b      	lsrs	r3, r3, #1
   b5d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d7e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d82:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d86:	bf22      	ittt	cs
   b5d88:	1ab6      	subcs	r6, r6, r2
   b5d8a:	4675      	movcs	r5, lr
   b5d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5d90:	085b      	lsrs	r3, r3, #1
   b5d92:	ea4f 0232 	mov.w	r2, r2, rrx
   b5d96:	ebb6 0e02 	subs.w	lr, r6, r2
   b5d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5d9e:	bf22      	ittt	cs
   b5da0:	1ab6      	subcs	r6, r6, r2
   b5da2:	4675      	movcs	r5, lr
   b5da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5da8:	085b      	lsrs	r3, r3, #1
   b5daa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5dae:	ebb6 0e02 	subs.w	lr, r6, r2
   b5db2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5db6:	bf22      	ittt	cs
   b5db8:	1ab6      	subcs	r6, r6, r2
   b5dba:	4675      	movcs	r5, lr
   b5dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5dc0:	ea55 0e06 	orrs.w	lr, r5, r6
   b5dc4:	d018      	beq.n	b5df8 <__aeabi_ddiv+0x114>
   b5dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5de2:	d1c0      	bne.n	b5d66 <__aeabi_ddiv+0x82>
   b5de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5de8:	d10b      	bne.n	b5e02 <__aeabi_ddiv+0x11e>
   b5dea:	ea41 0100 	orr.w	r1, r1, r0
   b5dee:	f04f 0000 	mov.w	r0, #0
   b5df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5df6:	e7b6      	b.n	b5d66 <__aeabi_ddiv+0x82>
   b5df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5dfc:	bf04      	itt	eq
   b5dfe:	4301      	orreq	r1, r0
   b5e00:	2000      	moveq	r0, #0
   b5e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5e06:	bf88      	it	hi
   b5e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5e0c:	f63f aeaf 	bhi.w	b5b6e <__aeabi_dmul+0xde>
   b5e10:	ebb5 0c03 	subs.w	ip, r5, r3
   b5e14:	bf04      	itt	eq
   b5e16:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5e1e:	f150 0000 	adcs.w	r0, r0, #0
   b5e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5e26:	bd70      	pop	{r4, r5, r6, pc}
   b5e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5e34:	bfc2      	ittt	gt
   b5e36:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5e3e:	bd70      	popgt	{r4, r5, r6, pc}
   b5e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5e44:	f04f 0e00 	mov.w	lr, #0
   b5e48:	3c01      	subs	r4, #1
   b5e4a:	e690      	b.n	b5b6e <__aeabi_dmul+0xde>
   b5e4c:	ea45 0e06 	orr.w	lr, r5, r6
   b5e50:	e68d      	b.n	b5b6e <__aeabi_dmul+0xde>
   b5e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5e56:	ea94 0f0c 	teq	r4, ip
   b5e5a:	bf08      	it	eq
   b5e5c:	ea95 0f0c 	teqeq	r5, ip
   b5e60:	f43f af3b 	beq.w	b5cda <__aeabi_dmul+0x24a>
   b5e64:	ea94 0f0c 	teq	r4, ip
   b5e68:	d10a      	bne.n	b5e80 <__aeabi_ddiv+0x19c>
   b5e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5e6e:	f47f af34 	bne.w	b5cda <__aeabi_dmul+0x24a>
   b5e72:	ea95 0f0c 	teq	r5, ip
   b5e76:	f47f af25 	bne.w	b5cc4 <__aeabi_dmul+0x234>
   b5e7a:	4610      	mov	r0, r2
   b5e7c:	4619      	mov	r1, r3
   b5e7e:	e72c      	b.n	b5cda <__aeabi_dmul+0x24a>
   b5e80:	ea95 0f0c 	teq	r5, ip
   b5e84:	d106      	bne.n	b5e94 <__aeabi_ddiv+0x1b0>
   b5e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5e8a:	f43f aefd 	beq.w	b5c88 <__aeabi_dmul+0x1f8>
   b5e8e:	4610      	mov	r0, r2
   b5e90:	4619      	mov	r1, r3
   b5e92:	e722      	b.n	b5cda <__aeabi_dmul+0x24a>
   b5e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5e98:	bf18      	it	ne
   b5e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5e9e:	f47f aec5 	bne.w	b5c2c <__aeabi_dmul+0x19c>
   b5ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5ea6:	f47f af0d 	bne.w	b5cc4 <__aeabi_dmul+0x234>
   b5eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5eae:	f47f aeeb 	bne.w	b5c88 <__aeabi_dmul+0x1f8>
   b5eb2:	e712      	b.n	b5cda <__aeabi_dmul+0x24a>

000b5eb4 <__gedf2>:
   b5eb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b5eb8:	e006      	b.n	b5ec8 <__cmpdf2+0x4>
   b5eba:	bf00      	nop

000b5ebc <__ledf2>:
   b5ebc:	f04f 0c01 	mov.w	ip, #1
   b5ec0:	e002      	b.n	b5ec8 <__cmpdf2+0x4>
   b5ec2:	bf00      	nop

000b5ec4 <__cmpdf2>:
   b5ec4:	f04f 0c01 	mov.w	ip, #1
   b5ec8:	f84d cd04 	str.w	ip, [sp, #-4]!
   b5ecc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5ed8:	bf18      	it	ne
   b5eda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b5ede:	d01b      	beq.n	b5f18 <__cmpdf2+0x54>
   b5ee0:	b001      	add	sp, #4
   b5ee2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b5ee6:	bf0c      	ite	eq
   b5ee8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b5eec:	ea91 0f03 	teqne	r1, r3
   b5ef0:	bf02      	ittt	eq
   b5ef2:	ea90 0f02 	teqeq	r0, r2
   b5ef6:	2000      	moveq	r0, #0
   b5ef8:	4770      	bxeq	lr
   b5efa:	f110 0f00 	cmn.w	r0, #0
   b5efe:	ea91 0f03 	teq	r1, r3
   b5f02:	bf58      	it	pl
   b5f04:	4299      	cmppl	r1, r3
   b5f06:	bf08      	it	eq
   b5f08:	4290      	cmpeq	r0, r2
   b5f0a:	bf2c      	ite	cs
   b5f0c:	17d8      	asrcs	r0, r3, #31
   b5f0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b5f12:	f040 0001 	orr.w	r0, r0, #1
   b5f16:	4770      	bx	lr
   b5f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5f20:	d102      	bne.n	b5f28 <__cmpdf2+0x64>
   b5f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b5f26:	d107      	bne.n	b5f38 <__cmpdf2+0x74>
   b5f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5f30:	d1d6      	bne.n	b5ee0 <__cmpdf2+0x1c>
   b5f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b5f36:	d0d3      	beq.n	b5ee0 <__cmpdf2+0x1c>
   b5f38:	f85d 0b04 	ldr.w	r0, [sp], #4
   b5f3c:	4770      	bx	lr
   b5f3e:	bf00      	nop

000b5f40 <__aeabi_cdrcmple>:
   b5f40:	4684      	mov	ip, r0
   b5f42:	4610      	mov	r0, r2
   b5f44:	4662      	mov	r2, ip
   b5f46:	468c      	mov	ip, r1
   b5f48:	4619      	mov	r1, r3
   b5f4a:	4663      	mov	r3, ip
   b5f4c:	e000      	b.n	b5f50 <__aeabi_cdcmpeq>
   b5f4e:	bf00      	nop

000b5f50 <__aeabi_cdcmpeq>:
   b5f50:	b501      	push	{r0, lr}
   b5f52:	f7ff ffb7 	bl	b5ec4 <__cmpdf2>
   b5f56:	2800      	cmp	r0, #0
   b5f58:	bf48      	it	mi
   b5f5a:	f110 0f00 	cmnmi.w	r0, #0
   b5f5e:	bd01      	pop	{r0, pc}

000b5f60 <__aeabi_dcmpeq>:
   b5f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5f64:	f7ff fff4 	bl	b5f50 <__aeabi_cdcmpeq>
   b5f68:	bf0c      	ite	eq
   b5f6a:	2001      	moveq	r0, #1
   b5f6c:	2000      	movne	r0, #0
   b5f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   b5f72:	bf00      	nop

000b5f74 <__aeabi_dcmplt>:
   b5f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5f78:	f7ff ffea 	bl	b5f50 <__aeabi_cdcmpeq>
   b5f7c:	bf34      	ite	cc
   b5f7e:	2001      	movcc	r0, #1
   b5f80:	2000      	movcs	r0, #0
   b5f82:	f85d fb08 	ldr.w	pc, [sp], #8
   b5f86:	bf00      	nop

000b5f88 <__aeabi_dcmple>:
   b5f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5f8c:	f7ff ffe0 	bl	b5f50 <__aeabi_cdcmpeq>
   b5f90:	bf94      	ite	ls
   b5f92:	2001      	movls	r0, #1
   b5f94:	2000      	movhi	r0, #0
   b5f96:	f85d fb08 	ldr.w	pc, [sp], #8
   b5f9a:	bf00      	nop

000b5f9c <__aeabi_dcmpge>:
   b5f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5fa0:	f7ff ffce 	bl	b5f40 <__aeabi_cdrcmple>
   b5fa4:	bf94      	ite	ls
   b5fa6:	2001      	movls	r0, #1
   b5fa8:	2000      	movhi	r0, #0
   b5faa:	f85d fb08 	ldr.w	pc, [sp], #8
   b5fae:	bf00      	nop

000b5fb0 <__aeabi_dcmpgt>:
   b5fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5fb4:	f7ff ffc4 	bl	b5f40 <__aeabi_cdrcmple>
   b5fb8:	bf34      	ite	cc
   b5fba:	2001      	movcc	r0, #1
   b5fbc:	2000      	movcs	r0, #0
   b5fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   b5fc2:	bf00      	nop

000b5fc4 <__aeabi_d2uiz>:
   b5fc4:	004a      	lsls	r2, r1, #1
   b5fc6:	d211      	bcs.n	b5fec <__aeabi_d2uiz+0x28>
   b5fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b5fcc:	d211      	bcs.n	b5ff2 <__aeabi_d2uiz+0x2e>
   b5fce:	d50d      	bpl.n	b5fec <__aeabi_d2uiz+0x28>
   b5fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b5fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b5fd8:	d40e      	bmi.n	b5ff8 <__aeabi_d2uiz+0x34>
   b5fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b5fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b5fe6:	fa23 f002 	lsr.w	r0, r3, r2
   b5fea:	4770      	bx	lr
   b5fec:	f04f 0000 	mov.w	r0, #0
   b5ff0:	4770      	bx	lr
   b5ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b5ff6:	d102      	bne.n	b5ffe <__aeabi_d2uiz+0x3a>
   b5ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5ffc:	4770      	bx	lr
   b5ffe:	f04f 0000 	mov.w	r0, #0
   b6002:	4770      	bx	lr

000b6004 <__aeabi_uldivmod>:
   b6004:	b953      	cbnz	r3, b601c <__aeabi_uldivmod+0x18>
   b6006:	b94a      	cbnz	r2, b601c <__aeabi_uldivmod+0x18>
   b6008:	2900      	cmp	r1, #0
   b600a:	bf08      	it	eq
   b600c:	2800      	cmpeq	r0, #0
   b600e:	bf1c      	itt	ne
   b6010:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6014:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b6018:	f000 b992 	b.w	b6340 <__aeabi_idiv0>
   b601c:	f1ad 0c08 	sub.w	ip, sp, #8
   b6020:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b6024:	f000 f824 	bl	b6070 <__udivmoddi4>
   b6028:	f8dd e004 	ldr.w	lr, [sp, #4]
   b602c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6030:	b004      	add	sp, #16
   b6032:	4770      	bx	lr

000b6034 <__aeabi_d2ulz>:
   b6034:	b5d0      	push	{r4, r6, r7, lr}
   b6036:	4b0c      	ldr	r3, [pc, #48]	; (b6068 <__aeabi_d2ulz+0x34>)
   b6038:	2200      	movs	r2, #0
   b603a:	4606      	mov	r6, r0
   b603c:	460f      	mov	r7, r1
   b603e:	f7ff fd27 	bl	b5a90 <__aeabi_dmul>
   b6042:	f7ff ffbf 	bl	b5fc4 <__aeabi_d2uiz>
   b6046:	4604      	mov	r4, r0
   b6048:	f7ff fca8 	bl	b599c <__aeabi_ui2d>
   b604c:	4b07      	ldr	r3, [pc, #28]	; (b606c <__aeabi_d2ulz+0x38>)
   b604e:	2200      	movs	r2, #0
   b6050:	f7ff fd1e 	bl	b5a90 <__aeabi_dmul>
   b6054:	4602      	mov	r2, r0
   b6056:	460b      	mov	r3, r1
   b6058:	4630      	mov	r0, r6
   b605a:	4639      	mov	r1, r7
   b605c:	f7ff fb60 	bl	b5720 <__aeabi_dsub>
   b6060:	f7ff ffb0 	bl	b5fc4 <__aeabi_d2uiz>
   b6064:	4621      	mov	r1, r4
   b6066:	bdd0      	pop	{r4, r6, r7, pc}
   b6068:	3df00000 	.word	0x3df00000
   b606c:	41f00000 	.word	0x41f00000

000b6070 <__udivmoddi4>:
   b6070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6074:	9d08      	ldr	r5, [sp, #32]
   b6076:	4604      	mov	r4, r0
   b6078:	468e      	mov	lr, r1
   b607a:	2b00      	cmp	r3, #0
   b607c:	d14d      	bne.n	b611a <__udivmoddi4+0xaa>
   b607e:	428a      	cmp	r2, r1
   b6080:	4694      	mov	ip, r2
   b6082:	d969      	bls.n	b6158 <__udivmoddi4+0xe8>
   b6084:	fab2 f282 	clz	r2, r2
   b6088:	b152      	cbz	r2, b60a0 <__udivmoddi4+0x30>
   b608a:	fa01 f302 	lsl.w	r3, r1, r2
   b608e:	f1c2 0120 	rsb	r1, r2, #32
   b6092:	fa20 f101 	lsr.w	r1, r0, r1
   b6096:	fa0c fc02 	lsl.w	ip, ip, r2
   b609a:	ea41 0e03 	orr.w	lr, r1, r3
   b609e:	4094      	lsls	r4, r2
   b60a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b60a4:	0c21      	lsrs	r1, r4, #16
   b60a6:	fbbe f6f8 	udiv	r6, lr, r8
   b60aa:	fa1f f78c 	uxth.w	r7, ip
   b60ae:	fb08 e316 	mls	r3, r8, r6, lr
   b60b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b60b6:	fb06 f107 	mul.w	r1, r6, r7
   b60ba:	4299      	cmp	r1, r3
   b60bc:	d90a      	bls.n	b60d4 <__udivmoddi4+0x64>
   b60be:	eb1c 0303 	adds.w	r3, ip, r3
   b60c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b60c6:	f080 811f 	bcs.w	b6308 <__udivmoddi4+0x298>
   b60ca:	4299      	cmp	r1, r3
   b60cc:	f240 811c 	bls.w	b6308 <__udivmoddi4+0x298>
   b60d0:	3e02      	subs	r6, #2
   b60d2:	4463      	add	r3, ip
   b60d4:	1a5b      	subs	r3, r3, r1
   b60d6:	b2a4      	uxth	r4, r4
   b60d8:	fbb3 f0f8 	udiv	r0, r3, r8
   b60dc:	fb08 3310 	mls	r3, r8, r0, r3
   b60e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b60e4:	fb00 f707 	mul.w	r7, r0, r7
   b60e8:	42a7      	cmp	r7, r4
   b60ea:	d90a      	bls.n	b6102 <__udivmoddi4+0x92>
   b60ec:	eb1c 0404 	adds.w	r4, ip, r4
   b60f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b60f4:	f080 810a 	bcs.w	b630c <__udivmoddi4+0x29c>
   b60f8:	42a7      	cmp	r7, r4
   b60fa:	f240 8107 	bls.w	b630c <__udivmoddi4+0x29c>
   b60fe:	4464      	add	r4, ip
   b6100:	3802      	subs	r0, #2
   b6102:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b6106:	1be4      	subs	r4, r4, r7
   b6108:	2600      	movs	r6, #0
   b610a:	b11d      	cbz	r5, b6114 <__udivmoddi4+0xa4>
   b610c:	40d4      	lsrs	r4, r2
   b610e:	2300      	movs	r3, #0
   b6110:	e9c5 4300 	strd	r4, r3, [r5]
   b6114:	4631      	mov	r1, r6
   b6116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b611a:	428b      	cmp	r3, r1
   b611c:	d909      	bls.n	b6132 <__udivmoddi4+0xc2>
   b611e:	2d00      	cmp	r5, #0
   b6120:	f000 80ef 	beq.w	b6302 <__udivmoddi4+0x292>
   b6124:	2600      	movs	r6, #0
   b6126:	e9c5 0100 	strd	r0, r1, [r5]
   b612a:	4630      	mov	r0, r6
   b612c:	4631      	mov	r1, r6
   b612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6132:	fab3 f683 	clz	r6, r3
   b6136:	2e00      	cmp	r6, #0
   b6138:	d14a      	bne.n	b61d0 <__udivmoddi4+0x160>
   b613a:	428b      	cmp	r3, r1
   b613c:	d302      	bcc.n	b6144 <__udivmoddi4+0xd4>
   b613e:	4282      	cmp	r2, r0
   b6140:	f200 80f9 	bhi.w	b6336 <__udivmoddi4+0x2c6>
   b6144:	1a84      	subs	r4, r0, r2
   b6146:	eb61 0303 	sbc.w	r3, r1, r3
   b614a:	2001      	movs	r0, #1
   b614c:	469e      	mov	lr, r3
   b614e:	2d00      	cmp	r5, #0
   b6150:	d0e0      	beq.n	b6114 <__udivmoddi4+0xa4>
   b6152:	e9c5 4e00 	strd	r4, lr, [r5]
   b6156:	e7dd      	b.n	b6114 <__udivmoddi4+0xa4>
   b6158:	b902      	cbnz	r2, b615c <__udivmoddi4+0xec>
   b615a:	deff      	udf	#255	; 0xff
   b615c:	fab2 f282 	clz	r2, r2
   b6160:	2a00      	cmp	r2, #0
   b6162:	f040 8092 	bne.w	b628a <__udivmoddi4+0x21a>
   b6166:	eba1 010c 	sub.w	r1, r1, ip
   b616a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b616e:	fa1f fe8c 	uxth.w	lr, ip
   b6172:	2601      	movs	r6, #1
   b6174:	0c20      	lsrs	r0, r4, #16
   b6176:	fbb1 f3f7 	udiv	r3, r1, r7
   b617a:	fb07 1113 	mls	r1, r7, r3, r1
   b617e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6182:	fb0e f003 	mul.w	r0, lr, r3
   b6186:	4288      	cmp	r0, r1
   b6188:	d908      	bls.n	b619c <__udivmoddi4+0x12c>
   b618a:	eb1c 0101 	adds.w	r1, ip, r1
   b618e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b6192:	d202      	bcs.n	b619a <__udivmoddi4+0x12a>
   b6194:	4288      	cmp	r0, r1
   b6196:	f200 80cb 	bhi.w	b6330 <__udivmoddi4+0x2c0>
   b619a:	4643      	mov	r3, r8
   b619c:	1a09      	subs	r1, r1, r0
   b619e:	b2a4      	uxth	r4, r4
   b61a0:	fbb1 f0f7 	udiv	r0, r1, r7
   b61a4:	fb07 1110 	mls	r1, r7, r0, r1
   b61a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b61ac:	fb0e fe00 	mul.w	lr, lr, r0
   b61b0:	45a6      	cmp	lr, r4
   b61b2:	d908      	bls.n	b61c6 <__udivmoddi4+0x156>
   b61b4:	eb1c 0404 	adds.w	r4, ip, r4
   b61b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b61bc:	d202      	bcs.n	b61c4 <__udivmoddi4+0x154>
   b61be:	45a6      	cmp	lr, r4
   b61c0:	f200 80bb 	bhi.w	b633a <__udivmoddi4+0x2ca>
   b61c4:	4608      	mov	r0, r1
   b61c6:	eba4 040e 	sub.w	r4, r4, lr
   b61ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b61ce:	e79c      	b.n	b610a <__udivmoddi4+0x9a>
   b61d0:	f1c6 0720 	rsb	r7, r6, #32
   b61d4:	40b3      	lsls	r3, r6
   b61d6:	fa22 fc07 	lsr.w	ip, r2, r7
   b61da:	ea4c 0c03 	orr.w	ip, ip, r3
   b61de:	fa20 f407 	lsr.w	r4, r0, r7
   b61e2:	fa01 f306 	lsl.w	r3, r1, r6
   b61e6:	431c      	orrs	r4, r3
   b61e8:	40f9      	lsrs	r1, r7
   b61ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b61ee:	fa00 f306 	lsl.w	r3, r0, r6
   b61f2:	fbb1 f8f9 	udiv	r8, r1, r9
   b61f6:	0c20      	lsrs	r0, r4, #16
   b61f8:	fa1f fe8c 	uxth.w	lr, ip
   b61fc:	fb09 1118 	mls	r1, r9, r8, r1
   b6200:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6204:	fb08 f00e 	mul.w	r0, r8, lr
   b6208:	4288      	cmp	r0, r1
   b620a:	fa02 f206 	lsl.w	r2, r2, r6
   b620e:	d90b      	bls.n	b6228 <__udivmoddi4+0x1b8>
   b6210:	eb1c 0101 	adds.w	r1, ip, r1
   b6214:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b6218:	f080 8088 	bcs.w	b632c <__udivmoddi4+0x2bc>
   b621c:	4288      	cmp	r0, r1
   b621e:	f240 8085 	bls.w	b632c <__udivmoddi4+0x2bc>
   b6222:	f1a8 0802 	sub.w	r8, r8, #2
   b6226:	4461      	add	r1, ip
   b6228:	1a09      	subs	r1, r1, r0
   b622a:	b2a4      	uxth	r4, r4
   b622c:	fbb1 f0f9 	udiv	r0, r1, r9
   b6230:	fb09 1110 	mls	r1, r9, r0, r1
   b6234:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b6238:	fb00 fe0e 	mul.w	lr, r0, lr
   b623c:	458e      	cmp	lr, r1
   b623e:	d908      	bls.n	b6252 <__udivmoddi4+0x1e2>
   b6240:	eb1c 0101 	adds.w	r1, ip, r1
   b6244:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b6248:	d26c      	bcs.n	b6324 <__udivmoddi4+0x2b4>
   b624a:	458e      	cmp	lr, r1
   b624c:	d96a      	bls.n	b6324 <__udivmoddi4+0x2b4>
   b624e:	3802      	subs	r0, #2
   b6250:	4461      	add	r1, ip
   b6252:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b6256:	fba0 9402 	umull	r9, r4, r0, r2
   b625a:	eba1 010e 	sub.w	r1, r1, lr
   b625e:	42a1      	cmp	r1, r4
   b6260:	46c8      	mov	r8, r9
   b6262:	46a6      	mov	lr, r4
   b6264:	d356      	bcc.n	b6314 <__udivmoddi4+0x2a4>
   b6266:	d053      	beq.n	b6310 <__udivmoddi4+0x2a0>
   b6268:	b15d      	cbz	r5, b6282 <__udivmoddi4+0x212>
   b626a:	ebb3 0208 	subs.w	r2, r3, r8
   b626e:	eb61 010e 	sbc.w	r1, r1, lr
   b6272:	fa01 f707 	lsl.w	r7, r1, r7
   b6276:	fa22 f306 	lsr.w	r3, r2, r6
   b627a:	40f1      	lsrs	r1, r6
   b627c:	431f      	orrs	r7, r3
   b627e:	e9c5 7100 	strd	r7, r1, [r5]
   b6282:	2600      	movs	r6, #0
   b6284:	4631      	mov	r1, r6
   b6286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b628a:	f1c2 0320 	rsb	r3, r2, #32
   b628e:	40d8      	lsrs	r0, r3
   b6290:	fa0c fc02 	lsl.w	ip, ip, r2
   b6294:	fa21 f303 	lsr.w	r3, r1, r3
   b6298:	4091      	lsls	r1, r2
   b629a:	4301      	orrs	r1, r0
   b629c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b62a0:	fa1f fe8c 	uxth.w	lr, ip
   b62a4:	fbb3 f0f7 	udiv	r0, r3, r7
   b62a8:	fb07 3610 	mls	r6, r7, r0, r3
   b62ac:	0c0b      	lsrs	r3, r1, #16
   b62ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b62b2:	fb00 f60e 	mul.w	r6, r0, lr
   b62b6:	429e      	cmp	r6, r3
   b62b8:	fa04 f402 	lsl.w	r4, r4, r2
   b62bc:	d908      	bls.n	b62d0 <__udivmoddi4+0x260>
   b62be:	eb1c 0303 	adds.w	r3, ip, r3
   b62c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b62c6:	d22f      	bcs.n	b6328 <__udivmoddi4+0x2b8>
   b62c8:	429e      	cmp	r6, r3
   b62ca:	d92d      	bls.n	b6328 <__udivmoddi4+0x2b8>
   b62cc:	3802      	subs	r0, #2
   b62ce:	4463      	add	r3, ip
   b62d0:	1b9b      	subs	r3, r3, r6
   b62d2:	b289      	uxth	r1, r1
   b62d4:	fbb3 f6f7 	udiv	r6, r3, r7
   b62d8:	fb07 3316 	mls	r3, r7, r6, r3
   b62dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b62e0:	fb06 f30e 	mul.w	r3, r6, lr
   b62e4:	428b      	cmp	r3, r1
   b62e6:	d908      	bls.n	b62fa <__udivmoddi4+0x28a>
   b62e8:	eb1c 0101 	adds.w	r1, ip, r1
   b62ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b62f0:	d216      	bcs.n	b6320 <__udivmoddi4+0x2b0>
   b62f2:	428b      	cmp	r3, r1
   b62f4:	d914      	bls.n	b6320 <__udivmoddi4+0x2b0>
   b62f6:	3e02      	subs	r6, #2
   b62f8:	4461      	add	r1, ip
   b62fa:	1ac9      	subs	r1, r1, r3
   b62fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b6300:	e738      	b.n	b6174 <__udivmoddi4+0x104>
   b6302:	462e      	mov	r6, r5
   b6304:	4628      	mov	r0, r5
   b6306:	e705      	b.n	b6114 <__udivmoddi4+0xa4>
   b6308:	4606      	mov	r6, r0
   b630a:	e6e3      	b.n	b60d4 <__udivmoddi4+0x64>
   b630c:	4618      	mov	r0, r3
   b630e:	e6f8      	b.n	b6102 <__udivmoddi4+0x92>
   b6310:	454b      	cmp	r3, r9
   b6312:	d2a9      	bcs.n	b6268 <__udivmoddi4+0x1f8>
   b6314:	ebb9 0802 	subs.w	r8, r9, r2
   b6318:	eb64 0e0c 	sbc.w	lr, r4, ip
   b631c:	3801      	subs	r0, #1
   b631e:	e7a3      	b.n	b6268 <__udivmoddi4+0x1f8>
   b6320:	4646      	mov	r6, r8
   b6322:	e7ea      	b.n	b62fa <__udivmoddi4+0x28a>
   b6324:	4620      	mov	r0, r4
   b6326:	e794      	b.n	b6252 <__udivmoddi4+0x1e2>
   b6328:	4640      	mov	r0, r8
   b632a:	e7d1      	b.n	b62d0 <__udivmoddi4+0x260>
   b632c:	46d0      	mov	r8, sl
   b632e:	e77b      	b.n	b6228 <__udivmoddi4+0x1b8>
   b6330:	3b02      	subs	r3, #2
   b6332:	4461      	add	r1, ip
   b6334:	e732      	b.n	b619c <__udivmoddi4+0x12c>
   b6336:	4630      	mov	r0, r6
   b6338:	e709      	b.n	b614e <__udivmoddi4+0xde>
   b633a:	4464      	add	r4, ip
   b633c:	3802      	subs	r0, #2
   b633e:	e742      	b.n	b61c6 <__udivmoddi4+0x156>

000b6340 <__aeabi_idiv0>:
   b6340:	4770      	bx	lr
   b6342:	bf00      	nop

000b6344 <atexit>:
   b6344:	2300      	movs	r3, #0
   b6346:	4601      	mov	r1, r0
   b6348:	461a      	mov	r2, r3
   b634a:	4618      	mov	r0, r3
   b634c:	f000 b86a 	b.w	b6424 <__register_exitproc>

000b6350 <memcpy>:
   b6350:	440a      	add	r2, r1
   b6352:	4291      	cmp	r1, r2
   b6354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6358:	d100      	bne.n	b635c <memcpy+0xc>
   b635a:	4770      	bx	lr
   b635c:	b510      	push	{r4, lr}
   b635e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6362:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6366:	4291      	cmp	r1, r2
   b6368:	d1f9      	bne.n	b635e <memcpy+0xe>
   b636a:	bd10      	pop	{r4, pc}

000b636c <memset>:
   b636c:	4402      	add	r2, r0
   b636e:	4603      	mov	r3, r0
   b6370:	4293      	cmp	r3, r2
   b6372:	d100      	bne.n	b6376 <memset+0xa>
   b6374:	4770      	bx	lr
   b6376:	f803 1b01 	strb.w	r1, [r3], #1
   b637a:	e7f9      	b.n	b6370 <memset+0x4>

000b637c <srand>:
   b637c:	b538      	push	{r3, r4, r5, lr}
   b637e:	4b10      	ldr	r3, [pc, #64]	; (b63c0 <srand+0x44>)
   b6380:	681d      	ldr	r5, [r3, #0]
   b6382:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6384:	4604      	mov	r4, r0
   b6386:	b9b3      	cbnz	r3, b63b6 <srand+0x3a>
   b6388:	2018      	movs	r0, #24
   b638a:	f7fe f89f 	bl	b44cc <malloc>
   b638e:	4602      	mov	r2, r0
   b6390:	63a8      	str	r0, [r5, #56]	; 0x38
   b6392:	b920      	cbnz	r0, b639e <srand+0x22>
   b6394:	4b0b      	ldr	r3, [pc, #44]	; (b63c4 <srand+0x48>)
   b6396:	480c      	ldr	r0, [pc, #48]	; (b63c8 <srand+0x4c>)
   b6398:	2142      	movs	r1, #66	; 0x42
   b639a:	f7fe f8bf 	bl	b451c <__assert_func>
   b639e:	490b      	ldr	r1, [pc, #44]	; (b63cc <srand+0x50>)
   b63a0:	4b0b      	ldr	r3, [pc, #44]	; (b63d0 <srand+0x54>)
   b63a2:	e9c0 1300 	strd	r1, r3, [r0]
   b63a6:	4b0b      	ldr	r3, [pc, #44]	; (b63d4 <srand+0x58>)
   b63a8:	6083      	str	r3, [r0, #8]
   b63aa:	230b      	movs	r3, #11
   b63ac:	8183      	strh	r3, [r0, #12]
   b63ae:	2100      	movs	r1, #0
   b63b0:	2001      	movs	r0, #1
   b63b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b63b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63b8:	2200      	movs	r2, #0
   b63ba:	611c      	str	r4, [r3, #16]
   b63bc:	615a      	str	r2, [r3, #20]
   b63be:	bd38      	pop	{r3, r4, r5, pc}
   b63c0:	2003e640 	.word	0x2003e640
   b63c4:	000b66a5 	.word	0x000b66a5
   b63c8:	000b66bc 	.word	0x000b66bc
   b63cc:	abcd330e 	.word	0xabcd330e
   b63d0:	e66d1234 	.word	0xe66d1234
   b63d4:	0005deec 	.word	0x0005deec

000b63d8 <strdup>:
   b63d8:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <strdup+0xc>)
   b63da:	4601      	mov	r1, r0
   b63dc:	6818      	ldr	r0, [r3, #0]
   b63de:	f000 b803 	b.w	b63e8 <_strdup_r>
   b63e2:	bf00      	nop
   b63e4:	2003e640 	.word	0x2003e640

000b63e8 <_strdup_r>:
   b63e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63ea:	4604      	mov	r4, r0
   b63ec:	4608      	mov	r0, r1
   b63ee:	460d      	mov	r5, r1
   b63f0:	f000 f80f 	bl	b6412 <strlen>
   b63f4:	1c42      	adds	r2, r0, #1
   b63f6:	4611      	mov	r1, r2
   b63f8:	4620      	mov	r0, r4
   b63fa:	9201      	str	r2, [sp, #4]
   b63fc:	f7fe f886 	bl	b450c <_malloc_r>
   b6400:	4604      	mov	r4, r0
   b6402:	b118      	cbz	r0, b640c <_strdup_r+0x24>
   b6404:	9a01      	ldr	r2, [sp, #4]
   b6406:	4629      	mov	r1, r5
   b6408:	f7ff ffa2 	bl	b6350 <memcpy>
   b640c:	4620      	mov	r0, r4
   b640e:	b003      	add	sp, #12
   b6410:	bd30      	pop	{r4, r5, pc}

000b6412 <strlen>:
   b6412:	4603      	mov	r3, r0
   b6414:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6418:	2a00      	cmp	r2, #0
   b641a:	d1fb      	bne.n	b6414 <strlen+0x2>
   b641c:	1a18      	subs	r0, r3, r0
   b641e:	3801      	subs	r0, #1
   b6420:	4770      	bx	lr
	...

000b6424 <__register_exitproc>:
   b6424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6428:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b64e4 <__register_exitproc+0xc0>
   b642c:	4606      	mov	r6, r0
   b642e:	f8d8 0000 	ldr.w	r0, [r8]
   b6432:	461f      	mov	r7, r3
   b6434:	460d      	mov	r5, r1
   b6436:	4691      	mov	r9, r2
   b6438:	f000 f856 	bl	b64e8 <__retarget_lock_acquire_recursive>
   b643c:	4b25      	ldr	r3, [pc, #148]	; (b64d4 <__register_exitproc+0xb0>)
   b643e:	681c      	ldr	r4, [r3, #0]
   b6440:	b934      	cbnz	r4, b6450 <__register_exitproc+0x2c>
   b6442:	4c25      	ldr	r4, [pc, #148]	; (b64d8 <__register_exitproc+0xb4>)
   b6444:	601c      	str	r4, [r3, #0]
   b6446:	4b25      	ldr	r3, [pc, #148]	; (b64dc <__register_exitproc+0xb8>)
   b6448:	b113      	cbz	r3, b6450 <__register_exitproc+0x2c>
   b644a:	681b      	ldr	r3, [r3, #0]
   b644c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6450:	6863      	ldr	r3, [r4, #4]
   b6452:	2b1f      	cmp	r3, #31
   b6454:	dd07      	ble.n	b6466 <__register_exitproc+0x42>
   b6456:	f8d8 0000 	ldr.w	r0, [r8]
   b645a:	f000 f847 	bl	b64ec <__retarget_lock_release_recursive>
   b645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6466:	b34e      	cbz	r6, b64bc <__register_exitproc+0x98>
   b6468:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b646c:	b988      	cbnz	r0, b6492 <__register_exitproc+0x6e>
   b646e:	4b1c      	ldr	r3, [pc, #112]	; (b64e0 <__register_exitproc+0xbc>)
   b6470:	b923      	cbnz	r3, b647c <__register_exitproc+0x58>
   b6472:	f8d8 0000 	ldr.w	r0, [r8]
   b6476:	f000 f838 	bl	b64ea <__retarget_lock_release>
   b647a:	e7f0      	b.n	b645e <__register_exitproc+0x3a>
   b647c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6480:	f7fe f824 	bl	b44cc <malloc>
   b6484:	2800      	cmp	r0, #0
   b6486:	d0f4      	beq.n	b6472 <__register_exitproc+0x4e>
   b6488:	2300      	movs	r3, #0
   b648a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b648e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6492:	6863      	ldr	r3, [r4, #4]
   b6494:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6498:	2201      	movs	r2, #1
   b649a:	409a      	lsls	r2, r3
   b649c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b64a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b64a4:	4313      	orrs	r3, r2
   b64a6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b64aa:	2e02      	cmp	r6, #2
   b64ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b64b0:	bf02      	ittt	eq
   b64b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b64b6:	4313      	orreq	r3, r2
   b64b8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b64bc:	6863      	ldr	r3, [r4, #4]
   b64be:	f8d8 0000 	ldr.w	r0, [r8]
   b64c2:	1c5a      	adds	r2, r3, #1
   b64c4:	3302      	adds	r3, #2
   b64c6:	6062      	str	r2, [r4, #4]
   b64c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b64cc:	f000 f80e 	bl	b64ec <__retarget_lock_release_recursive>
   b64d0:	2000      	movs	r0, #0
   b64d2:	e7c6      	b.n	b6462 <__register_exitproc+0x3e>
   b64d4:	2003e7e8 	.word	0x2003e7e8
   b64d8:	2003e75c 	.word	0x2003e75c
   b64dc:	00000000 	.word	0x00000000
   b64e0:	000b44cd 	.word	0x000b44cd
   b64e4:	2003e6a4 	.word	0x2003e6a4

000b64e8 <__retarget_lock_acquire_recursive>:
   b64e8:	4770      	bx	lr

000b64ea <__retarget_lock_release>:
   b64ea:	4770      	bx	lr

000b64ec <__retarget_lock_release_recursive>:
   b64ec:	4770      	bx	lr

000b64ee <link_code_end>:
	...

000b64f0 <dynalib_user>:
   b64f0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6500:	0000 0000 696c 6867 2d74 656d 6574 2f72     ....light-meter/
   b6510:	656c 6576 006c 0000                         level...

000b6518 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6520:	4669 000b 466f 000b 46ad 000b 467d 000b     iF..oF...F..}F..
   b6530:	466b 000b                                   kF..

000b6534 <_ZTVN5spark13EthernetClassE>:
	...
   b653c:	4bf7 000b 4bed 000b 4be3 000b 4bd9 000b     .K...K...K...K..
   b654c:	4bcd 000b 4bc1 000b 4dd1 000b 4dd9 000b     .K...K...M...M..
   b655c:	4bb5 000b 4bad 000b 4ba3 000b 4b99 000b     .K...K...K...K..
   b656c:	4e09 000b                                   .N..

000b6570 <_ZTV7TwoWire>:
	...
   b6578:	4c15 000b 4c5f 000b 4c37 000b 4c17 000b     .L.._L..7L...L..
   b6588:	4c3f 000b 4c47 000b 4c4f 000b 4c57 000b     ?L..GL..OL..WL..

000b6598 <_ZTV9IPAddress>:
	...
   b65a0:	4ca1 000b 4c91 000b 4c93 000b 7061 0070     .L...L...L..app.

000b65b0 <_ZTVN5spark12NetworkClassE>:
	...
   b65b8:	4d91 000b 4d9b 000b 4da5 000b 4daf 000b     .M...M...M...M..
   b65c8:	4db9 000b 4dc5 000b 4dd1 000b 4dd9 000b     .M...M...M...M..
   b65d8:	4de1 000b 4ded 000b 4df5 000b 4dff 000b     .M...M...M...M..
   b65e8:	4e09 000b 5925 252d 2d6d 6425 2554 3a48     .N..%Y-%m-%dT%H:
   b65f8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6608 <_ZTV11USARTSerial>:
	...
   b6610:	5185 000b 51f1 000b 51c9 000b 4ef5 000b     .Q...Q...Q...N..
   b6620:	5199 000b 51b5 000b 51a7 000b 51c3 000b     .Q...Q...Q...Q..
   b6630:	5187 000b 518b 000b                         .Q...Q..

000b6638 <_ZTV9USBSerial>:
	...
   b6640:	522f 000b 5297 000b 526d 000b 4ef5 000b     /R...R..mR...N..
   b6650:	525f 000b 5231 000b 5241 000b 5291 000b     _R..1R..AR...R..
   b6660:	5251 000b 5229 000b                         QR..)R..

000b6668 <_ZTVN5spark9WiFiClassE>:
	...
   b6670:	5387 000b 537d 000b 5373 000b 5329 000b     .S..}S..sS..)S..
   b6680:	5367 000b 535b 000b 4dd1 000b 4dd9 000b     gS..[S...M...M..
   b6690:	534f 000b 5347 000b 533d 000b 5333 000b     OS..GS..=S..3S..
   b66a0:	4e09 000b                                   .N..

000b66a4 <_ZSt7nothrow>:
   b66a4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b66b4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b66c4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b66d4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b66e4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b66f4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6704:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6715 <link_const_variable_data_end>:
   b6715:	00          	.byte	0x00
	...

000b6718 <link_constructors_location>:
   b6718:	000b4179 	.word	0x000b4179
   b671c:	000b4659 	.word	0x000b4659
   b6720:	000b4c01 	.word	0x000b4c01
   b6724:	000b4d81 	.word	0x000b4d81
   b6728:	000b4ee1 	.word	0x000b4ee1
   b672c:	000b4f89 	.word	0x000b4f89
   b6730:	000b514d 	.word	0x000b514d
   b6734:	000b5171 	.word	0x000b5171
   b6738:	000b5391 	.word	0x000b5391

000b673c <link_constructors_end>:
   b673c:	00000000 	.word	0x00000000
